// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public abstract class MessageTyp extends Ice.ObjectImpl
                                 implements _MessageTypOperations,
                                            _MessageTypOperationsNC
{
    public MessageTyp()
    {
    }

    public MessageTyp(UserTypPrx user1, UserTypPrx user2, String msg, long timeStamp)
    {
        this.user1 = user1;
        this.user2 = user2;
        this.msg = msg;
        this.timeStamp = timeStamp;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::MessageTyp"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final String getMessageText()
    {
        return getMessageText(null);
    }

    public final long getTimeStampInMillis()
    {
        return getTimeStampInMillis(null);
    }

    public final UserTypPrx getUser1()
    {
        return getUser1(null);
    }

    public final UserTypPrx getUser2()
    {
        return getUser2(null);
    }

    public final void setMessageText(String msg)
    {
        setMessageText(msg, null);
    }

    public final void setTimeStampInMillis(long timeStampMillis)
    {
        setTimeStampInMillis(timeStampMillis, null);
    }

    public final void setUser1(UserTypPrx user1)
    {
        setUser1(user1, null);
    }

    public final void setUser2(UserTypPrx user2)
    {
        setUser2(user2, null);
    }

    public final String _toString()
    {
        return _toString(null);
    }

    public static Ice.DispatchStatus ___getUser1(MessageTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        UserTypPrx __ret = __obj.getUser1(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        UserTypPrxHelper.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setUser1(MessageTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        UserTypPrx user1;
        user1 = UserTypPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.setUser1(user1, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getUser2(MessageTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        UserTypPrx __ret = __obj.getUser2(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        UserTypPrxHelper.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setUser2(MessageTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        UserTypPrx user2;
        user2 = UserTypPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.setUser2(user2, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getMessageText(MessageTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.getMessageText(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setMessageText(MessageTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String msg;
        msg = __is.readString();
        __inS.endReadParams();
        __obj.setMessageText(msg, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getTimeStampInMillis(MessageTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        long __ret = __obj.getTimeStampInMillis(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeLong(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setTimeStampInMillis(MessageTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        long timeStampMillis;
        timeStampMillis = __is.readLong();
        __inS.endReadParams();
        __obj.setTimeStampInMillis(timeStampMillis, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___toString(MessageTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj._toString(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getMessageText",
        "getTimeStampInMillis",
        "getUser1",
        "getUser2",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setMessageText",
        "setTimeStampInMillis",
        "setUser1",
        "setUser2",
        "toString"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getMessageText(this, in, __current);
            }
            case 1:
            {
                return ___getTimeStampInMillis(this, in, __current);
            }
            case 2:
            {
                return ___getUser1(this, in, __current);
            }
            case 3:
            {
                return ___getUser2(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
            case 8:
            {
                return ___setMessageText(this, in, __current);
            }
            case 9:
            {
                return ___setTimeStampInMillis(this, in, __current);
            }
            case 10:
            {
                return ___setUser1(this, in, __current);
            }
            case 11:
            {
                return ___setUser2(this, in, __current);
            }
            case 12:
            {
                return ___toString(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        UserTypPrxHelper.__write(__os, user1);
        UserTypPrxHelper.__write(__os, user2);
        __os.writeString(msg);
        __os.writeLong(timeStamp);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        user1 = UserTypPrxHelper.__read(__is);
        user2 = UserTypPrxHelper.__read(__is);
        msg = __is.readString();
        timeStamp = __is.readLong();
        __is.endReadSlice();
    }

    public UserTypPrx user1;

    public UserTypPrx user2;

    public String msg;

    public long timeStamp;

    public static final long serialVersionUID = -1974378935L;
}
