// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public class BitmapTyp implements java.lang.Cloneable, java.io.Serializable
{
    public byte[] bitmapBitmap;

    public byte[]
    getBitmapBitmap()
    {
        return bitmapBitmap;
    }

    public void
    setBitmapBitmap(byte[] _bitmapBitmap)
    {
        bitmapBitmap = _bitmapBitmap;
    }

    public byte
    getBitmapBitmap(int _index)
    {
        return bitmapBitmap[_index];
    }

    public void
    setBitmapBitmap(int _index, byte _val)
    {
        bitmapBitmap[_index] = _val;
    }

    public CompressFormat bitmapCompressFormat;

    public CompressFormat
    getBitmapCompressFormat()
    {
        return bitmapCompressFormat;
    }

    public void
    setBitmapCompressFormat(CompressFormat _bitmapCompressFormat)
    {
        bitmapCompressFormat = _bitmapCompressFormat;
    }

    public Config bitmapConfig;

    public Config
    getBitmapConfig()
    {
        return bitmapConfig;
    }

    public void
    setBitmapConfig(Config _bitmapConfig)
    {
        bitmapConfig = _bitmapConfig;
    }

    public int density;

    public int
    getDensity()
    {
        return density;
    }

    public void
    setDensity(int _density)
    {
        density = _density;
    }

    public BitmapTyp()
    {
    }

    public BitmapTyp(byte[] bitmapBitmap, CompressFormat bitmapCompressFormat, Config bitmapConfig, int density)
    {
        this.bitmapBitmap = bitmapBitmap;
        this.bitmapCompressFormat = bitmapCompressFormat;
        this.bitmapConfig = bitmapConfig;
        this.density = density;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        BitmapTyp _r = null;
        if(rhs instanceof BitmapTyp)
        {
            _r = (BitmapTyp)rhs;
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(bitmapBitmap, _r.bitmapBitmap))
            {
                return false;
            }
            if(bitmapCompressFormat != _r.bitmapCompressFormat)
            {
                if(bitmapCompressFormat == null || _r.bitmapCompressFormat == null || !bitmapCompressFormat.equals(_r.bitmapCompressFormat))
                {
                    return false;
                }
            }
            if(bitmapConfig != _r.bitmapConfig)
            {
                if(bitmapConfig == null || _r.bitmapConfig == null || !bitmapConfig.equals(_r.bitmapConfig))
                {
                    return false;
                }
            }
            if(density != _r.density)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::cardroid::data::zerocice::BitmapTyp");
        __h = IceInternal.HashUtil.hashAdd(__h, bitmapBitmap);
        __h = IceInternal.HashUtil.hashAdd(__h, bitmapCompressFormat);
        __h = IceInternal.HashUtil.hashAdd(__h, bitmapConfig);
        __h = IceInternal.HashUtil.hashAdd(__h, density);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        BlobHelper.write(__os, bitmapBitmap);
        bitmapCompressFormat.__write(__os);
        bitmapConfig.__write(__os);
        __os.writeInt(density);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        bitmapBitmap = BlobHelper.read(__is);
        bitmapCompressFormat = CompressFormat.__read(__is);
        bitmapConfig = Config.__read(__is);
        density = __is.readInt();
    }

    public static final long serialVersionUID = -756965960L;
}
