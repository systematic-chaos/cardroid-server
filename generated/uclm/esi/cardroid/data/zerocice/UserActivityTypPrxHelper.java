// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public final class UserActivityTypPrxHelper extends Ice.ObjectPrxHelperBase implements UserActivityTypPrx
{
    private static final String __getActivityTrip_name = "getActivityTrip";

    public TripOfferTypPrx getActivityTrip()
    {
        return getActivityTrip(null, false);
    }

    public TripOfferTypPrx getActivityTrip(java.util.Map<String, String> __ctx)
    {
        return getActivityTrip(__ctx, true);
    }

    private TripOfferTypPrx getActivityTrip(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getActivityTrip", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getActivityTrip");
                    __delBase = __getDelegate(false);
                    _UserActivityTypDel __del = (_UserActivityTypDel)__delBase;
                    return __del.getActivityTrip(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getActivityTrip()
    {
        return begin_getActivityTrip(null, false, null);
    }

    public Ice.AsyncResult begin_getActivityTrip(java.util.Map<String, String> __ctx)
    {
        return begin_getActivityTrip(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getActivityTrip(Ice.Callback __cb)
    {
        return begin_getActivityTrip(null, false, __cb);
    }

    public Ice.AsyncResult begin_getActivityTrip(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getActivityTrip(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getActivityTrip(Callback_UserActivityTyp_getActivityTrip __cb)
    {
        return begin_getActivityTrip(null, false, __cb);
    }

    public Ice.AsyncResult begin_getActivityTrip(java.util.Map<String, String> __ctx, Callback_UserActivityTyp_getActivityTrip __cb)
    {
        return begin_getActivityTrip(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getActivityTrip(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getActivityTrip_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getActivityTrip_name, __cb);
        try
        {
            __result.__prepare(__getActivityTrip_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public TripOfferTypPrx end_getActivityTrip(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getActivityTrip_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            TripOfferTypPrx __ret;
            __ret = TripOfferTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getActivityUser_name = "getActivityUser";

    public UserTypPrx getActivityUser()
    {
        return getActivityUser(null, false);
    }

    public UserTypPrx getActivityUser(java.util.Map<String, String> __ctx)
    {
        return getActivityUser(__ctx, true);
    }

    private UserTypPrx getActivityUser(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getActivityUser", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getActivityUser");
                    __delBase = __getDelegate(false);
                    _UserActivityTypDel __del = (_UserActivityTypDel)__delBase;
                    return __del.getActivityUser(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getActivityUser()
    {
        return begin_getActivityUser(null, false, null);
    }

    public Ice.AsyncResult begin_getActivityUser(java.util.Map<String, String> __ctx)
    {
        return begin_getActivityUser(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getActivityUser(Ice.Callback __cb)
    {
        return begin_getActivityUser(null, false, __cb);
    }

    public Ice.AsyncResult begin_getActivityUser(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getActivityUser(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getActivityUser(Callback_UserActivityTyp_getActivityUser __cb)
    {
        return begin_getActivityUser(null, false, __cb);
    }

    public Ice.AsyncResult begin_getActivityUser(java.util.Map<String, String> __ctx, Callback_UserActivityTyp_getActivityUser __cb)
    {
        return begin_getActivityUser(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getActivityUser(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getActivityUser_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getActivityUser_name, __cb);
        try
        {
            __result.__prepare(__getActivityUser_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public UserTypPrx end_getActivityUser(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getActivityUser_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            UserTypPrx __ret;
            __ret = UserTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTimeStampInMillis_name = "getTimeStampInMillis";

    public long getTimeStampInMillis()
    {
        return getTimeStampInMillis(null, false);
    }

    public long getTimeStampInMillis(java.util.Map<String, String> __ctx)
    {
        return getTimeStampInMillis(__ctx, true);
    }

    private long getTimeStampInMillis(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTimeStampInMillis", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTimeStampInMillis");
                    __delBase = __getDelegate(false);
                    _UserActivityTypDel __del = (_UserActivityTypDel)__delBase;
                    return __del.getTimeStampInMillis(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTimeStampInMillis()
    {
        return begin_getTimeStampInMillis(null, false, null);
    }

    public Ice.AsyncResult begin_getTimeStampInMillis(java.util.Map<String, String> __ctx)
    {
        return begin_getTimeStampInMillis(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTimeStampInMillis(Ice.Callback __cb)
    {
        return begin_getTimeStampInMillis(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTimeStampInMillis(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTimeStampInMillis(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTimeStampInMillis(Callback_UserActivityTyp_getTimeStampInMillis __cb)
    {
        return begin_getTimeStampInMillis(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTimeStampInMillis(java.util.Map<String, String> __ctx, Callback_UserActivityTyp_getTimeStampInMillis __cb)
    {
        return begin_getTimeStampInMillis(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTimeStampInMillis(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTimeStampInMillis_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTimeStampInMillis_name, __cb);
        try
        {
            __result.__prepare(__getTimeStampInMillis_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public long end_getTimeStampInMillis(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTimeStampInMillis_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getUserActivityType_name = "getUserActivityType";

    public ActivityType getUserActivityType()
    {
        return getUserActivityType(null, false);
    }

    public ActivityType getUserActivityType(java.util.Map<String, String> __ctx)
    {
        return getUserActivityType(__ctx, true);
    }

    private ActivityType getUserActivityType(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getUserActivityType", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getUserActivityType");
                    __delBase = __getDelegate(false);
                    _UserActivityTypDel __del = (_UserActivityTypDel)__delBase;
                    return __del.getUserActivityType(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getUserActivityType()
    {
        return begin_getUserActivityType(null, false, null);
    }

    public Ice.AsyncResult begin_getUserActivityType(java.util.Map<String, String> __ctx)
    {
        return begin_getUserActivityType(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getUserActivityType(Ice.Callback __cb)
    {
        return begin_getUserActivityType(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserActivityType(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUserActivityType(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUserActivityType(Callback_UserActivityTyp_getUserActivityType __cb)
    {
        return begin_getUserActivityType(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserActivityType(java.util.Map<String, String> __ctx, Callback_UserActivityTyp_getUserActivityType __cb)
    {
        return begin_getUserActivityType(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUserActivityType(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUserActivityType_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUserActivityType_name, __cb);
        try
        {
            __result.__prepare(__getUserActivityType_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ActivityType end_getUserActivityType(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUserActivityType_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ActivityType __ret;
            __ret = ActivityType.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setActivityTrip_name = "setActivityTrip";

    public void setActivityTrip(TripOfferTypPrx activityTrip)
    {
        setActivityTrip(activityTrip, null, false);
    }

    public void setActivityTrip(TripOfferTypPrx activityTrip, java.util.Map<String, String> __ctx)
    {
        setActivityTrip(activityTrip, __ctx, true);
    }

    private void setActivityTrip(TripOfferTypPrx activityTrip, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setActivityTrip", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserActivityTypDel __del = (_UserActivityTypDel)__delBase;
                    __del.setActivityTrip(activityTrip, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setActivityTrip(TripOfferTypPrx activityTrip)
    {
        return begin_setActivityTrip(activityTrip, null, false, null);
    }

    public Ice.AsyncResult begin_setActivityTrip(TripOfferTypPrx activityTrip, java.util.Map<String, String> __ctx)
    {
        return begin_setActivityTrip(activityTrip, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setActivityTrip(TripOfferTypPrx activityTrip, Ice.Callback __cb)
    {
        return begin_setActivityTrip(activityTrip, null, false, __cb);
    }

    public Ice.AsyncResult begin_setActivityTrip(TripOfferTypPrx activityTrip, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setActivityTrip(activityTrip, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setActivityTrip(TripOfferTypPrx activityTrip, Callback_UserActivityTyp_setActivityTrip __cb)
    {
        return begin_setActivityTrip(activityTrip, null, false, __cb);
    }

    public Ice.AsyncResult begin_setActivityTrip(TripOfferTypPrx activityTrip, java.util.Map<String, String> __ctx, Callback_UserActivityTyp_setActivityTrip __cb)
    {
        return begin_setActivityTrip(activityTrip, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setActivityTrip(TripOfferTypPrx activityTrip, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setActivityTrip_name, __cb);
        try
        {
            __result.__prepare(__setActivityTrip_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            TripOfferTypPrxHelper.__write(__os, activityTrip);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setActivityTrip(Ice.AsyncResult __result)
    {
        __end(__result, __setActivityTrip_name);
    }

    private static final String __setActivityUser_name = "setActivityUser";

    public void setActivityUser(UserTypPrx activityUser)
    {
        setActivityUser(activityUser, null, false);
    }

    public void setActivityUser(UserTypPrx activityUser, java.util.Map<String, String> __ctx)
    {
        setActivityUser(activityUser, __ctx, true);
    }

    private void setActivityUser(UserTypPrx activityUser, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setActivityUser", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserActivityTypDel __del = (_UserActivityTypDel)__delBase;
                    __del.setActivityUser(activityUser, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setActivityUser(UserTypPrx activityUser)
    {
        return begin_setActivityUser(activityUser, null, false, null);
    }

    public Ice.AsyncResult begin_setActivityUser(UserTypPrx activityUser, java.util.Map<String, String> __ctx)
    {
        return begin_setActivityUser(activityUser, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setActivityUser(UserTypPrx activityUser, Ice.Callback __cb)
    {
        return begin_setActivityUser(activityUser, null, false, __cb);
    }

    public Ice.AsyncResult begin_setActivityUser(UserTypPrx activityUser, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setActivityUser(activityUser, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setActivityUser(UserTypPrx activityUser, Callback_UserActivityTyp_setActivityUser __cb)
    {
        return begin_setActivityUser(activityUser, null, false, __cb);
    }

    public Ice.AsyncResult begin_setActivityUser(UserTypPrx activityUser, java.util.Map<String, String> __ctx, Callback_UserActivityTyp_setActivityUser __cb)
    {
        return begin_setActivityUser(activityUser, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setActivityUser(UserTypPrx activityUser, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setActivityUser_name, __cb);
        try
        {
            __result.__prepare(__setActivityUser_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            UserTypPrxHelper.__write(__os, activityUser);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setActivityUser(Ice.AsyncResult __result)
    {
        __end(__result, __setActivityUser_name);
    }

    private static final String __setTimeStampInMillis_name = "setTimeStampInMillis";

    public void setTimeStampInMillis(long timeStampMillis)
    {
        setTimeStampInMillis(timeStampMillis, null, false);
    }

    public void setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx)
    {
        setTimeStampInMillis(timeStampMillis, __ctx, true);
    }

    private void setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTimeStampInMillis", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserActivityTypDel __del = (_UserActivityTypDel)__delBase;
                    __del.setTimeStampInMillis(timeStampMillis, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis)
    {
        return begin_setTimeStampInMillis(timeStampMillis, null, false, null);
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx)
    {
        return begin_setTimeStampInMillis(timeStampMillis, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, Ice.Callback __cb)
    {
        return begin_setTimeStampInMillis(timeStampMillis, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTimeStampInMillis(timeStampMillis, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, Callback_UserActivityTyp_setTimeStampInMillis __cb)
    {
        return begin_setTimeStampInMillis(timeStampMillis, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx, Callback_UserActivityTyp_setTimeStampInMillis __cb)
    {
        return begin_setTimeStampInMillis(timeStampMillis, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTimeStampInMillis_name, __cb);
        try
        {
            __result.__prepare(__setTimeStampInMillis_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(timeStampMillis);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTimeStampInMillis(Ice.AsyncResult __result)
    {
        __end(__result, __setTimeStampInMillis_name);
    }

    private static final String __setUserActivityType_name = "setUserActivityType";

    public void setUserActivityType(ActivityType userActivityType)
    {
        setUserActivityType(userActivityType, null, false);
    }

    public void setUserActivityType(ActivityType userActivityType, java.util.Map<String, String> __ctx)
    {
        setUserActivityType(userActivityType, __ctx, true);
    }

    private void setUserActivityType(ActivityType userActivityType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setUserActivityType", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserActivityTypDel __del = (_UserActivityTypDel)__delBase;
                    __del.setUserActivityType(userActivityType, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setUserActivityType(ActivityType userActivityType)
    {
        return begin_setUserActivityType(userActivityType, null, false, null);
    }

    public Ice.AsyncResult begin_setUserActivityType(ActivityType userActivityType, java.util.Map<String, String> __ctx)
    {
        return begin_setUserActivityType(userActivityType, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setUserActivityType(ActivityType userActivityType, Ice.Callback __cb)
    {
        return begin_setUserActivityType(userActivityType, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUserActivityType(ActivityType userActivityType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setUserActivityType(userActivityType, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setUserActivityType(ActivityType userActivityType, Callback_UserActivityTyp_setUserActivityType __cb)
    {
        return begin_setUserActivityType(userActivityType, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUserActivityType(ActivityType userActivityType, java.util.Map<String, String> __ctx, Callback_UserActivityTyp_setUserActivityType __cb)
    {
        return begin_setUserActivityType(userActivityType, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setUserActivityType(ActivityType userActivityType, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setUserActivityType_name, __cb);
        try
        {
            __result.__prepare(__setUserActivityType_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            userActivityType.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setUserActivityType(Ice.AsyncResult __result)
    {
        __end(__result, __setUserActivityType_name);
    }

    private static final String __toString_name = "toString";

    public String _toString()
    {
        return _toString(null, false);
    }

    public String _toString(java.util.Map<String, String> __ctx)
    {
        return _toString(__ctx, true);
    }

    private String _toString(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "_toString", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("_toString");
                    __delBase = __getDelegate(false);
                    _UserActivityTypDel __del = (_UserActivityTypDel)__delBase;
                    return __del._toString(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_toString()
    {
        return begin_toString(null, false, null);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx)
    {
        return begin_toString(__ctx, true, null);
    }

    public Ice.AsyncResult begin_toString(Ice.Callback __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_toString(Callback_UserActivityTyp_toString __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Callback_UserActivityTyp_toString __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__toString_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __toString_name, __cb);
        try
        {
            __result.__prepare(__toString_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_toString(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __toString_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static UserActivityTypPrx checkedCast(Ice.ObjectPrx __obj)
    {
        UserActivityTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof UserActivityTypPrx)
            {
                __d = (UserActivityTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    UserActivityTypPrxHelper __h = new UserActivityTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static UserActivityTypPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        UserActivityTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof UserActivityTypPrx)
            {
                __d = (UserActivityTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    UserActivityTypPrxHelper __h = new UserActivityTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static UserActivityTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        UserActivityTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    UserActivityTypPrxHelper __h = new UserActivityTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static UserActivityTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        UserActivityTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    UserActivityTypPrxHelper __h = new UserActivityTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static UserActivityTypPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        UserActivityTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof UserActivityTypPrx)
            {
                __d = (UserActivityTypPrx)__obj;
            }
            else
            {
                UserActivityTypPrxHelper __h = new UserActivityTypPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static UserActivityTypPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        UserActivityTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            UserActivityTypPrxHelper __h = new UserActivityTypPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::UserActivityTyp"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _UserActivityTypDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _UserActivityTypDelD();
    }

    public static void __write(IceInternal.BasicStream __os, UserActivityTypPrx v)
    {
        __os.writeProxy(v);
    }

    public static UserActivityTypPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            UserActivityTypPrxHelper result = new UserActivityTypPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
