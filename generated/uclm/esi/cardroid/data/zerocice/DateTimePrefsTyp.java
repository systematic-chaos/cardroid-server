// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public abstract class DateTimePrefsTyp extends DateTyp
                                       implements _DateTimePrefsTypOperations,
                                                  _DateTimePrefsTypOperationsNC
{
    public DateTimePrefsTyp()
    {
        super();
    }

    public DateTimePrefsTyp(long datetime, int toleranceDays, TimePreferences timePrefs)
    {
        super(datetime);
        this.toleranceDays = toleranceDays;
        this.timePrefs = timePrefs;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::DateTimePrefsTyp",
        "::cardroid::data::zerocice::DateTyp"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final TimePreferences getTimePrefs()
    {
        return getTimePrefs(null);
    }

    public final int getToleranceDays()
    {
        return getToleranceDays(null);
    }

    public final void setTimePrefs(TimePreferences timePrefs)
    {
        setTimePrefs(timePrefs, null);
    }

    public final void setToleranceDays(int toleranceDays)
    {
        setToleranceDays(toleranceDays, null);
    }

    public static Ice.DispatchStatus ___getToleranceDays(DateTimePrefsTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        int __ret = __obj.getToleranceDays(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setToleranceDays(DateTimePrefsTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int toleranceDays;
        toleranceDays = __is.readInt();
        __inS.endReadParams();
        __obj.setToleranceDays(toleranceDays, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getTimePrefs(DateTimePrefsTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        TimePreferences __ret = __obj.getTimePrefs(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __ret.__write(__os);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setTimePrefs(DateTimePrefsTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TimePreferences timePrefs;
        timePrefs = TimePreferences.__read(__is);
        __inS.endReadParams();
        __obj.setTimePrefs(timePrefs, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getTimeInMillis",
        "getTimePrefs",
        "getToleranceDays",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setTimeInMillis",
        "setTimePrefs",
        "setToleranceDays",
        "toString"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return DateTyp.___getTimeInMillis(this, in, __current);
            }
            case 1:
            {
                return ___getTimePrefs(this, in, __current);
            }
            case 2:
            {
                return ___getToleranceDays(this, in, __current);
            }
            case 3:
            {
                return ___ice_id(this, in, __current);
            }
            case 4:
            {
                return ___ice_ids(this, in, __current);
            }
            case 5:
            {
                return ___ice_isA(this, in, __current);
            }
            case 6:
            {
                return ___ice_ping(this, in, __current);
            }
            case 7:
            {
                return DateTyp.___setTimeInMillis(this, in, __current);
            }
            case 8:
            {
                return ___setTimePrefs(this, in, __current);
            }
            case 9:
            {
                return ___setToleranceDays(this, in, __current);
            }
            case 10:
            {
                return DateTyp.___toString(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, false);
        __os.writeInt(toleranceDays);
        timePrefs.__write(__os);
        __os.endWriteSlice();
        super.__writeImpl(__os);
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        toleranceDays = __is.readInt();
        timePrefs = TimePreferences.__read(__is);
        __is.endReadSlice();
        super.__readImpl(__is);
    }

    public int toleranceDays;

    public TimePreferences timePrefs;

    public static final long serialVersionUID = 1537866071L;
}
