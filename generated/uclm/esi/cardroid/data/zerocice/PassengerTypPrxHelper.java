// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public final class PassengerTypPrxHelper extends Ice.ObjectPrxHelperBase implements PassengerTypPrx
{
    private static final String __getNSeats_name = "getNSeats";

    public int getNSeats()
    {
        return getNSeats(null, false);
    }

    public int getNSeats(java.util.Map<String, String> __ctx)
    {
        return getNSeats(__ctx, true);
    }

    private int getNSeats(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getNSeats", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getNSeats");
                    __delBase = __getDelegate(false);
                    _PassengerTypDel __del = (_PassengerTypDel)__delBase;
                    return __del.getNSeats(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getNSeats()
    {
        return begin_getNSeats(null, false, null);
    }

    public Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx)
    {
        return begin_getNSeats(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getNSeats(Ice.Callback __cb)
    {
        return begin_getNSeats(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getNSeats(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getNSeats(Callback_PassengerTyp_getNSeats __cb)
    {
        return begin_getNSeats(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx, Callback_PassengerTyp_getNSeats __cb)
    {
        return begin_getNSeats(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getNSeats_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getNSeats_name, __cb);
        try
        {
            __result.__prepare(__getNSeats_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getNSeats(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getNSeats_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPassengerUser_name = "getPassengerUser";

    public UserTypPrx getPassengerUser()
    {
        return getPassengerUser(null, false);
    }

    public UserTypPrx getPassengerUser(java.util.Map<String, String> __ctx)
    {
        return getPassengerUser(__ctx, true);
    }

    private UserTypPrx getPassengerUser(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPassengerUser", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPassengerUser");
                    __delBase = __getDelegate(false);
                    _PassengerTypDel __del = (_PassengerTypDel)__delBase;
                    return __del.getPassengerUser(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPassengerUser()
    {
        return begin_getPassengerUser(null, false, null);
    }

    public Ice.AsyncResult begin_getPassengerUser(java.util.Map<String, String> __ctx)
    {
        return begin_getPassengerUser(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPassengerUser(Ice.Callback __cb)
    {
        return begin_getPassengerUser(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPassengerUser(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPassengerUser(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPassengerUser(Callback_PassengerTyp_getPassengerUser __cb)
    {
        return begin_getPassengerUser(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPassengerUser(java.util.Map<String, String> __ctx, Callback_PassengerTyp_getPassengerUser __cb)
    {
        return begin_getPassengerUser(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPassengerUser(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPassengerUser_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPassengerUser_name, __cb);
        try
        {
            __result.__prepare(__getPassengerUser_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public UserTypPrx end_getPassengerUser(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPassengerUser_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            UserTypPrx __ret;
            __ret = UserTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setNSeats_name = "setNSeats";

    public void setNSeats(int nSeats)
    {
        setNSeats(nSeats, null, false);
    }

    public void setNSeats(int nSeats, java.util.Map<String, String> __ctx)
    {
        setNSeats(nSeats, __ctx, true);
    }

    private void setNSeats(int nSeats, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setNSeats", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _PassengerTypDel __del = (_PassengerTypDel)__delBase;
                    __del.setNSeats(nSeats, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats)
    {
        return begin_setNSeats(nSeats, null, false, null);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx)
    {
        return begin_setNSeats(nSeats, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, Ice.Callback __cb)
    {
        return begin_setNSeats(nSeats, null, false, __cb);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setNSeats(nSeats, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, Callback_PassengerTyp_setNSeats __cb)
    {
        return begin_setNSeats(nSeats, null, false, __cb);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx, Callback_PassengerTyp_setNSeats __cb)
    {
        return begin_setNSeats(nSeats, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setNSeats_name, __cb);
        try
        {
            __result.__prepare(__setNSeats_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(nSeats);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setNSeats(Ice.AsyncResult __result)
    {
        __end(__result, __setNSeats_name);
    }

    private static final String __setPassengerUser_name = "setPassengerUser";

    public void setPassengerUser(UserTypPrx passengerUser)
    {
        setPassengerUser(passengerUser, null, false);
    }

    public void setPassengerUser(UserTypPrx passengerUser, java.util.Map<String, String> __ctx)
    {
        setPassengerUser(passengerUser, __ctx, true);
    }

    private void setPassengerUser(UserTypPrx passengerUser, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setPassengerUser", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _PassengerTypDel __del = (_PassengerTypDel)__delBase;
                    __del.setPassengerUser(passengerUser, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setPassengerUser(UserTypPrx passengerUser)
    {
        return begin_setPassengerUser(passengerUser, null, false, null);
    }

    public Ice.AsyncResult begin_setPassengerUser(UserTypPrx passengerUser, java.util.Map<String, String> __ctx)
    {
        return begin_setPassengerUser(passengerUser, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setPassengerUser(UserTypPrx passengerUser, Ice.Callback __cb)
    {
        return begin_setPassengerUser(passengerUser, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPassengerUser(UserTypPrx passengerUser, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPassengerUser(passengerUser, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setPassengerUser(UserTypPrx passengerUser, Callback_PassengerTyp_setPassengerUser __cb)
    {
        return begin_setPassengerUser(passengerUser, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPassengerUser(UserTypPrx passengerUser, java.util.Map<String, String> __ctx, Callback_PassengerTyp_setPassengerUser __cb)
    {
        return begin_setPassengerUser(passengerUser, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPassengerUser(UserTypPrx passengerUser, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPassengerUser_name, __cb);
        try
        {
            __result.__prepare(__setPassengerUser_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            UserTypPrxHelper.__write(__os, passengerUser);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setPassengerUser(Ice.AsyncResult __result)
    {
        __end(__result, __setPassengerUser_name);
    }

    private static final String __toString_name = "toString";

    public String _toString()
    {
        return _toString(null, false);
    }

    public String _toString(java.util.Map<String, String> __ctx)
    {
        return _toString(__ctx, true);
    }

    private String _toString(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "_toString", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("_toString");
                    __delBase = __getDelegate(false);
                    _PassengerTypDel __del = (_PassengerTypDel)__delBase;
                    return __del._toString(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_toString()
    {
        return begin_toString(null, false, null);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx)
    {
        return begin_toString(__ctx, true, null);
    }

    public Ice.AsyncResult begin_toString(Ice.Callback __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_toString(Callback_PassengerTyp_toString __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Callback_PassengerTyp_toString __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__toString_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __toString_name, __cb);
        try
        {
            __result.__prepare(__toString_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_toString(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __toString_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static PassengerTypPrx checkedCast(Ice.ObjectPrx __obj)
    {
        PassengerTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PassengerTypPrx)
            {
                __d = (PassengerTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    PassengerTypPrxHelper __h = new PassengerTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PassengerTypPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        PassengerTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PassengerTypPrx)
            {
                __d = (PassengerTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    PassengerTypPrxHelper __h = new PassengerTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PassengerTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PassengerTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    PassengerTypPrxHelper __h = new PassengerTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PassengerTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        PassengerTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    PassengerTypPrxHelper __h = new PassengerTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PassengerTypPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        PassengerTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PassengerTypPrx)
            {
                __d = (PassengerTypPrx)__obj;
            }
            else
            {
                PassengerTypPrxHelper __h = new PassengerTypPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static PassengerTypPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PassengerTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            PassengerTypPrxHelper __h = new PassengerTypPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::PassengerTyp"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _PassengerTypDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _PassengerTypDelD();
    }

    public static void __write(IceInternal.BasicStream __os, PassengerTypPrx v)
    {
        __os.writeProxy(v);
    }

    public static PassengerTypPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PassengerTypPrxHelper result = new PassengerTypPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
