// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public abstract class UserActivityTyp extends Ice.ObjectImpl
                                      implements _UserActivityTypOperations,
                                                 _UserActivityTypOperationsNC
{
    public UserActivityTyp()
    {
    }

    public UserActivityTyp(UserTypPrx activityUser, TripOfferTypPrx activityTrip, ActivityType userActivityType, long timeStamp)
    {
        this.activityUser = activityUser;
        this.activityTrip = activityTrip;
        this.userActivityType = userActivityType;
        this.timeStamp = timeStamp;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::UserActivityTyp"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final TripOfferTypPrx getActivityTrip()
    {
        return getActivityTrip(null);
    }

    public final UserTypPrx getActivityUser()
    {
        return getActivityUser(null);
    }

    public final long getTimeStampInMillis()
    {
        return getTimeStampInMillis(null);
    }

    public final ActivityType getUserActivityType()
    {
        return getUserActivityType(null);
    }

    public final void setActivityTrip(TripOfferTypPrx activityTrip)
    {
        setActivityTrip(activityTrip, null);
    }

    public final void setActivityUser(UserTypPrx activityUser)
    {
        setActivityUser(activityUser, null);
    }

    public final void setTimeStampInMillis(long timeStampMillis)
    {
        setTimeStampInMillis(timeStampMillis, null);
    }

    public final void setUserActivityType(ActivityType userActivityType)
    {
        setUserActivityType(userActivityType, null);
    }

    public final String _toString()
    {
        return _toString(null);
    }

    public static Ice.DispatchStatus ___getActivityUser(UserActivityTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        UserTypPrx __ret = __obj.getActivityUser(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        UserTypPrxHelper.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setActivityUser(UserActivityTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        UserTypPrx activityUser;
        activityUser = UserTypPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.setActivityUser(activityUser, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getActivityTrip(UserActivityTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        TripOfferTypPrx __ret = __obj.getActivityTrip(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        TripOfferTypPrxHelper.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setActivityTrip(UserActivityTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TripOfferTypPrx activityTrip;
        activityTrip = TripOfferTypPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.setActivityTrip(activityTrip, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getUserActivityType(UserActivityTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        ActivityType __ret = __obj.getUserActivityType(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __ret.__write(__os);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setUserActivityType(UserActivityTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ActivityType userActivityType;
        userActivityType = ActivityType.__read(__is);
        __inS.endReadParams();
        __obj.setUserActivityType(userActivityType, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getTimeStampInMillis(UserActivityTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        long __ret = __obj.getTimeStampInMillis(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeLong(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setTimeStampInMillis(UserActivityTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        long timeStampMillis;
        timeStampMillis = __is.readLong();
        __inS.endReadParams();
        __obj.setTimeStampInMillis(timeStampMillis, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___toString(UserActivityTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj._toString(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getActivityTrip",
        "getActivityUser",
        "getTimeStampInMillis",
        "getUserActivityType",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setActivityTrip",
        "setActivityUser",
        "setTimeStampInMillis",
        "setUserActivityType",
        "toString"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getActivityTrip(this, in, __current);
            }
            case 1:
            {
                return ___getActivityUser(this, in, __current);
            }
            case 2:
            {
                return ___getTimeStampInMillis(this, in, __current);
            }
            case 3:
            {
                return ___getUserActivityType(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
            case 8:
            {
                return ___setActivityTrip(this, in, __current);
            }
            case 9:
            {
                return ___setActivityUser(this, in, __current);
            }
            case 10:
            {
                return ___setTimeStampInMillis(this, in, __current);
            }
            case 11:
            {
                return ___setUserActivityType(this, in, __current);
            }
            case 12:
            {
                return ___toString(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        UserTypPrxHelper.__write(__os, activityUser);
        TripOfferTypPrxHelper.__write(__os, activityTrip);
        userActivityType.__write(__os);
        __os.writeLong(timeStamp);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        activityUser = UserTypPrxHelper.__read(__is);
        activityTrip = TripOfferTypPrxHelper.__read(__is);
        userActivityType = ActivityType.__read(__is);
        timeStamp = __is.readLong();
        __is.endReadSlice();
    }

    public UserTypPrx activityUser;

    public TripOfferTypPrx activityTrip;

    public ActivityType userActivityType;

    public long timeStamp;

    public static final long serialVersionUID = 2090688974L;
}
