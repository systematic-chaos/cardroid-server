// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public final class PlaceTypPrxHelper extends Ice.ObjectPrxHelperBase implements PlaceTypPrx
{
    private static final String __getCoords_name = "getCoords";

    public LatLngTyp getCoords()
    {
        return getCoords(null, false);
    }

    public LatLngTyp getCoords(java.util.Map<String, String> __ctx)
    {
        return getCoords(__ctx, true);
    }

    private LatLngTyp getCoords(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCoords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCoords");
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    return __del.getCoords(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCoords()
    {
        return begin_getCoords(null, false, null);
    }

    public Ice.AsyncResult begin_getCoords(java.util.Map<String, String> __ctx)
    {
        return begin_getCoords(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCoords(Ice.Callback __cb)
    {
        return begin_getCoords(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCoords(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCoords(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCoords(Callback_PlaceTyp_getCoords __cb)
    {
        return begin_getCoords(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCoords(java.util.Map<String, String> __ctx, Callback_PlaceTyp_getCoords __cb)
    {
        return begin_getCoords(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCoords(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCoords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCoords_name, __cb);
        try
        {
            __result.__prepare(__getCoords_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public LatLngTyp end_getCoords(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCoords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            LatLngTyp __ret;
            __ret = new LatLngTyp();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getDescription_name = "getDescription";

    public String getDescription()
    {
        return getDescription(null, false);
    }

    public String getDescription(java.util.Map<String, String> __ctx)
    {
        return getDescription(__ctx, true);
    }

    private String getDescription(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDescription", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDescription");
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    return __del.getDescription(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getDescription()
    {
        return begin_getDescription(null, false, null);
    }

    public Ice.AsyncResult begin_getDescription(java.util.Map<String, String> __ctx)
    {
        return begin_getDescription(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getDescription(Ice.Callback __cb)
    {
        return begin_getDescription(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDescription(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDescription(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDescription(Callback_PlaceTyp_getDescription __cb)
    {
        return begin_getDescription(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDescription(java.util.Map<String, String> __ctx, Callback_PlaceTyp_getDescription __cb)
    {
        return begin_getDescription(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDescription(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDescription_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDescription_name, __cb);
        try
        {
            __result.__prepare(__getDescription_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getDescription(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getDescription_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getName_name = "getName";

    public String getName()
    {
        return getName(null, false);
    }

    public String getName(java.util.Map<String, String> __ctx)
    {
        return getName(__ctx, true);
    }

    private String getName(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getName", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getName");
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    return __del.getName(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getName()
    {
        return begin_getName(null, false, null);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx)
    {
        return begin_getName(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getName(Ice.Callback __cb)
    {
        return begin_getName(null, false, __cb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getName(Callback_PlaceTyp_getName __cb)
    {
        return begin_getName(null, false, __cb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Callback_PlaceTyp_getName __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getName_name, __cb);
        try
        {
            __result.__prepare(__getName_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getName_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getSnapshotBytes_name = "getSnapshotBytes";

    public byte[] getSnapshotBytes()
    {
        return getSnapshotBytes(null, false);
    }

    public byte[] getSnapshotBytes(java.util.Map<String, String> __ctx)
    {
        return getSnapshotBytes(__ctx, true);
    }

    private byte[] getSnapshotBytes(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSnapshotBytes", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSnapshotBytes");
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    return __del.getSnapshotBytes(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSnapshotBytes()
    {
        return begin_getSnapshotBytes(null, false, null);
    }

    public Ice.AsyncResult begin_getSnapshotBytes(java.util.Map<String, String> __ctx)
    {
        return begin_getSnapshotBytes(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSnapshotBytes(Ice.Callback __cb)
    {
        return begin_getSnapshotBytes(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSnapshotBytes(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSnapshotBytes(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSnapshotBytes(Callback_PlaceTyp_getSnapshotBytes __cb)
    {
        return begin_getSnapshotBytes(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSnapshotBytes(java.util.Map<String, String> __ctx, Callback_PlaceTyp_getSnapshotBytes __cb)
    {
        return begin_getSnapshotBytes(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSnapshotBytes(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSnapshotBytes_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSnapshotBytes_name, __cb);
        try
        {
            __result.__prepare(__getSnapshotBytes_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public byte[] end_getSnapshotBytes(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSnapshotBytes_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            byte[] __ret;
            __ret = BlobHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __hasDescription_name = "hasDescription";

    public boolean hasDescription()
    {
        return hasDescription(null, false);
    }

    public boolean hasDescription(java.util.Map<String, String> __ctx)
    {
        return hasDescription(__ctx, true);
    }

    private boolean hasDescription(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "hasDescription", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("hasDescription");
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    return __del.hasDescription(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_hasDescription()
    {
        return begin_hasDescription(null, false, null);
    }

    public Ice.AsyncResult begin_hasDescription(java.util.Map<String, String> __ctx)
    {
        return begin_hasDescription(__ctx, true, null);
    }

    public Ice.AsyncResult begin_hasDescription(Ice.Callback __cb)
    {
        return begin_hasDescription(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasDescription(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hasDescription(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_hasDescription(Callback_PlaceTyp_hasDescription __cb)
    {
        return begin_hasDescription(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasDescription(java.util.Map<String, String> __ctx, Callback_PlaceTyp_hasDescription __cb)
    {
        return begin_hasDescription(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_hasDescription(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hasDescription_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __hasDescription_name, __cb);
        try
        {
            __result.__prepare(__hasDescription_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_hasDescription(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __hasDescription_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __hasSnapshot_name = "hasSnapshot";

    public boolean hasSnapshot()
    {
        return hasSnapshot(null, false);
    }

    public boolean hasSnapshot(java.util.Map<String, String> __ctx)
    {
        return hasSnapshot(__ctx, true);
    }

    private boolean hasSnapshot(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "hasSnapshot", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("hasSnapshot");
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    return __del.hasSnapshot(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_hasSnapshot()
    {
        return begin_hasSnapshot(null, false, null);
    }

    public Ice.AsyncResult begin_hasSnapshot(java.util.Map<String, String> __ctx)
    {
        return begin_hasSnapshot(__ctx, true, null);
    }

    public Ice.AsyncResult begin_hasSnapshot(Ice.Callback __cb)
    {
        return begin_hasSnapshot(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasSnapshot(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hasSnapshot(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_hasSnapshot(Callback_PlaceTyp_hasSnapshot __cb)
    {
        return begin_hasSnapshot(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasSnapshot(java.util.Map<String, String> __ctx, Callback_PlaceTyp_hasSnapshot __cb)
    {
        return begin_hasSnapshot(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_hasSnapshot(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hasSnapshot_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __hasSnapshot_name, __cb);
        try
        {
            __result.__prepare(__hasSnapshot_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_hasSnapshot(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __hasSnapshot_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setCoords_name = "setCoords";

    public void setCoords(LatLngTyp coords)
    {
        setCoords(coords, null, false);
    }

    public void setCoords(LatLngTyp coords, java.util.Map<String, String> __ctx)
    {
        setCoords(coords, __ctx, true);
    }

    private void setCoords(LatLngTyp coords, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCoords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    __del.setCoords(coords, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCoords(LatLngTyp coords)
    {
        return begin_setCoords(coords, null, false, null);
    }

    public Ice.AsyncResult begin_setCoords(LatLngTyp coords, java.util.Map<String, String> __ctx)
    {
        return begin_setCoords(coords, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCoords(LatLngTyp coords, Ice.Callback __cb)
    {
        return begin_setCoords(coords, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCoords(LatLngTyp coords, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCoords(coords, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCoords(LatLngTyp coords, Callback_PlaceTyp_setCoords __cb)
    {
        return begin_setCoords(coords, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCoords(LatLngTyp coords, java.util.Map<String, String> __ctx, Callback_PlaceTyp_setCoords __cb)
    {
        return begin_setCoords(coords, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCoords(LatLngTyp coords, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCoords_name, __cb);
        try
        {
            __result.__prepare(__setCoords_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            coords.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCoords(Ice.AsyncResult __result)
    {
        __end(__result, __setCoords_name);
    }

    private static final String __setDescription_name = "setDescription";

    public void setDescription(String description)
    {
        setDescription(description, null, false);
    }

    public void setDescription(String description, java.util.Map<String, String> __ctx)
    {
        setDescription(description, __ctx, true);
    }

    private void setDescription(String description, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setDescription", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    __del.setDescription(description, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setDescription(String description)
    {
        return begin_setDescription(description, null, false, null);
    }

    public Ice.AsyncResult begin_setDescription(String description, java.util.Map<String, String> __ctx)
    {
        return begin_setDescription(description, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setDescription(String description, Ice.Callback __cb)
    {
        return begin_setDescription(description, null, false, __cb);
    }

    public Ice.AsyncResult begin_setDescription(String description, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setDescription(description, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setDescription(String description, Callback_PlaceTyp_setDescription __cb)
    {
        return begin_setDescription(description, null, false, __cb);
    }

    public Ice.AsyncResult begin_setDescription(String description, java.util.Map<String, String> __ctx, Callback_PlaceTyp_setDescription __cb)
    {
        return begin_setDescription(description, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setDescription(String description, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setDescription_name, __cb);
        try
        {
            __result.__prepare(__setDescription_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(description);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setDescription(Ice.AsyncResult __result)
    {
        __end(__result, __setDescription_name);
    }

    private static final String __setName_name = "setName";

    public void setName(String name)
    {
        setName(name, null, false);
    }

    public void setName(String name, java.util.Map<String, String> __ctx)
    {
        setName(name, __ctx, true);
    }

    private void setName(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setName", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    __del.setName(name, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setName(String name)
    {
        return begin_setName(name, null, false, null);
    }

    public Ice.AsyncResult begin_setName(String name, java.util.Map<String, String> __ctx)
    {
        return begin_setName(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setName(String name, Ice.Callback __cb)
    {
        return begin_setName(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_setName(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setName(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setName(String name, Callback_PlaceTyp_setName __cb)
    {
        return begin_setName(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_setName(String name, java.util.Map<String, String> __ctx, Callback_PlaceTyp_setName __cb)
    {
        return begin_setName(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setName(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setName_name, __cb);
        try
        {
            __result.__prepare(__setName_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setName(Ice.AsyncResult __result)
    {
        __end(__result, __setName_name);
    }

    private static final String __setSnapshotBytes_name = "setSnapshotBytes";

    public void setSnapshotBytes(byte[] snapshotBytes)
    {
        setSnapshotBytes(snapshotBytes, null, false);
    }

    public void setSnapshotBytes(byte[] snapshotBytes, java.util.Map<String, String> __ctx)
    {
        setSnapshotBytes(snapshotBytes, __ctx, true);
    }

    private void setSnapshotBytes(byte[] snapshotBytes, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setSnapshotBytes", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    __del.setSnapshotBytes(snapshotBytes, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setSnapshotBytes(byte[] snapshotBytes)
    {
        return begin_setSnapshotBytes(snapshotBytes, null, false, null);
    }

    public Ice.AsyncResult begin_setSnapshotBytes(byte[] snapshotBytes, java.util.Map<String, String> __ctx)
    {
        return begin_setSnapshotBytes(snapshotBytes, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setSnapshotBytes(byte[] snapshotBytes, Ice.Callback __cb)
    {
        return begin_setSnapshotBytes(snapshotBytes, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSnapshotBytes(byte[] snapshotBytes, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSnapshotBytes(snapshotBytes, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setSnapshotBytes(byte[] snapshotBytes, Callback_PlaceTyp_setSnapshotBytes __cb)
    {
        return begin_setSnapshotBytes(snapshotBytes, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSnapshotBytes(byte[] snapshotBytes, java.util.Map<String, String> __ctx, Callback_PlaceTyp_setSnapshotBytes __cb)
    {
        return begin_setSnapshotBytes(snapshotBytes, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSnapshotBytes(byte[] snapshotBytes, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSnapshotBytes_name, __cb);
        try
        {
            __result.__prepare(__setSnapshotBytes_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            BlobHelper.write(__os, snapshotBytes);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setSnapshotBytes(Ice.AsyncResult __result)
    {
        __end(__result, __setSnapshotBytes_name);
    }

    private static final String __toString_name = "toString";

    public String _toString()
    {
        return _toString(null, false);
    }

    public String _toString(java.util.Map<String, String> __ctx)
    {
        return _toString(__ctx, true);
    }

    private String _toString(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "_toString", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("_toString");
                    __delBase = __getDelegate(false);
                    _PlaceTypDel __del = (_PlaceTypDel)__delBase;
                    return __del._toString(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_toString()
    {
        return begin_toString(null, false, null);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx)
    {
        return begin_toString(__ctx, true, null);
    }

    public Ice.AsyncResult begin_toString(Ice.Callback __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_toString(Callback_PlaceTyp_toString __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Callback_PlaceTyp_toString __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__toString_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __toString_name, __cb);
        try
        {
            __result.__prepare(__toString_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_toString(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __toString_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static PlaceTypPrx checkedCast(Ice.ObjectPrx __obj)
    {
        PlaceTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PlaceTypPrx)
            {
                __d = (PlaceTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    PlaceTypPrxHelper __h = new PlaceTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PlaceTypPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        PlaceTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PlaceTypPrx)
            {
                __d = (PlaceTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    PlaceTypPrxHelper __h = new PlaceTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PlaceTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PlaceTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    PlaceTypPrxHelper __h = new PlaceTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PlaceTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        PlaceTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    PlaceTypPrxHelper __h = new PlaceTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PlaceTypPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        PlaceTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PlaceTypPrx)
            {
                __d = (PlaceTypPrx)__obj;
            }
            else
            {
                PlaceTypPrxHelper __h = new PlaceTypPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static PlaceTypPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PlaceTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            PlaceTypPrxHelper __h = new PlaceTypPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::PlaceTyp"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _PlaceTypDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _PlaceTypDelD();
    }

    public static void __write(IceInternal.BasicStream __os, PlaceTypPrx v)
    {
        __os.writeProxy(v);
    }

    public static PlaceTypPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PlaceTypPrxHelper result = new PlaceTypPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
