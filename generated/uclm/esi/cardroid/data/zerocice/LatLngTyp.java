// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public class LatLngTyp implements java.lang.Cloneable, java.io.Serializable
{
    public double latitude;

    public double
    getLatitude()
    {
        return latitude;
    }

    public void
    setLatitude(double _latitude)
    {
        latitude = _latitude;
    }

    public double longitude;

    public double
    getLongitude()
    {
        return longitude;
    }

    public void
    setLongitude(double _longitude)
    {
        longitude = _longitude;
    }

    public LatLngTyp()
    {
    }

    public LatLngTyp(double latitude, double longitude)
    {
        this.latitude = latitude;
        this.longitude = longitude;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LatLngTyp _r = null;
        if(rhs instanceof LatLngTyp)
        {
            _r = (LatLngTyp)rhs;
        }

        if(_r != null)
        {
            if(latitude != _r.latitude)
            {
                return false;
            }
            if(longitude != _r.longitude)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::cardroid::data::zerocice::LatLngTyp");
        __h = IceInternal.HashUtil.hashAdd(__h, latitude);
        __h = IceInternal.HashUtil.hashAdd(__h, longitude);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeDouble(latitude);
        __os.writeDouble(longitude);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        latitude = __is.readDouble();
        longitude = __is.readDouble();
    }

    public static final long serialVersionUID = -14884221L;
}
