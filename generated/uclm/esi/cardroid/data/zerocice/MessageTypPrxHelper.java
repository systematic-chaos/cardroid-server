// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public final class MessageTypPrxHelper extends Ice.ObjectPrxHelperBase implements MessageTypPrx
{
    private static final String __getMessageText_name = "getMessageText";

    public String getMessageText()
    {
        return getMessageText(null, false);
    }

    public String getMessageText(java.util.Map<String, String> __ctx)
    {
        return getMessageText(__ctx, true);
    }

    private String getMessageText(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMessageText", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMessageText");
                    __delBase = __getDelegate(false);
                    _MessageTypDel __del = (_MessageTypDel)__delBase;
                    return __del.getMessageText(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMessageText()
    {
        return begin_getMessageText(null, false, null);
    }

    public Ice.AsyncResult begin_getMessageText(java.util.Map<String, String> __ctx)
    {
        return begin_getMessageText(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getMessageText(Ice.Callback __cb)
    {
        return begin_getMessageText(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessageText(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMessageText(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMessageText(Callback_MessageTyp_getMessageText __cb)
    {
        return begin_getMessageText(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessageText(java.util.Map<String, String> __ctx, Callback_MessageTyp_getMessageText __cb)
    {
        return begin_getMessageText(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMessageText(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMessageText_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMessageText_name, __cb);
        try
        {
            __result.__prepare(__getMessageText_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getMessageText(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getMessageText_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTimeStampInMillis_name = "getTimeStampInMillis";

    public long getTimeStampInMillis()
    {
        return getTimeStampInMillis(null, false);
    }

    public long getTimeStampInMillis(java.util.Map<String, String> __ctx)
    {
        return getTimeStampInMillis(__ctx, true);
    }

    private long getTimeStampInMillis(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTimeStampInMillis", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTimeStampInMillis");
                    __delBase = __getDelegate(false);
                    _MessageTypDel __del = (_MessageTypDel)__delBase;
                    return __del.getTimeStampInMillis(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTimeStampInMillis()
    {
        return begin_getTimeStampInMillis(null, false, null);
    }

    public Ice.AsyncResult begin_getTimeStampInMillis(java.util.Map<String, String> __ctx)
    {
        return begin_getTimeStampInMillis(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTimeStampInMillis(Ice.Callback __cb)
    {
        return begin_getTimeStampInMillis(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTimeStampInMillis(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTimeStampInMillis(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTimeStampInMillis(Callback_MessageTyp_getTimeStampInMillis __cb)
    {
        return begin_getTimeStampInMillis(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTimeStampInMillis(java.util.Map<String, String> __ctx, Callback_MessageTyp_getTimeStampInMillis __cb)
    {
        return begin_getTimeStampInMillis(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTimeStampInMillis(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTimeStampInMillis_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTimeStampInMillis_name, __cb);
        try
        {
            __result.__prepare(__getTimeStampInMillis_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public long end_getTimeStampInMillis(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTimeStampInMillis_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getUser1_name = "getUser1";

    public UserTypPrx getUser1()
    {
        return getUser1(null, false);
    }

    public UserTypPrx getUser1(java.util.Map<String, String> __ctx)
    {
        return getUser1(__ctx, true);
    }

    private UserTypPrx getUser1(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getUser1", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getUser1");
                    __delBase = __getDelegate(false);
                    _MessageTypDel __del = (_MessageTypDel)__delBase;
                    return __del.getUser1(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getUser1()
    {
        return begin_getUser1(null, false, null);
    }

    public Ice.AsyncResult begin_getUser1(java.util.Map<String, String> __ctx)
    {
        return begin_getUser1(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getUser1(Ice.Callback __cb)
    {
        return begin_getUser1(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUser1(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUser1(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUser1(Callback_MessageTyp_getUser1 __cb)
    {
        return begin_getUser1(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUser1(java.util.Map<String, String> __ctx, Callback_MessageTyp_getUser1 __cb)
    {
        return begin_getUser1(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUser1(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUser1_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUser1_name, __cb);
        try
        {
            __result.__prepare(__getUser1_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public UserTypPrx end_getUser1(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUser1_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            UserTypPrx __ret;
            __ret = UserTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getUser2_name = "getUser2";

    public UserTypPrx getUser2()
    {
        return getUser2(null, false);
    }

    public UserTypPrx getUser2(java.util.Map<String, String> __ctx)
    {
        return getUser2(__ctx, true);
    }

    private UserTypPrx getUser2(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getUser2", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getUser2");
                    __delBase = __getDelegate(false);
                    _MessageTypDel __del = (_MessageTypDel)__delBase;
                    return __del.getUser2(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getUser2()
    {
        return begin_getUser2(null, false, null);
    }

    public Ice.AsyncResult begin_getUser2(java.util.Map<String, String> __ctx)
    {
        return begin_getUser2(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getUser2(Ice.Callback __cb)
    {
        return begin_getUser2(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUser2(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUser2(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUser2(Callback_MessageTyp_getUser2 __cb)
    {
        return begin_getUser2(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUser2(java.util.Map<String, String> __ctx, Callback_MessageTyp_getUser2 __cb)
    {
        return begin_getUser2(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUser2(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUser2_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUser2_name, __cb);
        try
        {
            __result.__prepare(__getUser2_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public UserTypPrx end_getUser2(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUser2_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            UserTypPrx __ret;
            __ret = UserTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setMessageText_name = "setMessageText";

    public void setMessageText(String msg)
    {
        setMessageText(msg, null, false);
    }

    public void setMessageText(String msg, java.util.Map<String, String> __ctx)
    {
        setMessageText(msg, __ctx, true);
    }

    private void setMessageText(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setMessageText", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _MessageTypDel __del = (_MessageTypDel)__delBase;
                    __del.setMessageText(msg, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setMessageText(String msg)
    {
        return begin_setMessageText(msg, null, false, null);
    }

    public Ice.AsyncResult begin_setMessageText(String msg, java.util.Map<String, String> __ctx)
    {
        return begin_setMessageText(msg, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setMessageText(String msg, Ice.Callback __cb)
    {
        return begin_setMessageText(msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_setMessageText(String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setMessageText(msg, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setMessageText(String msg, Callback_MessageTyp_setMessageText __cb)
    {
        return begin_setMessageText(msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_setMessageText(String msg, java.util.Map<String, String> __ctx, Callback_MessageTyp_setMessageText __cb)
    {
        return begin_setMessageText(msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setMessageText(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setMessageText_name, __cb);
        try
        {
            __result.__prepare(__setMessageText_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(msg);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setMessageText(Ice.AsyncResult __result)
    {
        __end(__result, __setMessageText_name);
    }

    private static final String __setTimeStampInMillis_name = "setTimeStampInMillis";

    public void setTimeStampInMillis(long timeStampMillis)
    {
        setTimeStampInMillis(timeStampMillis, null, false);
    }

    public void setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx)
    {
        setTimeStampInMillis(timeStampMillis, __ctx, true);
    }

    private void setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTimeStampInMillis", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _MessageTypDel __del = (_MessageTypDel)__delBase;
                    __del.setTimeStampInMillis(timeStampMillis, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis)
    {
        return begin_setTimeStampInMillis(timeStampMillis, null, false, null);
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx)
    {
        return begin_setTimeStampInMillis(timeStampMillis, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, Ice.Callback __cb)
    {
        return begin_setTimeStampInMillis(timeStampMillis, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTimeStampInMillis(timeStampMillis, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, Callback_MessageTyp_setTimeStampInMillis __cb)
    {
        return begin_setTimeStampInMillis(timeStampMillis, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx, Callback_MessageTyp_setTimeStampInMillis __cb)
    {
        return begin_setTimeStampInMillis(timeStampMillis, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTimeStampInMillis(long timeStampMillis, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTimeStampInMillis_name, __cb);
        try
        {
            __result.__prepare(__setTimeStampInMillis_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(timeStampMillis);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTimeStampInMillis(Ice.AsyncResult __result)
    {
        __end(__result, __setTimeStampInMillis_name);
    }

    private static final String __setUser1_name = "setUser1";

    public void setUser1(UserTypPrx user1)
    {
        setUser1(user1, null, false);
    }

    public void setUser1(UserTypPrx user1, java.util.Map<String, String> __ctx)
    {
        setUser1(user1, __ctx, true);
    }

    private void setUser1(UserTypPrx user1, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setUser1", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _MessageTypDel __del = (_MessageTypDel)__delBase;
                    __del.setUser1(user1, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setUser1(UserTypPrx user1)
    {
        return begin_setUser1(user1, null, false, null);
    }

    public Ice.AsyncResult begin_setUser1(UserTypPrx user1, java.util.Map<String, String> __ctx)
    {
        return begin_setUser1(user1, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setUser1(UserTypPrx user1, Ice.Callback __cb)
    {
        return begin_setUser1(user1, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUser1(UserTypPrx user1, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setUser1(user1, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setUser1(UserTypPrx user1, Callback_MessageTyp_setUser1 __cb)
    {
        return begin_setUser1(user1, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUser1(UserTypPrx user1, java.util.Map<String, String> __ctx, Callback_MessageTyp_setUser1 __cb)
    {
        return begin_setUser1(user1, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setUser1(UserTypPrx user1, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setUser1_name, __cb);
        try
        {
            __result.__prepare(__setUser1_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            UserTypPrxHelper.__write(__os, user1);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setUser1(Ice.AsyncResult __result)
    {
        __end(__result, __setUser1_name);
    }

    private static final String __setUser2_name = "setUser2";

    public void setUser2(UserTypPrx user2)
    {
        setUser2(user2, null, false);
    }

    public void setUser2(UserTypPrx user2, java.util.Map<String, String> __ctx)
    {
        setUser2(user2, __ctx, true);
    }

    private void setUser2(UserTypPrx user2, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setUser2", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _MessageTypDel __del = (_MessageTypDel)__delBase;
                    __del.setUser2(user2, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setUser2(UserTypPrx user2)
    {
        return begin_setUser2(user2, null, false, null);
    }

    public Ice.AsyncResult begin_setUser2(UserTypPrx user2, java.util.Map<String, String> __ctx)
    {
        return begin_setUser2(user2, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setUser2(UserTypPrx user2, Ice.Callback __cb)
    {
        return begin_setUser2(user2, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUser2(UserTypPrx user2, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setUser2(user2, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setUser2(UserTypPrx user2, Callback_MessageTyp_setUser2 __cb)
    {
        return begin_setUser2(user2, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUser2(UserTypPrx user2, java.util.Map<String, String> __ctx, Callback_MessageTyp_setUser2 __cb)
    {
        return begin_setUser2(user2, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setUser2(UserTypPrx user2, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setUser2_name, __cb);
        try
        {
            __result.__prepare(__setUser2_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            UserTypPrxHelper.__write(__os, user2);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setUser2(Ice.AsyncResult __result)
    {
        __end(__result, __setUser2_name);
    }

    private static final String __toString_name = "toString";

    public String _toString()
    {
        return _toString(null, false);
    }

    public String _toString(java.util.Map<String, String> __ctx)
    {
        return _toString(__ctx, true);
    }

    private String _toString(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "_toString", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("_toString");
                    __delBase = __getDelegate(false);
                    _MessageTypDel __del = (_MessageTypDel)__delBase;
                    return __del._toString(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_toString()
    {
        return begin_toString(null, false, null);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx)
    {
        return begin_toString(__ctx, true, null);
    }

    public Ice.AsyncResult begin_toString(Ice.Callback __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_toString(Callback_MessageTyp_toString __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Callback_MessageTyp_toString __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__toString_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __toString_name, __cb);
        try
        {
            __result.__prepare(__toString_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_toString(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __toString_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static MessageTypPrx checkedCast(Ice.ObjectPrx __obj)
    {
        MessageTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MessageTypPrx)
            {
                __d = (MessageTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    MessageTypPrxHelper __h = new MessageTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MessageTypPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MessageTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MessageTypPrx)
            {
                __d = (MessageTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    MessageTypPrxHelper __h = new MessageTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MessageTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MessageTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    MessageTypPrxHelper __h = new MessageTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MessageTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MessageTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    MessageTypPrxHelper __h = new MessageTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MessageTypPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        MessageTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MessageTypPrx)
            {
                __d = (MessageTypPrx)__obj;
            }
            else
            {
                MessageTypPrxHelper __h = new MessageTypPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MessageTypPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MessageTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MessageTypPrxHelper __h = new MessageTypPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::MessageTyp"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _MessageTypDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _MessageTypDelD();
    }

    public static void __write(IceInternal.BasicStream __os, MessageTypPrx v)
    {
        __os.writeProxy(v);
    }

    public static MessageTypPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MessageTypPrxHelper result = new MessageTypPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
