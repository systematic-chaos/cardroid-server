// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public abstract class TripTyp extends Ice.ObjectImpl
                              implements _TripTypOperations,
                                         _TripTypOperationsNC
{
    public TripTyp()
    {
    }

    public TripTyp(int tripId, PlaceTyp fromPlace, PlaceTyp toPlace, DateTyp tDate, int nSeats, int tripType)
    {
        this.tripId = tripId;
        this.fromPlace = fromPlace;
        this.toPlace = toPlace;
        this.tDate = tDate;
        this.nSeats = nSeats;
        this.tripType = tripType;
    }

    public TripTyp(int tripId, PlaceTyp fromPlace, PlaceTyp toPlace, DateTyp tDate, int nSeats, DateTyp tReturnDate, String[] tWeekDays, Periodicity tPeriodicity, int tripDistance, String tripCharacteristics, int tripType)
    {
        this.tripId = tripId;
        this.fromPlace = fromPlace;
        this.toPlace = toPlace;
        this.tDate = tDate;
        this.nSeats = nSeats;
        setTReturnDate(tReturnDate);
        setTWeekDays(tWeekDays);
        setTPeriodicity(tPeriodicity);
        setTripDistance(tripDistance);
        setTripCharacteristics(tripCharacteristics);
        this.tripType = tripType;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::TripTyp"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final String getCharacteristics()
    {
        return getCharacteristics(null);
    }

    public final int getDistance()
    {
        return getDistance(null);
    }

    public final int getNSeats()
    {
        return getNSeats(null);
    }

    public final PlaceTyp getPlace1()
    {
        return getPlace1(null);
    }

    public final PlaceTyp getPlace2()
    {
        return getPlace2(null);
    }

    public final DateTyp getTripDate()
    {
        return getTripDate(null);
    }

    public final int getTripId()
    {
        return getTripId(null);
    }

    public final Periodicity getTripPeriodicity()
    {
        return getTripPeriodicity(null);
    }

    public final DateTyp getTripReturnDate()
    {
        return getTripReturnDate(null);
    }

    public final int getTripType()
    {
        return getTripType(null);
    }

    public final String[] getTripWeekDays()
    {
        return getTripWeekDays(null);
    }

    public final boolean hasCharacteristics()
    {
        return hasCharacteristics(null);
    }

    public final boolean hasDistance()
    {
        return hasDistance(null);
    }

    public final boolean hasTripReturnDate()
    {
        return hasTripReturnDate(null);
    }

    public final boolean hasWeekDaysPeriodicity()
    {
        return hasWeekDaysPeriodicity(null);
    }

    public final void setCharacteristics(String characteristics)
    {
        setCharacteristics(characteristics, null);
    }

    public final void setDistance(int distance)
    {
        setDistance(distance, null);
    }

    public final void setNSeats(int nSeats)
    {
        setNSeats(nSeats, null);
    }

    public final void setPlace1(PlaceTyp fromPlace)
    {
        setPlace1(fromPlace, null);
    }

    public final void setPlace2(PlaceTyp toPlace)
    {
        setPlace2(toPlace, null);
    }

    public final void setTripDate(DateTyp tripDate)
    {
        setTripDate(tripDate, null);
    }

    public final void setTripId(int tripId)
    {
        setTripId(tripId, null);
    }

    public final void setTripReturnDate(DateTyp tripReturnDate)
    {
        setTripReturnDate(tripReturnDate, null);
    }

    public final void setTripType(int type)
    {
        setTripType(type, null);
    }

    public final void setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity)
    {
        setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, null);
    }

    public final String _toString()
    {
        return _toString(null);
    }

    public static Ice.DispatchStatus ___getTripId(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        int __ret = __obj.getTripId(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setTripId(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int tripId;
        tripId = __is.readInt();
        __inS.endReadParams();
        __obj.setTripId(tripId, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getPlace1(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        PlaceTyp __ret = __obj.getPlace1(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setPlace1(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        PlaceTypHolder fromPlace = new PlaceTypHolder();
        __is.readObject(fromPlace);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.setPlace1(fromPlace.value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getPlace2(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        PlaceTyp __ret = __obj.getPlace2(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setPlace2(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        PlaceTypHolder toPlace = new PlaceTypHolder();
        __is.readObject(toPlace);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.setPlace2(toPlace.value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getTripDate(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        DateTyp __ret = __obj.getTripDate(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setTripDate(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        DateTypHolder tripDate = new DateTypHolder();
        __is.readObject(tripDate);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.setTripDate(tripDate.value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getNSeats(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        int __ret = __obj.getNSeats(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setNSeats(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int nSeats;
        nSeats = __is.readInt();
        __inS.endReadParams();
        __obj.setNSeats(nSeats, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getTripReturnDate(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        DateTyp __ret = __obj.getTripReturnDate(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setTripReturnDate(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        DateTypHolder tripReturnDate = new DateTypHolder();
        __is.readObject(tripReturnDate);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.setTripReturnDate(tripReturnDate.value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___hasTripReturnDate(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        boolean __ret = __obj.hasTripReturnDate(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getTripWeekDays(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        String[] __ret = __obj.getTripWeekDays(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        WeekdaysVHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getTripPeriodicity(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        Periodicity __ret = __obj.getTripPeriodicity(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __ret.__write(__os);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setTripWeekDaysPeriodicity(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String[] tripWeekDays;
        Periodicity tripPeriodicity;
        tripWeekDays = WeekdaysVHelper.read(__is);
        tripPeriodicity = Periodicity.__read(__is);
        __inS.endReadParams();
        __obj.setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___hasWeekDaysPeriodicity(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        boolean __ret = __obj.hasWeekDaysPeriodicity(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getDistance(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        int __ret = __obj.getDistance(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setDistance(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int distance;
        distance = __is.readInt();
        __inS.endReadParams();
        __obj.setDistance(distance, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___hasDistance(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        boolean __ret = __obj.hasDistance(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getCharacteristics(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.getCharacteristics(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setCharacteristics(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String characteristics;
        characteristics = __is.readString();
        __inS.endReadParams();
        __obj.setCharacteristics(characteristics, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___hasCharacteristics(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        boolean __ret = __obj.hasCharacteristics(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setTripType(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int type;
        type = __is.readInt();
        __inS.endReadParams();
        __obj.setTripType(type, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getTripType(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        int __ret = __obj.getTripType(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___toString(TripTyp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj._toString(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getCharacteristics",
        "getDistance",
        "getNSeats",
        "getPlace1",
        "getPlace2",
        "getTripDate",
        "getTripId",
        "getTripPeriodicity",
        "getTripReturnDate",
        "getTripType",
        "getTripWeekDays",
        "hasCharacteristics",
        "hasDistance",
        "hasTripReturnDate",
        "hasWeekDaysPeriodicity",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setCharacteristics",
        "setDistance",
        "setNSeats",
        "setPlace1",
        "setPlace2",
        "setTripDate",
        "setTripId",
        "setTripReturnDate",
        "setTripType",
        "setTripWeekDaysPeriodicity",
        "toString"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getCharacteristics(this, in, __current);
            }
            case 1:
            {
                return ___getDistance(this, in, __current);
            }
            case 2:
            {
                return ___getNSeats(this, in, __current);
            }
            case 3:
            {
                return ___getPlace1(this, in, __current);
            }
            case 4:
            {
                return ___getPlace2(this, in, __current);
            }
            case 5:
            {
                return ___getTripDate(this, in, __current);
            }
            case 6:
            {
                return ___getTripId(this, in, __current);
            }
            case 7:
            {
                return ___getTripPeriodicity(this, in, __current);
            }
            case 8:
            {
                return ___getTripReturnDate(this, in, __current);
            }
            case 9:
            {
                return ___getTripType(this, in, __current);
            }
            case 10:
            {
                return ___getTripWeekDays(this, in, __current);
            }
            case 11:
            {
                return ___hasCharacteristics(this, in, __current);
            }
            case 12:
            {
                return ___hasDistance(this, in, __current);
            }
            case 13:
            {
                return ___hasTripReturnDate(this, in, __current);
            }
            case 14:
            {
                return ___hasWeekDaysPeriodicity(this, in, __current);
            }
            case 15:
            {
                return ___ice_id(this, in, __current);
            }
            case 16:
            {
                return ___ice_ids(this, in, __current);
            }
            case 17:
            {
                return ___ice_isA(this, in, __current);
            }
            case 18:
            {
                return ___ice_ping(this, in, __current);
            }
            case 19:
            {
                return ___setCharacteristics(this, in, __current);
            }
            case 20:
            {
                return ___setDistance(this, in, __current);
            }
            case 21:
            {
                return ___setNSeats(this, in, __current);
            }
            case 22:
            {
                return ___setPlace1(this, in, __current);
            }
            case 23:
            {
                return ___setPlace2(this, in, __current);
            }
            case 24:
            {
                return ___setTripDate(this, in, __current);
            }
            case 25:
            {
                return ___setTripId(this, in, __current);
            }
            case 26:
            {
                return ___setTripReturnDate(this, in, __current);
            }
            case 27:
            {
                return ___setTripType(this, in, __current);
            }
            case 28:
            {
                return ___setTripWeekDaysPeriodicity(this, in, __current);
            }
            case 29:
            {
                return ___toString(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.writeInt(tripId);
        __os.writeObject(fromPlace);
        __os.writeObject(toPlace);
        __os.writeObject(tDate);
        __os.writeInt(nSeats);
        __os.writeInt(tripType);
        if(__has_tReturnDate && __os.writeOpt(6, Ice.OptionalFormat.Class))
        {
            __os.writeObject(tReturnDate);
        }
        if(__has_tWeekDays && __os.writeOpt(7, Ice.OptionalFormat.FSize))
        {
            __os.startSize();
            WeekdaysVHelper.write(__os, tWeekDays);
            __os.endSize();
        }
        if(__has_tPeriodicity && __os.writeOpt(8, Ice.OptionalFormat.Size))
        {
            tPeriodicity.__write(__os);
        }
        if(__has_tripDistance && __os.writeOpt(9, Ice.OptionalFormat.F4))
        {
            __os.writeInt(tripDistance);
        }
        if(__has_tripCharacteristics && __os.writeOpt(10, Ice.OptionalFormat.VSize))
        {
            __os.writeString(tripCharacteristics);
        }
        __os.endWriteSlice();
    }

    private class Patcher implements IceInternal.Patcher
    {
        Patcher(int member)
        {
            __member = member;
        }

        public void
        patch(Ice.Object v)
        {
            switch(__member)
            {
            case 0:
                __typeId = "::cardroid::data::zerocice::PlaceTyp";
                if(v == null || v instanceof PlaceTyp)
                {
                    fromPlace = (PlaceTyp)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            case 1:
                __typeId = "::cardroid::data::zerocice::PlaceTyp";
                if(v == null || v instanceof PlaceTyp)
                {
                    toPlace = (PlaceTyp)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            case 2:
                __typeId = "::cardroid::data::zerocice::DateTyp";
                if(v == null || v instanceof DateTyp)
                {
                    tDate = (DateTyp)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            case 3:
                __typeId = "::cardroid::data::zerocice::DateTyp";
                if(v == null || v instanceof DateTyp)
                {
                    setTReturnDate((DateTyp)v);
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            }
        }

        public String
        type()
        {
            return __typeId;
        }

        private int __member;
        private String __typeId;
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        tripId = __is.readInt();
        __is.readObject(new Patcher(0));
        __is.readObject(new Patcher(1));
        __is.readObject(new Patcher(2));
        nSeats = __is.readInt();
        tripType = __is.readInt();
        if(__has_tReturnDate = __is.readOpt(6, Ice.OptionalFormat.Class))
        {
            __is.readObject(new Patcher(3));
        }
        if(__has_tWeekDays = __is.readOpt(7, Ice.OptionalFormat.FSize))
        {
            __is.skip(4);
            tWeekDays = WeekdaysVHelper.read(__is);
        }
        if(__has_tPeriodicity = __is.readOpt(8, Ice.OptionalFormat.Size))
        {
            tPeriodicity = Periodicity.__read(__is);
        }
        if(__has_tripDistance = __is.readOpt(9, Ice.OptionalFormat.F4))
        {
            tripDistance = __is.readInt();
        }
        if(__has_tripCharacteristics = __is.readOpt(10, Ice.OptionalFormat.VSize))
        {
            tripCharacteristics = __is.readString();
        }
        __is.endReadSlice();
    }

    public int tripId;

    public PlaceTyp fromPlace;

    public PlaceTyp toPlace;

    public DateTyp tDate;

    public int nSeats;

    private DateTyp tReturnDate;
    private boolean __has_tReturnDate;

    public DateTyp
    getTReturnDate()
    {
        if(!__has_tReturnDate)
        {
            throw new java.lang.IllegalStateException("tReturnDate is not set");
        }
        return tReturnDate;
    }

    public void
    setTReturnDate(DateTyp _tReturnDate)
    {
        __has_tReturnDate = true;
        tReturnDate = _tReturnDate;
    }

    public boolean
    hasTReturnDate()
    {
        return __has_tReturnDate;
    }

    public void
    clearTReturnDate()
    {
        __has_tReturnDate = false;
    }

    public void
    optionalTReturnDate(Ice.Optional<DateTyp> __v)
    {
        if(__v == null || !__v.isSet())
        {
            __has_tReturnDate = false;
        }
        else
        {
            __has_tReturnDate = true;
            tReturnDate = __v.get();
        }
    }

    public Ice.Optional<DateTyp>
    optionalTReturnDate()
    {
        if(__has_tReturnDate)
        {
            return new Ice.Optional<DateTyp>(tReturnDate);
        }
        else
        {
            return new Ice.Optional<DateTyp>();
        }
    }

    private String[] tWeekDays;
    private boolean __has_tWeekDays;

    public String[]
    getTWeekDays()
    {
        if(!__has_tWeekDays)
        {
            throw new java.lang.IllegalStateException("tWeekDays is not set");
        }
        return tWeekDays;
    }

    public void
    setTWeekDays(String[] _tWeekDays)
    {
        __has_tWeekDays = true;
        tWeekDays = _tWeekDays;
    }

    public boolean
    hasTWeekDays()
    {
        return __has_tWeekDays;
    }

    public void
    clearTWeekDays()
    {
        __has_tWeekDays = false;
    }

    public void
    optionalTWeekDays(Ice.Optional<String[]> __v)
    {
        if(__v == null || !__v.isSet())
        {
            __has_tWeekDays = false;
        }
        else
        {
            __has_tWeekDays = true;
            tWeekDays = __v.get();
        }
    }

    public Ice.Optional<String[]>
    optionalTWeekDays()
    {
        if(__has_tWeekDays)
        {
            return new Ice.Optional<String[]>(tWeekDays);
        }
        else
        {
            return new Ice.Optional<String[]>();
        }
    }

    public String
    getTWeekDays(int _index)
    {
        if(!__has_tWeekDays)
        {
            throw new java.lang.IllegalStateException("tWeekDays is not set");
        }
        return tWeekDays[_index];
    }

    public void
    setTWeekDays(int _index, String _val)
    {
        if(!__has_tWeekDays)
        {
            throw new java.lang.IllegalStateException("tWeekDays is not set");
        }
        tWeekDays[_index] = _val;
    }

    private Periodicity tPeriodicity;
    private boolean __has_tPeriodicity;

    public Periodicity
    getTPeriodicity()
    {
        if(!__has_tPeriodicity)
        {
            throw new java.lang.IllegalStateException("tPeriodicity is not set");
        }
        return tPeriodicity;
    }

    public void
    setTPeriodicity(Periodicity _tPeriodicity)
    {
        __has_tPeriodicity = true;
        tPeriodicity = _tPeriodicity;
    }

    public boolean
    hasTPeriodicity()
    {
        return __has_tPeriodicity;
    }

    public void
    clearTPeriodicity()
    {
        __has_tPeriodicity = false;
    }

    public void
    optionalTPeriodicity(Ice.Optional<Periodicity> __v)
    {
        if(__v == null || !__v.isSet())
        {
            __has_tPeriodicity = false;
        }
        else
        {
            __has_tPeriodicity = true;
            tPeriodicity = __v.get();
        }
    }

    public Ice.Optional<Periodicity>
    optionalTPeriodicity()
    {
        if(__has_tPeriodicity)
        {
            return new Ice.Optional<Periodicity>(tPeriodicity);
        }
        else
        {
            return new Ice.Optional<Periodicity>();
        }
    }

    private int tripDistance;
    private boolean __has_tripDistance;

    public int
    getTripDistance()
    {
        if(!__has_tripDistance)
        {
            throw new java.lang.IllegalStateException("tripDistance is not set");
        }
        return tripDistance;
    }

    public void
    setTripDistance(int _tripDistance)
    {
        __has_tripDistance = true;
        tripDistance = _tripDistance;
    }

    public boolean
    hasTripDistance()
    {
        return __has_tripDistance;
    }

    public void
    clearTripDistance()
    {
        __has_tripDistance = false;
    }

    public void
    optionalTripDistance(Ice.IntOptional __v)
    {
        if(__v == null || !__v.isSet())
        {
            __has_tripDistance = false;
        }
        else
        {
            __has_tripDistance = true;
            tripDistance = __v.get();
        }
    }

    public Ice.IntOptional
    optionalTripDistance()
    {
        if(__has_tripDistance)
        {
            return new Ice.IntOptional(tripDistance);
        }
        else
        {
            return new Ice.IntOptional();
        }
    }

    private String tripCharacteristics;
    private boolean __has_tripCharacteristics;

    public String
    getTripCharacteristics()
    {
        if(!__has_tripCharacteristics)
        {
            throw new java.lang.IllegalStateException("tripCharacteristics is not set");
        }
        return tripCharacteristics;
    }

    public void
    setTripCharacteristics(String _tripCharacteristics)
    {
        __has_tripCharacteristics = true;
        tripCharacteristics = _tripCharacteristics;
    }

    public boolean
    hasTripCharacteristics()
    {
        return __has_tripCharacteristics;
    }

    public void
    clearTripCharacteristics()
    {
        __has_tripCharacteristics = false;
    }

    public void
    optionalTripCharacteristics(Ice.Optional<String> __v)
    {
        if(__v == null || !__v.isSet())
        {
            __has_tripCharacteristics = false;
        }
        else
        {
            __has_tripCharacteristics = true;
            tripCharacteristics = __v.get();
        }
    }

    public Ice.Optional<String>
    optionalTripCharacteristics()
    {
        if(__has_tripCharacteristics)
        {
            return new Ice.Optional<String>(tripCharacteristics);
        }
        else
        {
            return new Ice.Optional<String>();
        }
    }

    public int tripType;

    public static final long serialVersionUID = 425822967L;
}
