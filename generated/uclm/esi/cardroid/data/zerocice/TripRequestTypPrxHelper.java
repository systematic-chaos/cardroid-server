// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public final class TripRequestTypPrxHelper extends Ice.ObjectPrxHelperBase implements TripRequestTypPrx
{
    private static final String __getTripDateTimePrefs_name = "getTripDateTimePrefs";

    public DateTimePrefsTyp getTripDateTimePrefs()
    {
        return getTripDateTimePrefs(null, false);
    }

    public DateTimePrefsTyp getTripDateTimePrefs(java.util.Map<String, String> __ctx)
    {
        return getTripDateTimePrefs(__ctx, true);
    }

    private DateTimePrefsTyp getTripDateTimePrefs(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripDateTimePrefs", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripDateTimePrefs");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getTripDateTimePrefs(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripDateTimePrefs()
    {
        return begin_getTripDateTimePrefs(null, false, null);
    }

    public Ice.AsyncResult begin_getTripDateTimePrefs(java.util.Map<String, String> __ctx)
    {
        return begin_getTripDateTimePrefs(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripDateTimePrefs(Ice.Callback __cb)
    {
        return begin_getTripDateTimePrefs(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripDateTimePrefs(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripDateTimePrefs(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripDateTimePrefs(Callback_TripRequestTyp_getTripDateTimePrefs __cb)
    {
        return begin_getTripDateTimePrefs(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripDateTimePrefs(java.util.Map<String, String> __ctx, Callback_TripRequestTyp_getTripDateTimePrefs __cb)
    {
        return begin_getTripDateTimePrefs(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripDateTimePrefs(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripDateTimePrefs_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripDateTimePrefs_name, __cb);
        try
        {
            __result.__prepare(__getTripDateTimePrefs_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DateTimePrefsTyp end_getTripDateTimePrefs(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripDateTimePrefs_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            DateTimePrefsTypHolder __ret = new DateTimePrefsTypHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripRequester_name = "getTripRequester";

    public UserTypPrx getTripRequester()
    {
        return getTripRequester(null, false);
    }

    public UserTypPrx getTripRequester(java.util.Map<String, String> __ctx)
    {
        return getTripRequester(__ctx, true);
    }

    private UserTypPrx getTripRequester(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripRequester", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripRequester");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getTripRequester(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripRequester()
    {
        return begin_getTripRequester(null, false, null);
    }

    public Ice.AsyncResult begin_getTripRequester(java.util.Map<String, String> __ctx)
    {
        return begin_getTripRequester(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripRequester(Ice.Callback __cb)
    {
        return begin_getTripRequester(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripRequester(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripRequester(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripRequester(Callback_TripRequestTyp_getTripRequester __cb)
    {
        return begin_getTripRequester(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripRequester(java.util.Map<String, String> __ctx, Callback_TripRequestTyp_getTripRequester __cb)
    {
        return begin_getTripRequester(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripRequester(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripRequester_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripRequester_name, __cb);
        try
        {
            __result.__prepare(__getTripRequester_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public UserTypPrx end_getTripRequester(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripRequester_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            UserTypPrx __ret;
            __ret = UserTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripReturnDateTimePrefs_name = "getTripReturnDateTimePrefs";

    public DateTimePrefsTyp getTripReturnDateTimePrefs()
    {
        return getTripReturnDateTimePrefs(null, false);
    }

    public DateTimePrefsTyp getTripReturnDateTimePrefs(java.util.Map<String, String> __ctx)
    {
        return getTripReturnDateTimePrefs(__ctx, true);
    }

    private DateTimePrefsTyp getTripReturnDateTimePrefs(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripReturnDateTimePrefs", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripReturnDateTimePrefs");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getTripReturnDateTimePrefs(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripReturnDateTimePrefs()
    {
        return begin_getTripReturnDateTimePrefs(null, false, null);
    }

    public Ice.AsyncResult begin_getTripReturnDateTimePrefs(java.util.Map<String, String> __ctx)
    {
        return begin_getTripReturnDateTimePrefs(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripReturnDateTimePrefs(Ice.Callback __cb)
    {
        return begin_getTripReturnDateTimePrefs(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripReturnDateTimePrefs(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripReturnDateTimePrefs(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripReturnDateTimePrefs(Callback_TripRequestTyp_getTripReturnDateTimePrefs __cb)
    {
        return begin_getTripReturnDateTimePrefs(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripReturnDateTimePrefs(java.util.Map<String, String> __ctx, Callback_TripRequestTyp_getTripReturnDateTimePrefs __cb)
    {
        return begin_getTripReturnDateTimePrefs(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripReturnDateTimePrefs(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripReturnDateTimePrefs_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripReturnDateTimePrefs_name, __cb);
        try
        {
            __result.__prepare(__getTripReturnDateTimePrefs_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DateTimePrefsTyp end_getTripReturnDateTimePrefs(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripReturnDateTimePrefs_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            DateTimePrefsTypHolder __ret = new DateTimePrefsTypHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setTripDateTimePrefs_name = "setTripDateTimePrefs";

    public void setTripDateTimePrefs(DateTimePrefsTyp dtp)
    {
        setTripDateTimePrefs(dtp, null, false);
    }

    public void setTripDateTimePrefs(DateTimePrefsTyp dtp, java.util.Map<String, String> __ctx)
    {
        setTripDateTimePrefs(dtp, __ctx, true);
    }

    private void setTripDateTimePrefs(DateTimePrefsTyp dtp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTripDateTimePrefs", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setTripDateTimePrefs(dtp, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTripDateTimePrefs(DateTimePrefsTyp dtp)
    {
        return begin_setTripDateTimePrefs(dtp, null, false, null);
    }

    public Ice.AsyncResult begin_setTripDateTimePrefs(DateTimePrefsTyp dtp, java.util.Map<String, String> __ctx)
    {
        return begin_setTripDateTimePrefs(dtp, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTripDateTimePrefs(DateTimePrefsTyp dtp, Ice.Callback __cb)
    {
        return begin_setTripDateTimePrefs(dtp, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripDateTimePrefs(DateTimePrefsTyp dtp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTripDateTimePrefs(dtp, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTripDateTimePrefs(DateTimePrefsTyp dtp, Callback_TripRequestTyp_setTripDateTimePrefs __cb)
    {
        return begin_setTripDateTimePrefs(dtp, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripDateTimePrefs(DateTimePrefsTyp dtp, java.util.Map<String, String> __ctx, Callback_TripRequestTyp_setTripDateTimePrefs __cb)
    {
        return begin_setTripDateTimePrefs(dtp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTripDateTimePrefs(DateTimePrefsTyp dtp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTripDateTimePrefs_name, __cb);
        try
        {
            __result.__prepare(__setTripDateTimePrefs_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(dtp);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTripDateTimePrefs(Ice.AsyncResult __result)
    {
        __end(__result, __setTripDateTimePrefs_name);
    }

    private static final String __setTripRequester_name = "setTripRequester";

    public void setTripRequester(UserTypPrx requester)
    {
        setTripRequester(requester, null, false);
    }

    public void setTripRequester(UserTypPrx requester, java.util.Map<String, String> __ctx)
    {
        setTripRequester(requester, __ctx, true);
    }

    private void setTripRequester(UserTypPrx requester, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTripRequester", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setTripRequester(requester, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTripRequester(UserTypPrx requester)
    {
        return begin_setTripRequester(requester, null, false, null);
    }

    public Ice.AsyncResult begin_setTripRequester(UserTypPrx requester, java.util.Map<String, String> __ctx)
    {
        return begin_setTripRequester(requester, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTripRequester(UserTypPrx requester, Ice.Callback __cb)
    {
        return begin_setTripRequester(requester, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripRequester(UserTypPrx requester, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTripRequester(requester, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTripRequester(UserTypPrx requester, Callback_TripRequestTyp_setTripRequester __cb)
    {
        return begin_setTripRequester(requester, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripRequester(UserTypPrx requester, java.util.Map<String, String> __ctx, Callback_TripRequestTyp_setTripRequester __cb)
    {
        return begin_setTripRequester(requester, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTripRequester(UserTypPrx requester, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTripRequester_name, __cb);
        try
        {
            __result.__prepare(__setTripRequester_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            UserTypPrxHelper.__write(__os, requester);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTripRequester(Ice.AsyncResult __result)
    {
        __end(__result, __setTripRequester_name);
    }

    private static final String __setTripReturnDateTimePrefs_name = "setTripReturnDateTimePrefs";

    public void setTripReturnDateTimePrefs(DateTimePrefsTyp rdtp)
    {
        setTripReturnDateTimePrefs(rdtp, null, false);
    }

    public void setTripReturnDateTimePrefs(DateTimePrefsTyp rdtp, java.util.Map<String, String> __ctx)
    {
        setTripReturnDateTimePrefs(rdtp, __ctx, true);
    }

    private void setTripReturnDateTimePrefs(DateTimePrefsTyp rdtp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTripReturnDateTimePrefs", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setTripReturnDateTimePrefs(rdtp, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTripReturnDateTimePrefs(DateTimePrefsTyp rdtp)
    {
        return begin_setTripReturnDateTimePrefs(rdtp, null, false, null);
    }

    public Ice.AsyncResult begin_setTripReturnDateTimePrefs(DateTimePrefsTyp rdtp, java.util.Map<String, String> __ctx)
    {
        return begin_setTripReturnDateTimePrefs(rdtp, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTripReturnDateTimePrefs(DateTimePrefsTyp rdtp, Ice.Callback __cb)
    {
        return begin_setTripReturnDateTimePrefs(rdtp, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripReturnDateTimePrefs(DateTimePrefsTyp rdtp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTripReturnDateTimePrefs(rdtp, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTripReturnDateTimePrefs(DateTimePrefsTyp rdtp, Callback_TripRequestTyp_setTripReturnDateTimePrefs __cb)
    {
        return begin_setTripReturnDateTimePrefs(rdtp, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripReturnDateTimePrefs(DateTimePrefsTyp rdtp, java.util.Map<String, String> __ctx, Callback_TripRequestTyp_setTripReturnDateTimePrefs __cb)
    {
        return begin_setTripReturnDateTimePrefs(rdtp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTripReturnDateTimePrefs(DateTimePrefsTyp rdtp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTripReturnDateTimePrefs_name, __cb);
        try
        {
            __result.__prepare(__setTripReturnDateTimePrefs_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(rdtp);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTripReturnDateTimePrefs(Ice.AsyncResult __result)
    {
        __end(__result, __setTripReturnDateTimePrefs_name);
    }

    private static final String __getCharacteristics_name = "getCharacteristics";

    public String getCharacteristics()
    {
        return getCharacteristics(null, false);
    }

    public String getCharacteristics(java.util.Map<String, String> __ctx)
    {
        return getCharacteristics(__ctx, true);
    }

    private String getCharacteristics(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCharacteristics", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCharacteristics");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getCharacteristics(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCharacteristics()
    {
        return begin_getCharacteristics(null, false, null);
    }

    public Ice.AsyncResult begin_getCharacteristics(java.util.Map<String, String> __ctx)
    {
        return begin_getCharacteristics(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCharacteristics(Ice.Callback __cb)
    {
        return begin_getCharacteristics(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCharacteristics(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCharacteristics(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCharacteristics(Callback_TripTyp_getCharacteristics __cb)
    {
        return begin_getCharacteristics(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCharacteristics(java.util.Map<String, String> __ctx, Callback_TripTyp_getCharacteristics __cb)
    {
        return begin_getCharacteristics(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCharacteristics(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCharacteristics_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCharacteristics_name, __cb);
        try
        {
            __result.__prepare(__getCharacteristics_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getCharacteristics(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCharacteristics_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getDistance_name = "getDistance";

    public int getDistance()
    {
        return getDistance(null, false);
    }

    public int getDistance(java.util.Map<String, String> __ctx)
    {
        return getDistance(__ctx, true);
    }

    private int getDistance(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDistance", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDistance");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getDistance(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getDistance()
    {
        return begin_getDistance(null, false, null);
    }

    public Ice.AsyncResult begin_getDistance(java.util.Map<String, String> __ctx)
    {
        return begin_getDistance(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getDistance(Ice.Callback __cb)
    {
        return begin_getDistance(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDistance(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDistance(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDistance(Callback_TripTyp_getDistance __cb)
    {
        return begin_getDistance(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDistance(java.util.Map<String, String> __ctx, Callback_TripTyp_getDistance __cb)
    {
        return begin_getDistance(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDistance(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDistance_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDistance_name, __cb);
        try
        {
            __result.__prepare(__getDistance_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getDistance(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getDistance_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getNSeats_name = "getNSeats";

    public int getNSeats()
    {
        return getNSeats(null, false);
    }

    public int getNSeats(java.util.Map<String, String> __ctx)
    {
        return getNSeats(__ctx, true);
    }

    private int getNSeats(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getNSeats", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getNSeats");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getNSeats(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getNSeats()
    {
        return begin_getNSeats(null, false, null);
    }

    public Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx)
    {
        return begin_getNSeats(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getNSeats(Ice.Callback __cb)
    {
        return begin_getNSeats(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getNSeats(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getNSeats(Callback_TripTyp_getNSeats __cb)
    {
        return begin_getNSeats(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx, Callback_TripTyp_getNSeats __cb)
    {
        return begin_getNSeats(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getNSeats_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getNSeats_name, __cb);
        try
        {
            __result.__prepare(__getNSeats_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getNSeats(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getNSeats_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPlace1_name = "getPlace1";

    public PlaceTyp getPlace1()
    {
        return getPlace1(null, false);
    }

    public PlaceTyp getPlace1(java.util.Map<String, String> __ctx)
    {
        return getPlace1(__ctx, true);
    }

    private PlaceTyp getPlace1(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPlace1", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPlace1");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getPlace1(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPlace1()
    {
        return begin_getPlace1(null, false, null);
    }

    public Ice.AsyncResult begin_getPlace1(java.util.Map<String, String> __ctx)
    {
        return begin_getPlace1(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPlace1(Ice.Callback __cb)
    {
        return begin_getPlace1(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPlace1(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPlace1(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPlace1(Callback_TripTyp_getPlace1 __cb)
    {
        return begin_getPlace1(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPlace1(java.util.Map<String, String> __ctx, Callback_TripTyp_getPlace1 __cb)
    {
        return begin_getPlace1(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPlace1(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPlace1_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPlace1_name, __cb);
        try
        {
            __result.__prepare(__getPlace1_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PlaceTyp end_getPlace1(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPlace1_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PlaceTypHolder __ret = new PlaceTypHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPlace2_name = "getPlace2";

    public PlaceTyp getPlace2()
    {
        return getPlace2(null, false);
    }

    public PlaceTyp getPlace2(java.util.Map<String, String> __ctx)
    {
        return getPlace2(__ctx, true);
    }

    private PlaceTyp getPlace2(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPlace2", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPlace2");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getPlace2(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPlace2()
    {
        return begin_getPlace2(null, false, null);
    }

    public Ice.AsyncResult begin_getPlace2(java.util.Map<String, String> __ctx)
    {
        return begin_getPlace2(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPlace2(Ice.Callback __cb)
    {
        return begin_getPlace2(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPlace2(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPlace2(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPlace2(Callback_TripTyp_getPlace2 __cb)
    {
        return begin_getPlace2(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPlace2(java.util.Map<String, String> __ctx, Callback_TripTyp_getPlace2 __cb)
    {
        return begin_getPlace2(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPlace2(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPlace2_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPlace2_name, __cb);
        try
        {
            __result.__prepare(__getPlace2_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PlaceTyp end_getPlace2(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPlace2_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PlaceTypHolder __ret = new PlaceTypHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripDate_name = "getTripDate";

    public DateTyp getTripDate()
    {
        return getTripDate(null, false);
    }

    public DateTyp getTripDate(java.util.Map<String, String> __ctx)
    {
        return getTripDate(__ctx, true);
    }

    private DateTyp getTripDate(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripDate", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripDate");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getTripDate(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripDate()
    {
        return begin_getTripDate(null, false, null);
    }

    public Ice.AsyncResult begin_getTripDate(java.util.Map<String, String> __ctx)
    {
        return begin_getTripDate(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripDate(Ice.Callback __cb)
    {
        return begin_getTripDate(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripDate(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripDate(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripDate(Callback_TripTyp_getTripDate __cb)
    {
        return begin_getTripDate(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripDate(java.util.Map<String, String> __ctx, Callback_TripTyp_getTripDate __cb)
    {
        return begin_getTripDate(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripDate(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripDate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripDate_name, __cb);
        try
        {
            __result.__prepare(__getTripDate_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DateTyp end_getTripDate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripDate_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            DateTypHolder __ret = new DateTypHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripId_name = "getTripId";

    public int getTripId()
    {
        return getTripId(null, false);
    }

    public int getTripId(java.util.Map<String, String> __ctx)
    {
        return getTripId(__ctx, true);
    }

    private int getTripId(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripId");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getTripId(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripId()
    {
        return begin_getTripId(null, false, null);
    }

    public Ice.AsyncResult begin_getTripId(java.util.Map<String, String> __ctx)
    {
        return begin_getTripId(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripId(Ice.Callback __cb)
    {
        return begin_getTripId(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripId(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripId(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripId(Callback_TripTyp_getTripId __cb)
    {
        return begin_getTripId(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripId(java.util.Map<String, String> __ctx, Callback_TripTyp_getTripId __cb)
    {
        return begin_getTripId(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripId(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripId_name, __cb);
        try
        {
            __result.__prepare(__getTripId_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getTripId(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripPeriodicity_name = "getTripPeriodicity";

    public Periodicity getTripPeriodicity()
    {
        return getTripPeriodicity(null, false);
    }

    public Periodicity getTripPeriodicity(java.util.Map<String, String> __ctx)
    {
        return getTripPeriodicity(__ctx, true);
    }

    private Periodicity getTripPeriodicity(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripPeriodicity", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripPeriodicity");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getTripPeriodicity(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripPeriodicity()
    {
        return begin_getTripPeriodicity(null, false, null);
    }

    public Ice.AsyncResult begin_getTripPeriodicity(java.util.Map<String, String> __ctx)
    {
        return begin_getTripPeriodicity(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripPeriodicity(Ice.Callback __cb)
    {
        return begin_getTripPeriodicity(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripPeriodicity(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripPeriodicity(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripPeriodicity(Callback_TripTyp_getTripPeriodicity __cb)
    {
        return begin_getTripPeriodicity(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripPeriodicity(java.util.Map<String, String> __ctx, Callback_TripTyp_getTripPeriodicity __cb)
    {
        return begin_getTripPeriodicity(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripPeriodicity(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripPeriodicity_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripPeriodicity_name, __cb);
        try
        {
            __result.__prepare(__getTripPeriodicity_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Periodicity end_getTripPeriodicity(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripPeriodicity_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Periodicity __ret;
            __ret = Periodicity.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripReturnDate_name = "getTripReturnDate";

    public DateTyp getTripReturnDate()
    {
        return getTripReturnDate(null, false);
    }

    public DateTyp getTripReturnDate(java.util.Map<String, String> __ctx)
    {
        return getTripReturnDate(__ctx, true);
    }

    private DateTyp getTripReturnDate(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripReturnDate", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripReturnDate");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getTripReturnDate(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripReturnDate()
    {
        return begin_getTripReturnDate(null, false, null);
    }

    public Ice.AsyncResult begin_getTripReturnDate(java.util.Map<String, String> __ctx)
    {
        return begin_getTripReturnDate(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripReturnDate(Ice.Callback __cb)
    {
        return begin_getTripReturnDate(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripReturnDate(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripReturnDate(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripReturnDate(Callback_TripTyp_getTripReturnDate __cb)
    {
        return begin_getTripReturnDate(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripReturnDate(java.util.Map<String, String> __ctx, Callback_TripTyp_getTripReturnDate __cb)
    {
        return begin_getTripReturnDate(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripReturnDate(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripReturnDate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripReturnDate_name, __cb);
        try
        {
            __result.__prepare(__getTripReturnDate_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DateTyp end_getTripReturnDate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripReturnDate_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            DateTypHolder __ret = new DateTypHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripType_name = "getTripType";

    public int getTripType()
    {
        return getTripType(null, false);
    }

    public int getTripType(java.util.Map<String, String> __ctx)
    {
        return getTripType(__ctx, true);
    }

    private int getTripType(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripType", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripType");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getTripType(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripType()
    {
        return begin_getTripType(null, false, null);
    }

    public Ice.AsyncResult begin_getTripType(java.util.Map<String, String> __ctx)
    {
        return begin_getTripType(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripType(Ice.Callback __cb)
    {
        return begin_getTripType(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripType(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripType(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripType(Callback_TripTyp_getTripType __cb)
    {
        return begin_getTripType(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripType(java.util.Map<String, String> __ctx, Callback_TripTyp_getTripType __cb)
    {
        return begin_getTripType(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripType(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripType_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripType_name, __cb);
        try
        {
            __result.__prepare(__getTripType_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getTripType(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripType_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripWeekDays_name = "getTripWeekDays";

    public String[] getTripWeekDays()
    {
        return getTripWeekDays(null, false);
    }

    public String[] getTripWeekDays(java.util.Map<String, String> __ctx)
    {
        return getTripWeekDays(__ctx, true);
    }

    private String[] getTripWeekDays(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripWeekDays", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripWeekDays");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.getTripWeekDays(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripWeekDays()
    {
        return begin_getTripWeekDays(null, false, null);
    }

    public Ice.AsyncResult begin_getTripWeekDays(java.util.Map<String, String> __ctx)
    {
        return begin_getTripWeekDays(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripWeekDays(Ice.Callback __cb)
    {
        return begin_getTripWeekDays(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripWeekDays(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripWeekDays(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripWeekDays(Callback_TripTyp_getTripWeekDays __cb)
    {
        return begin_getTripWeekDays(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripWeekDays(java.util.Map<String, String> __ctx, Callback_TripTyp_getTripWeekDays __cb)
    {
        return begin_getTripWeekDays(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripWeekDays(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripWeekDays_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripWeekDays_name, __cb);
        try
        {
            __result.__prepare(__getTripWeekDays_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getTripWeekDays(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripWeekDays_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = WeekdaysVHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __hasCharacteristics_name = "hasCharacteristics";

    public boolean hasCharacteristics()
    {
        return hasCharacteristics(null, false);
    }

    public boolean hasCharacteristics(java.util.Map<String, String> __ctx)
    {
        return hasCharacteristics(__ctx, true);
    }

    private boolean hasCharacteristics(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "hasCharacteristics", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("hasCharacteristics");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.hasCharacteristics(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_hasCharacteristics()
    {
        return begin_hasCharacteristics(null, false, null);
    }

    public Ice.AsyncResult begin_hasCharacteristics(java.util.Map<String, String> __ctx)
    {
        return begin_hasCharacteristics(__ctx, true, null);
    }

    public Ice.AsyncResult begin_hasCharacteristics(Ice.Callback __cb)
    {
        return begin_hasCharacteristics(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasCharacteristics(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hasCharacteristics(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_hasCharacteristics(Callback_TripTyp_hasCharacteristics __cb)
    {
        return begin_hasCharacteristics(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasCharacteristics(java.util.Map<String, String> __ctx, Callback_TripTyp_hasCharacteristics __cb)
    {
        return begin_hasCharacteristics(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_hasCharacteristics(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hasCharacteristics_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __hasCharacteristics_name, __cb);
        try
        {
            __result.__prepare(__hasCharacteristics_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_hasCharacteristics(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __hasCharacteristics_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __hasDistance_name = "hasDistance";

    public boolean hasDistance()
    {
        return hasDistance(null, false);
    }

    public boolean hasDistance(java.util.Map<String, String> __ctx)
    {
        return hasDistance(__ctx, true);
    }

    private boolean hasDistance(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "hasDistance", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("hasDistance");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.hasDistance(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_hasDistance()
    {
        return begin_hasDistance(null, false, null);
    }

    public Ice.AsyncResult begin_hasDistance(java.util.Map<String, String> __ctx)
    {
        return begin_hasDistance(__ctx, true, null);
    }

    public Ice.AsyncResult begin_hasDistance(Ice.Callback __cb)
    {
        return begin_hasDistance(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasDistance(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hasDistance(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_hasDistance(Callback_TripTyp_hasDistance __cb)
    {
        return begin_hasDistance(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasDistance(java.util.Map<String, String> __ctx, Callback_TripTyp_hasDistance __cb)
    {
        return begin_hasDistance(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_hasDistance(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hasDistance_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __hasDistance_name, __cb);
        try
        {
            __result.__prepare(__hasDistance_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_hasDistance(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __hasDistance_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __hasTripReturnDate_name = "hasTripReturnDate";

    public boolean hasTripReturnDate()
    {
        return hasTripReturnDate(null, false);
    }

    public boolean hasTripReturnDate(java.util.Map<String, String> __ctx)
    {
        return hasTripReturnDate(__ctx, true);
    }

    private boolean hasTripReturnDate(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "hasTripReturnDate", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("hasTripReturnDate");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.hasTripReturnDate(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_hasTripReturnDate()
    {
        return begin_hasTripReturnDate(null, false, null);
    }

    public Ice.AsyncResult begin_hasTripReturnDate(java.util.Map<String, String> __ctx)
    {
        return begin_hasTripReturnDate(__ctx, true, null);
    }

    public Ice.AsyncResult begin_hasTripReturnDate(Ice.Callback __cb)
    {
        return begin_hasTripReturnDate(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasTripReturnDate(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hasTripReturnDate(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_hasTripReturnDate(Callback_TripTyp_hasTripReturnDate __cb)
    {
        return begin_hasTripReturnDate(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasTripReturnDate(java.util.Map<String, String> __ctx, Callback_TripTyp_hasTripReturnDate __cb)
    {
        return begin_hasTripReturnDate(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_hasTripReturnDate(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hasTripReturnDate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __hasTripReturnDate_name, __cb);
        try
        {
            __result.__prepare(__hasTripReturnDate_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_hasTripReturnDate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __hasTripReturnDate_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __hasWeekDaysPeriodicity_name = "hasWeekDaysPeriodicity";

    public boolean hasWeekDaysPeriodicity()
    {
        return hasWeekDaysPeriodicity(null, false);
    }

    public boolean hasWeekDaysPeriodicity(java.util.Map<String, String> __ctx)
    {
        return hasWeekDaysPeriodicity(__ctx, true);
    }

    private boolean hasWeekDaysPeriodicity(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "hasWeekDaysPeriodicity", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("hasWeekDaysPeriodicity");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del.hasWeekDaysPeriodicity(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_hasWeekDaysPeriodicity()
    {
        return begin_hasWeekDaysPeriodicity(null, false, null);
    }

    public Ice.AsyncResult begin_hasWeekDaysPeriodicity(java.util.Map<String, String> __ctx)
    {
        return begin_hasWeekDaysPeriodicity(__ctx, true, null);
    }

    public Ice.AsyncResult begin_hasWeekDaysPeriodicity(Ice.Callback __cb)
    {
        return begin_hasWeekDaysPeriodicity(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasWeekDaysPeriodicity(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hasWeekDaysPeriodicity(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_hasWeekDaysPeriodicity(Callback_TripTyp_hasWeekDaysPeriodicity __cb)
    {
        return begin_hasWeekDaysPeriodicity(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasWeekDaysPeriodicity(java.util.Map<String, String> __ctx, Callback_TripTyp_hasWeekDaysPeriodicity __cb)
    {
        return begin_hasWeekDaysPeriodicity(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_hasWeekDaysPeriodicity(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hasWeekDaysPeriodicity_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __hasWeekDaysPeriodicity_name, __cb);
        try
        {
            __result.__prepare(__hasWeekDaysPeriodicity_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_hasWeekDaysPeriodicity(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __hasWeekDaysPeriodicity_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setCharacteristics_name = "setCharacteristics";

    public void setCharacteristics(String characteristics)
    {
        setCharacteristics(characteristics, null, false);
    }

    public void setCharacteristics(String characteristics, java.util.Map<String, String> __ctx)
    {
        setCharacteristics(characteristics, __ctx, true);
    }

    private void setCharacteristics(String characteristics, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCharacteristics", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setCharacteristics(characteristics, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCharacteristics(String characteristics)
    {
        return begin_setCharacteristics(characteristics, null, false, null);
    }

    public Ice.AsyncResult begin_setCharacteristics(String characteristics, java.util.Map<String, String> __ctx)
    {
        return begin_setCharacteristics(characteristics, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCharacteristics(String characteristics, Ice.Callback __cb)
    {
        return begin_setCharacteristics(characteristics, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCharacteristics(String characteristics, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCharacteristics(characteristics, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCharacteristics(String characteristics, Callback_TripTyp_setCharacteristics __cb)
    {
        return begin_setCharacteristics(characteristics, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCharacteristics(String characteristics, java.util.Map<String, String> __ctx, Callback_TripTyp_setCharacteristics __cb)
    {
        return begin_setCharacteristics(characteristics, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCharacteristics(String characteristics, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCharacteristics_name, __cb);
        try
        {
            __result.__prepare(__setCharacteristics_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(characteristics);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCharacteristics(Ice.AsyncResult __result)
    {
        __end(__result, __setCharacteristics_name);
    }

    private static final String __setDistance_name = "setDistance";

    public void setDistance(int distance)
    {
        setDistance(distance, null, false);
    }

    public void setDistance(int distance, java.util.Map<String, String> __ctx)
    {
        setDistance(distance, __ctx, true);
    }

    private void setDistance(int distance, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setDistance", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setDistance(distance, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setDistance(int distance)
    {
        return begin_setDistance(distance, null, false, null);
    }

    public Ice.AsyncResult begin_setDistance(int distance, java.util.Map<String, String> __ctx)
    {
        return begin_setDistance(distance, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setDistance(int distance, Ice.Callback __cb)
    {
        return begin_setDistance(distance, null, false, __cb);
    }

    public Ice.AsyncResult begin_setDistance(int distance, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setDistance(distance, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setDistance(int distance, Callback_TripTyp_setDistance __cb)
    {
        return begin_setDistance(distance, null, false, __cb);
    }

    public Ice.AsyncResult begin_setDistance(int distance, java.util.Map<String, String> __ctx, Callback_TripTyp_setDistance __cb)
    {
        return begin_setDistance(distance, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setDistance(int distance, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setDistance_name, __cb);
        try
        {
            __result.__prepare(__setDistance_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(distance);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setDistance(Ice.AsyncResult __result)
    {
        __end(__result, __setDistance_name);
    }

    private static final String __setNSeats_name = "setNSeats";

    public void setNSeats(int nSeats)
    {
        setNSeats(nSeats, null, false);
    }

    public void setNSeats(int nSeats, java.util.Map<String, String> __ctx)
    {
        setNSeats(nSeats, __ctx, true);
    }

    private void setNSeats(int nSeats, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setNSeats", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setNSeats(nSeats, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats)
    {
        return begin_setNSeats(nSeats, null, false, null);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx)
    {
        return begin_setNSeats(nSeats, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, Ice.Callback __cb)
    {
        return begin_setNSeats(nSeats, null, false, __cb);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setNSeats(nSeats, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, Callback_TripTyp_setNSeats __cb)
    {
        return begin_setNSeats(nSeats, null, false, __cb);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx, Callback_TripTyp_setNSeats __cb)
    {
        return begin_setNSeats(nSeats, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setNSeats_name, __cb);
        try
        {
            __result.__prepare(__setNSeats_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(nSeats);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setNSeats(Ice.AsyncResult __result)
    {
        __end(__result, __setNSeats_name);
    }

    private static final String __setPlace1_name = "setPlace1";

    public void setPlace1(PlaceTyp fromPlace)
    {
        setPlace1(fromPlace, null, false);
    }

    public void setPlace1(PlaceTyp fromPlace, java.util.Map<String, String> __ctx)
    {
        setPlace1(fromPlace, __ctx, true);
    }

    private void setPlace1(PlaceTyp fromPlace, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setPlace1", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setPlace1(fromPlace, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setPlace1(PlaceTyp fromPlace)
    {
        return begin_setPlace1(fromPlace, null, false, null);
    }

    public Ice.AsyncResult begin_setPlace1(PlaceTyp fromPlace, java.util.Map<String, String> __ctx)
    {
        return begin_setPlace1(fromPlace, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setPlace1(PlaceTyp fromPlace, Ice.Callback __cb)
    {
        return begin_setPlace1(fromPlace, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPlace1(PlaceTyp fromPlace, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPlace1(fromPlace, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setPlace1(PlaceTyp fromPlace, Callback_TripTyp_setPlace1 __cb)
    {
        return begin_setPlace1(fromPlace, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPlace1(PlaceTyp fromPlace, java.util.Map<String, String> __ctx, Callback_TripTyp_setPlace1 __cb)
    {
        return begin_setPlace1(fromPlace, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPlace1(PlaceTyp fromPlace, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPlace1_name, __cb);
        try
        {
            __result.__prepare(__setPlace1_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(fromPlace);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setPlace1(Ice.AsyncResult __result)
    {
        __end(__result, __setPlace1_name);
    }

    private static final String __setPlace2_name = "setPlace2";

    public void setPlace2(PlaceTyp toPlace)
    {
        setPlace2(toPlace, null, false);
    }

    public void setPlace2(PlaceTyp toPlace, java.util.Map<String, String> __ctx)
    {
        setPlace2(toPlace, __ctx, true);
    }

    private void setPlace2(PlaceTyp toPlace, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setPlace2", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setPlace2(toPlace, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setPlace2(PlaceTyp toPlace)
    {
        return begin_setPlace2(toPlace, null, false, null);
    }

    public Ice.AsyncResult begin_setPlace2(PlaceTyp toPlace, java.util.Map<String, String> __ctx)
    {
        return begin_setPlace2(toPlace, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setPlace2(PlaceTyp toPlace, Ice.Callback __cb)
    {
        return begin_setPlace2(toPlace, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPlace2(PlaceTyp toPlace, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPlace2(toPlace, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setPlace2(PlaceTyp toPlace, Callback_TripTyp_setPlace2 __cb)
    {
        return begin_setPlace2(toPlace, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPlace2(PlaceTyp toPlace, java.util.Map<String, String> __ctx, Callback_TripTyp_setPlace2 __cb)
    {
        return begin_setPlace2(toPlace, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPlace2(PlaceTyp toPlace, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPlace2_name, __cb);
        try
        {
            __result.__prepare(__setPlace2_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(toPlace);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setPlace2(Ice.AsyncResult __result)
    {
        __end(__result, __setPlace2_name);
    }

    private static final String __setTripDate_name = "setTripDate";

    public void setTripDate(DateTyp tripDate)
    {
        setTripDate(tripDate, null, false);
    }

    public void setTripDate(DateTyp tripDate, java.util.Map<String, String> __ctx)
    {
        setTripDate(tripDate, __ctx, true);
    }

    private void setTripDate(DateTyp tripDate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTripDate", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setTripDate(tripDate, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTripDate(DateTyp tripDate)
    {
        return begin_setTripDate(tripDate, null, false, null);
    }

    public Ice.AsyncResult begin_setTripDate(DateTyp tripDate, java.util.Map<String, String> __ctx)
    {
        return begin_setTripDate(tripDate, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTripDate(DateTyp tripDate, Ice.Callback __cb)
    {
        return begin_setTripDate(tripDate, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripDate(DateTyp tripDate, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTripDate(tripDate, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTripDate(DateTyp tripDate, Callback_TripTyp_setTripDate __cb)
    {
        return begin_setTripDate(tripDate, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripDate(DateTyp tripDate, java.util.Map<String, String> __ctx, Callback_TripTyp_setTripDate __cb)
    {
        return begin_setTripDate(tripDate, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTripDate(DateTyp tripDate, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTripDate_name, __cb);
        try
        {
            __result.__prepare(__setTripDate_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(tripDate);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTripDate(Ice.AsyncResult __result)
    {
        __end(__result, __setTripDate_name);
    }

    private static final String __setTripId_name = "setTripId";

    public void setTripId(int tripId)
    {
        setTripId(tripId, null, false);
    }

    public void setTripId(int tripId, java.util.Map<String, String> __ctx)
    {
        setTripId(tripId, __ctx, true);
    }

    private void setTripId(int tripId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTripId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setTripId(tripId, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTripId(int tripId)
    {
        return begin_setTripId(tripId, null, false, null);
    }

    public Ice.AsyncResult begin_setTripId(int tripId, java.util.Map<String, String> __ctx)
    {
        return begin_setTripId(tripId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTripId(int tripId, Ice.Callback __cb)
    {
        return begin_setTripId(tripId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripId(int tripId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTripId(tripId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTripId(int tripId, Callback_TripTyp_setTripId __cb)
    {
        return begin_setTripId(tripId, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripId(int tripId, java.util.Map<String, String> __ctx, Callback_TripTyp_setTripId __cb)
    {
        return begin_setTripId(tripId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTripId(int tripId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTripId_name, __cb);
        try
        {
            __result.__prepare(__setTripId_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(tripId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTripId(Ice.AsyncResult __result)
    {
        __end(__result, __setTripId_name);
    }

    private static final String __setTripReturnDate_name = "setTripReturnDate";

    public void setTripReturnDate(DateTyp tripReturnDate)
    {
        setTripReturnDate(tripReturnDate, null, false);
    }

    public void setTripReturnDate(DateTyp tripReturnDate, java.util.Map<String, String> __ctx)
    {
        setTripReturnDate(tripReturnDate, __ctx, true);
    }

    private void setTripReturnDate(DateTyp tripReturnDate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTripReturnDate", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setTripReturnDate(tripReturnDate, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTripReturnDate(DateTyp tripReturnDate)
    {
        return begin_setTripReturnDate(tripReturnDate, null, false, null);
    }

    public Ice.AsyncResult begin_setTripReturnDate(DateTyp tripReturnDate, java.util.Map<String, String> __ctx)
    {
        return begin_setTripReturnDate(tripReturnDate, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTripReturnDate(DateTyp tripReturnDate, Ice.Callback __cb)
    {
        return begin_setTripReturnDate(tripReturnDate, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripReturnDate(DateTyp tripReturnDate, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTripReturnDate(tripReturnDate, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTripReturnDate(DateTyp tripReturnDate, Callback_TripTyp_setTripReturnDate __cb)
    {
        return begin_setTripReturnDate(tripReturnDate, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripReturnDate(DateTyp tripReturnDate, java.util.Map<String, String> __ctx, Callback_TripTyp_setTripReturnDate __cb)
    {
        return begin_setTripReturnDate(tripReturnDate, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTripReturnDate(DateTyp tripReturnDate, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTripReturnDate_name, __cb);
        try
        {
            __result.__prepare(__setTripReturnDate_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(tripReturnDate);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTripReturnDate(Ice.AsyncResult __result)
    {
        __end(__result, __setTripReturnDate_name);
    }

    private static final String __setTripType_name = "setTripType";

    public void setTripType(int type)
    {
        setTripType(type, null, false);
    }

    public void setTripType(int type, java.util.Map<String, String> __ctx)
    {
        setTripType(type, __ctx, true);
    }

    private void setTripType(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTripType", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setTripType(type, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTripType(int type)
    {
        return begin_setTripType(type, null, false, null);
    }

    public Ice.AsyncResult begin_setTripType(int type, java.util.Map<String, String> __ctx)
    {
        return begin_setTripType(type, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTripType(int type, Ice.Callback __cb)
    {
        return begin_setTripType(type, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripType(int type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTripType(type, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTripType(int type, Callback_TripTyp_setTripType __cb)
    {
        return begin_setTripType(type, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripType(int type, java.util.Map<String, String> __ctx, Callback_TripTyp_setTripType __cb)
    {
        return begin_setTripType(type, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTripType(int type, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTripType_name, __cb);
        try
        {
            __result.__prepare(__setTripType_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(type);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTripType(Ice.AsyncResult __result)
    {
        __end(__result, __setTripType_name);
    }

    private static final String __setTripWeekDaysPeriodicity_name = "setTripWeekDaysPeriodicity";

    public void setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity)
    {
        setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, null, false);
    }

    public void setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity, java.util.Map<String, String> __ctx)
    {
        setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, __ctx, true);
    }

    private void setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTripWeekDaysPeriodicity", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    __del.setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity)
    {
        return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, null, false, null);
    }

    public Ice.AsyncResult begin_setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity, java.util.Map<String, String> __ctx)
    {
        return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity, Ice.Callback __cb)
    {
        return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity, Callback_TripTyp_setTripWeekDaysPeriodicity __cb)
    {
        return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity, java.util.Map<String, String> __ctx, Callback_TripTyp_setTripWeekDaysPeriodicity __cb)
    {
        return begin_setTripWeekDaysPeriodicity(tripWeekDays, tripPeriodicity, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTripWeekDaysPeriodicity(String[] tripWeekDays, Periodicity tripPeriodicity, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTripWeekDaysPeriodicity_name, __cb);
        try
        {
            __result.__prepare(__setTripWeekDaysPeriodicity_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            WeekdaysVHelper.write(__os, tripWeekDays);
            tripPeriodicity.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTripWeekDaysPeriodicity(Ice.AsyncResult __result)
    {
        __end(__result, __setTripWeekDaysPeriodicity_name);
    }

    private static final String __toString_name = "toString";

    public String _toString()
    {
        return _toString(null, false);
    }

    public String _toString(java.util.Map<String, String> __ctx)
    {
        return _toString(__ctx, true);
    }

    private String _toString(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "_toString", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("_toString");
                    __delBase = __getDelegate(false);
                    _TripRequestTypDel __del = (_TripRequestTypDel)__delBase;
                    return __del._toString(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_toString()
    {
        return begin_toString(null, false, null);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx)
    {
        return begin_toString(__ctx, true, null);
    }

    public Ice.AsyncResult begin_toString(Ice.Callback __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_toString(Callback_TripTyp_toString __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Callback_TripTyp_toString __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__toString_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __toString_name, __cb);
        try
        {
            __result.__prepare(__toString_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_toString(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __toString_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static TripRequestTypPrx checkedCast(Ice.ObjectPrx __obj)
    {
        TripRequestTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TripRequestTypPrx)
            {
                __d = (TripRequestTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    TripRequestTypPrxHelper __h = new TripRequestTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TripRequestTypPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        TripRequestTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TripRequestTypPrx)
            {
                __d = (TripRequestTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    TripRequestTypPrxHelper __h = new TripRequestTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static TripRequestTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TripRequestTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    TripRequestTypPrxHelper __h = new TripRequestTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TripRequestTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        TripRequestTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    TripRequestTypPrxHelper __h = new TripRequestTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static TripRequestTypPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        TripRequestTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof TripRequestTypPrx)
            {
                __d = (TripRequestTypPrx)__obj;
            }
            else
            {
                TripRequestTypPrxHelper __h = new TripRequestTypPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static TripRequestTypPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        TripRequestTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            TripRequestTypPrxHelper __h = new TripRequestTypPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::TripRequestTyp",
        "::cardroid::data::zerocice::TripTyp"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _TripRequestTypDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _TripRequestTypDelD();
    }

    public static void __write(IceInternal.BasicStream __os, TripRequestTypPrx v)
    {
        __os.writeProxy(v);
    }

    public static TripRequestTypPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            TripRequestTypPrxHelper result = new TripRequestTypPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
