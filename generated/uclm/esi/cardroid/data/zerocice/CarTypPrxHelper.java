// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public final class CarTypPrxHelper extends Ice.ObjectPrxHelperBase implements CarTypPrx
{
    private static final String __getBrand_name = "getBrand";

    public String getBrand()
    {
        return getBrand(null, false);
    }

    public String getBrand(java.util.Map<String, String> __ctx)
    {
        return getBrand(__ctx, true);
    }

    private String getBrand(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBrand", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBrand");
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    return __del.getBrand(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBrand()
    {
        return begin_getBrand(null, false, null);
    }

    public Ice.AsyncResult begin_getBrand(java.util.Map<String, String> __ctx)
    {
        return begin_getBrand(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getBrand(Ice.Callback __cb)
    {
        return begin_getBrand(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBrand(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBrand(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBrand(Callback_CarTyp_getBrand __cb)
    {
        return begin_getBrand(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBrand(java.util.Map<String, String> __ctx, Callback_CarTyp_getBrand __cb)
    {
        return begin_getBrand(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBrand(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBrand_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBrand_name, __cb);
        try
        {
            __result.__prepare(__getBrand_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getBrand(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getBrand_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getCarFuel_name = "getCarFuel";

    public Fuel getCarFuel()
    {
        return getCarFuel(null, false);
    }

    public Fuel getCarFuel(java.util.Map<String, String> __ctx)
    {
        return getCarFuel(__ctx, true);
    }

    private Fuel getCarFuel(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCarFuel", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCarFuel");
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    return __del.getCarFuel(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCarFuel()
    {
        return begin_getCarFuel(null, false, null);
    }

    public Ice.AsyncResult begin_getCarFuel(java.util.Map<String, String> __ctx)
    {
        return begin_getCarFuel(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCarFuel(Ice.Callback __cb)
    {
        return begin_getCarFuel(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCarFuel(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCarFuel(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCarFuel(Callback_CarTyp_getCarFuel __cb)
    {
        return begin_getCarFuel(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCarFuel(java.util.Map<String, String> __ctx, Callback_CarTyp_getCarFuel __cb)
    {
        return begin_getCarFuel(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCarFuel(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCarFuel_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCarFuel_name, __cb);
        try
        {
            __result.__prepare(__getCarFuel_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Fuel end_getCarFuel(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCarFuel_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Fuel __ret;
            __ret = Fuel.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getColor_name = "getColor";

    public String getColor()
    {
        return getColor(null, false);
    }

    public String getColor(java.util.Map<String, String> __ctx)
    {
        return getColor(__ctx, true);
    }

    private String getColor(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getColor", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getColor");
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    return __del.getColor(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getColor()
    {
        return begin_getColor(null, false, null);
    }

    public Ice.AsyncResult begin_getColor(java.util.Map<String, String> __ctx)
    {
        return begin_getColor(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getColor(Ice.Callback __cb)
    {
        return begin_getColor(null, false, __cb);
    }

    public Ice.AsyncResult begin_getColor(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getColor(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getColor(Callback_CarTyp_getColor __cb)
    {
        return begin_getColor(null, false, __cb);
    }

    public Ice.AsyncResult begin_getColor(java.util.Map<String, String> __ctx, Callback_CarTyp_getColor __cb)
    {
        return begin_getColor(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getColor(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getColor_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getColor_name, __cb);
        try
        {
            __result.__prepare(__getColor_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getColor(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getColor_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getConsumptionPerKm_name = "getConsumptionPerKm";

    public double getConsumptionPerKm()
    {
        return getConsumptionPerKm(null, false);
    }

    public double getConsumptionPerKm(java.util.Map<String, String> __ctx)
    {
        return getConsumptionPerKm(__ctx, true);
    }

    private double getConsumptionPerKm(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getConsumptionPerKm", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getConsumptionPerKm");
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    return __del.getConsumptionPerKm(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getConsumptionPerKm()
    {
        return begin_getConsumptionPerKm(null, false, null);
    }

    public Ice.AsyncResult begin_getConsumptionPerKm(java.util.Map<String, String> __ctx)
    {
        return begin_getConsumptionPerKm(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getConsumptionPerKm(Ice.Callback __cb)
    {
        return begin_getConsumptionPerKm(null, false, __cb);
    }

    public Ice.AsyncResult begin_getConsumptionPerKm(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConsumptionPerKm(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getConsumptionPerKm(Callback_CarTyp_getConsumptionPerKm __cb)
    {
        return begin_getConsumptionPerKm(null, false, __cb);
    }

    public Ice.AsyncResult begin_getConsumptionPerKm(java.util.Map<String, String> __ctx, Callback_CarTyp_getConsumptionPerKm __cb)
    {
        return begin_getConsumptionPerKm(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConsumptionPerKm(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConsumptionPerKm_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConsumptionPerKm_name, __cb);
        try
        {
            __result.__prepare(__getConsumptionPerKm_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_getConsumptionPerKm(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConsumptionPerKm_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getModel_name = "getModel";

    public String getModel()
    {
        return getModel(null, false);
    }

    public String getModel(java.util.Map<String, String> __ctx)
    {
        return getModel(__ctx, true);
    }

    private String getModel(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getModel", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getModel");
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    return __del.getModel(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getModel()
    {
        return begin_getModel(null, false, null);
    }

    public Ice.AsyncResult begin_getModel(java.util.Map<String, String> __ctx)
    {
        return begin_getModel(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getModel(Ice.Callback __cb)
    {
        return begin_getModel(null, false, __cb);
    }

    public Ice.AsyncResult begin_getModel(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getModel(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getModel(Callback_CarTyp_getModel __cb)
    {
        return begin_getModel(null, false, __cb);
    }

    public Ice.AsyncResult begin_getModel(java.util.Map<String, String> __ctx, Callback_CarTyp_getModel __cb)
    {
        return begin_getModel(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getModel(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getModel_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getModel_name, __cb);
        try
        {
            __result.__prepare(__getModel_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getModel(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getModel_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getNSeats_name = "getNSeats";

    public int getNSeats()
    {
        return getNSeats(null, false);
    }

    public int getNSeats(java.util.Map<String, String> __ctx)
    {
        return getNSeats(__ctx, true);
    }

    private int getNSeats(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getNSeats", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getNSeats");
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    return __del.getNSeats(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getNSeats()
    {
        return begin_getNSeats(null, false, null);
    }

    public Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx)
    {
        return begin_getNSeats(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getNSeats(Ice.Callback __cb)
    {
        return begin_getNSeats(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getNSeats(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getNSeats(Callback_CarTyp_getNSeats __cb)
    {
        return begin_getNSeats(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx, Callback_CarTyp_getNSeats __cb)
    {
        return begin_getNSeats(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getNSeats(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getNSeats_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getNSeats_name, __cb);
        try
        {
            __result.__prepare(__getNSeats_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getNSeats(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getNSeats_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPlate_name = "getPlate";

    public String getPlate()
    {
        return getPlate(null, false);
    }

    public String getPlate(java.util.Map<String, String> __ctx)
    {
        return getPlate(__ctx, true);
    }

    private String getPlate(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPlate", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPlate");
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    return __del.getPlate(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPlate()
    {
        return begin_getPlate(null, false, null);
    }

    public Ice.AsyncResult begin_getPlate(java.util.Map<String, String> __ctx)
    {
        return begin_getPlate(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPlate(Ice.Callback __cb)
    {
        return begin_getPlate(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPlate(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPlate(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPlate(Callback_CarTyp_getPlate __cb)
    {
        return begin_getPlate(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPlate(java.util.Map<String, String> __ctx, Callback_CarTyp_getPlate __cb)
    {
        return begin_getPlate(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPlate(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPlate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPlate_name, __cb);
        try
        {
            __result.__prepare(__getPlate_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getPlate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPlate_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setBrand_name = "setBrand";

    public void setBrand(String brand)
    {
        setBrand(brand, null, false);
    }

    public void setBrand(String brand, java.util.Map<String, String> __ctx)
    {
        setBrand(brand, __ctx, true);
    }

    private void setBrand(String brand, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setBrand", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    __del.setBrand(brand, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setBrand(String brand)
    {
        return begin_setBrand(brand, null, false, null);
    }

    public Ice.AsyncResult begin_setBrand(String brand, java.util.Map<String, String> __ctx)
    {
        return begin_setBrand(brand, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setBrand(String brand, Ice.Callback __cb)
    {
        return begin_setBrand(brand, null, false, __cb);
    }

    public Ice.AsyncResult begin_setBrand(String brand, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setBrand(brand, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setBrand(String brand, Callback_CarTyp_setBrand __cb)
    {
        return begin_setBrand(brand, null, false, __cb);
    }

    public Ice.AsyncResult begin_setBrand(String brand, java.util.Map<String, String> __ctx, Callback_CarTyp_setBrand __cb)
    {
        return begin_setBrand(brand, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setBrand(String brand, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setBrand_name, __cb);
        try
        {
            __result.__prepare(__setBrand_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(brand);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setBrand(Ice.AsyncResult __result)
    {
        __end(__result, __setBrand_name);
    }

    private static final String __setCarFuel_name = "setCarFuel";

    public void setCarFuel(Fuel carFuel)
    {
        setCarFuel(carFuel, null, false);
    }

    public void setCarFuel(Fuel carFuel, java.util.Map<String, String> __ctx)
    {
        setCarFuel(carFuel, __ctx, true);
    }

    private void setCarFuel(Fuel carFuel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCarFuel", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    __del.setCarFuel(carFuel, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCarFuel(Fuel carFuel)
    {
        return begin_setCarFuel(carFuel, null, false, null);
    }

    public Ice.AsyncResult begin_setCarFuel(Fuel carFuel, java.util.Map<String, String> __ctx)
    {
        return begin_setCarFuel(carFuel, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCarFuel(Fuel carFuel, Ice.Callback __cb)
    {
        return begin_setCarFuel(carFuel, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCarFuel(Fuel carFuel, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCarFuel(carFuel, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCarFuel(Fuel carFuel, Callback_CarTyp_setCarFuel __cb)
    {
        return begin_setCarFuel(carFuel, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCarFuel(Fuel carFuel, java.util.Map<String, String> __ctx, Callback_CarTyp_setCarFuel __cb)
    {
        return begin_setCarFuel(carFuel, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCarFuel(Fuel carFuel, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCarFuel_name, __cb);
        try
        {
            __result.__prepare(__setCarFuel_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            carFuel.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCarFuel(Ice.AsyncResult __result)
    {
        __end(__result, __setCarFuel_name);
    }

    private static final String __setColor_name = "setColor";

    public void setColor(String color)
    {
        setColor(color, null, false);
    }

    public void setColor(String color, java.util.Map<String, String> __ctx)
    {
        setColor(color, __ctx, true);
    }

    private void setColor(String color, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setColor", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    __del.setColor(color, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setColor(String color)
    {
        return begin_setColor(color, null, false, null);
    }

    public Ice.AsyncResult begin_setColor(String color, java.util.Map<String, String> __ctx)
    {
        return begin_setColor(color, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setColor(String color, Ice.Callback __cb)
    {
        return begin_setColor(color, null, false, __cb);
    }

    public Ice.AsyncResult begin_setColor(String color, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setColor(color, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setColor(String color, Callback_CarTyp_setColor __cb)
    {
        return begin_setColor(color, null, false, __cb);
    }

    public Ice.AsyncResult begin_setColor(String color, java.util.Map<String, String> __ctx, Callback_CarTyp_setColor __cb)
    {
        return begin_setColor(color, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setColor(String color, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setColor_name, __cb);
        try
        {
            __result.__prepare(__setColor_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(color);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setColor(Ice.AsyncResult __result)
    {
        __end(__result, __setColor_name);
    }

    private static final String __setConsumptionPerKm_name = "setConsumptionPerKm";

    public void setConsumptionPerKm(double consumptionPerKm)
    {
        setConsumptionPerKm(consumptionPerKm, null, false);
    }

    public void setConsumptionPerKm(double consumptionPerKm, java.util.Map<String, String> __ctx)
    {
        setConsumptionPerKm(consumptionPerKm, __ctx, true);
    }

    private void setConsumptionPerKm(double consumptionPerKm, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setConsumptionPerKm", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    __del.setConsumptionPerKm(consumptionPerKm, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setConsumptionPerKm(double consumptionPerKm)
    {
        return begin_setConsumptionPerKm(consumptionPerKm, null, false, null);
    }

    public Ice.AsyncResult begin_setConsumptionPerKm(double consumptionPerKm, java.util.Map<String, String> __ctx)
    {
        return begin_setConsumptionPerKm(consumptionPerKm, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setConsumptionPerKm(double consumptionPerKm, Ice.Callback __cb)
    {
        return begin_setConsumptionPerKm(consumptionPerKm, null, false, __cb);
    }

    public Ice.AsyncResult begin_setConsumptionPerKm(double consumptionPerKm, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setConsumptionPerKm(consumptionPerKm, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setConsumptionPerKm(double consumptionPerKm, Callback_CarTyp_setConsumptionPerKm __cb)
    {
        return begin_setConsumptionPerKm(consumptionPerKm, null, false, __cb);
    }

    public Ice.AsyncResult begin_setConsumptionPerKm(double consumptionPerKm, java.util.Map<String, String> __ctx, Callback_CarTyp_setConsumptionPerKm __cb)
    {
        return begin_setConsumptionPerKm(consumptionPerKm, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setConsumptionPerKm(double consumptionPerKm, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setConsumptionPerKm_name, __cb);
        try
        {
            __result.__prepare(__setConsumptionPerKm_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(consumptionPerKm);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setConsumptionPerKm(Ice.AsyncResult __result)
    {
        __end(__result, __setConsumptionPerKm_name);
    }

    private static final String __setModel_name = "setModel";

    public void setModel(String model)
    {
        setModel(model, null, false);
    }

    public void setModel(String model, java.util.Map<String, String> __ctx)
    {
        setModel(model, __ctx, true);
    }

    private void setModel(String model, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setModel", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    __del.setModel(model, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setModel(String model)
    {
        return begin_setModel(model, null, false, null);
    }

    public Ice.AsyncResult begin_setModel(String model, java.util.Map<String, String> __ctx)
    {
        return begin_setModel(model, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setModel(String model, Ice.Callback __cb)
    {
        return begin_setModel(model, null, false, __cb);
    }

    public Ice.AsyncResult begin_setModel(String model, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setModel(model, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setModel(String model, Callback_CarTyp_setModel __cb)
    {
        return begin_setModel(model, null, false, __cb);
    }

    public Ice.AsyncResult begin_setModel(String model, java.util.Map<String, String> __ctx, Callback_CarTyp_setModel __cb)
    {
        return begin_setModel(model, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setModel(String model, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setModel_name, __cb);
        try
        {
            __result.__prepare(__setModel_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(model);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setModel(Ice.AsyncResult __result)
    {
        __end(__result, __setModel_name);
    }

    private static final String __setNSeats_name = "setNSeats";

    public void setNSeats(int nSeats)
    {
        setNSeats(nSeats, null, false);
    }

    public void setNSeats(int nSeats, java.util.Map<String, String> __ctx)
    {
        setNSeats(nSeats, __ctx, true);
    }

    private void setNSeats(int nSeats, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setNSeats", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    __del.setNSeats(nSeats, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats)
    {
        return begin_setNSeats(nSeats, null, false, null);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx)
    {
        return begin_setNSeats(nSeats, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, Ice.Callback __cb)
    {
        return begin_setNSeats(nSeats, null, false, __cb);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setNSeats(nSeats, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, Callback_CarTyp_setNSeats __cb)
    {
        return begin_setNSeats(nSeats, null, false, __cb);
    }

    public Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx, Callback_CarTyp_setNSeats __cb)
    {
        return begin_setNSeats(nSeats, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setNSeats(int nSeats, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setNSeats_name, __cb);
        try
        {
            __result.__prepare(__setNSeats_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(nSeats);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setNSeats(Ice.AsyncResult __result)
    {
        __end(__result, __setNSeats_name);
    }

    private static final String __setPlate_name = "setPlate";

    public void setPlate(String plate)
    {
        setPlate(plate, null, false);
    }

    public void setPlate(String plate, java.util.Map<String, String> __ctx)
    {
        setPlate(plate, __ctx, true);
    }

    private void setPlate(String plate, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setPlate", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    __del.setPlate(plate, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setPlate(String plate)
    {
        return begin_setPlate(plate, null, false, null);
    }

    public Ice.AsyncResult begin_setPlate(String plate, java.util.Map<String, String> __ctx)
    {
        return begin_setPlate(plate, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setPlate(String plate, Ice.Callback __cb)
    {
        return begin_setPlate(plate, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPlate(String plate, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPlate(plate, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setPlate(String plate, Callback_CarTyp_setPlate __cb)
    {
        return begin_setPlate(plate, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPlate(String plate, java.util.Map<String, String> __ctx, Callback_CarTyp_setPlate __cb)
    {
        return begin_setPlate(plate, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPlate(String plate, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPlate_name, __cb);
        try
        {
            __result.__prepare(__setPlate_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(plate);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setPlate(Ice.AsyncResult __result)
    {
        __end(__result, __setPlate_name);
    }

    private static final String __toString_name = "toString";

    public String _toString()
    {
        return _toString(null, false);
    }

    public String _toString(java.util.Map<String, String> __ctx)
    {
        return _toString(__ctx, true);
    }

    private String _toString(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "_toString", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("_toString");
                    __delBase = __getDelegate(false);
                    _CarTypDel __del = (_CarTypDel)__delBase;
                    return __del._toString(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_toString()
    {
        return begin_toString(null, false, null);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx)
    {
        return begin_toString(__ctx, true, null);
    }

    public Ice.AsyncResult begin_toString(Ice.Callback __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_toString(Callback_CarTyp_toString __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Callback_CarTyp_toString __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__toString_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __toString_name, __cb);
        try
        {
            __result.__prepare(__toString_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_toString(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __toString_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static CarTypPrx checkedCast(Ice.ObjectPrx __obj)
    {
        CarTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CarTypPrx)
            {
                __d = (CarTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    CarTypPrxHelper __h = new CarTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CarTypPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        CarTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CarTypPrx)
            {
                __d = (CarTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    CarTypPrxHelper __h = new CarTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CarTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CarTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    CarTypPrxHelper __h = new CarTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CarTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        CarTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    CarTypPrxHelper __h = new CarTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CarTypPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        CarTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CarTypPrx)
            {
                __d = (CarTypPrx)__obj;
            }
            else
            {
                CarTypPrxHelper __h = new CarTypPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static CarTypPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CarTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            CarTypPrxHelper __h = new CarTypPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::CarTyp"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _CarTypDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _CarTypDelD();
    }

    public static void __write(IceInternal.BasicStream __os, CarTypPrx v)
    {
        __os.writeProxy(v);
    }

    public static CarTypPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CarTypPrxHelper result = new CarTypPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
