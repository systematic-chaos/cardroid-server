// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public final class WaypointTypPrxHelper extends Ice.ObjectPrxHelperBase implements WaypointTypPrx
{
    private static final String __getNOrder_name = "getNOrder";

    public int getNOrder()
    {
        return getNOrder(null, false);
    }

    public int getNOrder(java.util.Map<String, String> __ctx)
    {
        return getNOrder(__ctx, true);
    }

    private int getNOrder(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getNOrder", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getNOrder");
                    __delBase = __getDelegate(false);
                    _WaypointTypDel __del = (_WaypointTypDel)__delBase;
                    return __del.getNOrder(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getNOrder()
    {
        return begin_getNOrder(null, false, null);
    }

    public Ice.AsyncResult begin_getNOrder(java.util.Map<String, String> __ctx)
    {
        return begin_getNOrder(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getNOrder(Ice.Callback __cb)
    {
        return begin_getNOrder(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNOrder(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getNOrder(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getNOrder(Callback_WaypointTyp_getNOrder __cb)
    {
        return begin_getNOrder(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNOrder(java.util.Map<String, String> __ctx, Callback_WaypointTyp_getNOrder __cb)
    {
        return begin_getNOrder(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getNOrder(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getNOrder_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getNOrder_name, __cb);
        try
        {
            __result.__prepare(__getNOrder_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getNOrder(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getNOrder_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getWaypointPlace_name = "getWaypointPlace";

    public PlaceTyp getWaypointPlace()
    {
        return getWaypointPlace(null, false);
    }

    public PlaceTyp getWaypointPlace(java.util.Map<String, String> __ctx)
    {
        return getWaypointPlace(__ctx, true);
    }

    private PlaceTyp getWaypointPlace(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getWaypointPlace", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getWaypointPlace");
                    __delBase = __getDelegate(false);
                    _WaypointTypDel __del = (_WaypointTypDel)__delBase;
                    return __del.getWaypointPlace(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getWaypointPlace()
    {
        return begin_getWaypointPlace(null, false, null);
    }

    public Ice.AsyncResult begin_getWaypointPlace(java.util.Map<String, String> __ctx)
    {
        return begin_getWaypointPlace(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getWaypointPlace(Ice.Callback __cb)
    {
        return begin_getWaypointPlace(null, false, __cb);
    }

    public Ice.AsyncResult begin_getWaypointPlace(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getWaypointPlace(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getWaypointPlace(Callback_WaypointTyp_getWaypointPlace __cb)
    {
        return begin_getWaypointPlace(null, false, __cb);
    }

    public Ice.AsyncResult begin_getWaypointPlace(java.util.Map<String, String> __ctx, Callback_WaypointTyp_getWaypointPlace __cb)
    {
        return begin_getWaypointPlace(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getWaypointPlace(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getWaypointPlace_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getWaypointPlace_name, __cb);
        try
        {
            __result.__prepare(__getWaypointPlace_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PlaceTyp end_getWaypointPlace(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getWaypointPlace_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PlaceTypHolder __ret = new PlaceTypHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setNOrder_name = "setNOrder";

    public void setNOrder(int nOrder)
    {
        setNOrder(nOrder, null, false);
    }

    public void setNOrder(int nOrder, java.util.Map<String, String> __ctx)
    {
        setNOrder(nOrder, __ctx, true);
    }

    private void setNOrder(int nOrder, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setNOrder", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _WaypointTypDel __del = (_WaypointTypDel)__delBase;
                    __del.setNOrder(nOrder, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setNOrder(int nOrder)
    {
        return begin_setNOrder(nOrder, null, false, null);
    }

    public Ice.AsyncResult begin_setNOrder(int nOrder, java.util.Map<String, String> __ctx)
    {
        return begin_setNOrder(nOrder, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setNOrder(int nOrder, Ice.Callback __cb)
    {
        return begin_setNOrder(nOrder, null, false, __cb);
    }

    public Ice.AsyncResult begin_setNOrder(int nOrder, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setNOrder(nOrder, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setNOrder(int nOrder, Callback_WaypointTyp_setNOrder __cb)
    {
        return begin_setNOrder(nOrder, null, false, __cb);
    }

    public Ice.AsyncResult begin_setNOrder(int nOrder, java.util.Map<String, String> __ctx, Callback_WaypointTyp_setNOrder __cb)
    {
        return begin_setNOrder(nOrder, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setNOrder(int nOrder, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setNOrder_name, __cb);
        try
        {
            __result.__prepare(__setNOrder_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(nOrder);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setNOrder(Ice.AsyncResult __result)
    {
        __end(__result, __setNOrder_name);
    }

    private static final String __setWaypointPlace_name = "setWaypointPlace";

    public void setWaypointPlace(PlaceTyp waypointPlace)
    {
        setWaypointPlace(waypointPlace, null, false);
    }

    public void setWaypointPlace(PlaceTyp waypointPlace, java.util.Map<String, String> __ctx)
    {
        setWaypointPlace(waypointPlace, __ctx, true);
    }

    private void setWaypointPlace(PlaceTyp waypointPlace, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setWaypointPlace", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _WaypointTypDel __del = (_WaypointTypDel)__delBase;
                    __del.setWaypointPlace(waypointPlace, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setWaypointPlace(PlaceTyp waypointPlace)
    {
        return begin_setWaypointPlace(waypointPlace, null, false, null);
    }

    public Ice.AsyncResult begin_setWaypointPlace(PlaceTyp waypointPlace, java.util.Map<String, String> __ctx)
    {
        return begin_setWaypointPlace(waypointPlace, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setWaypointPlace(PlaceTyp waypointPlace, Ice.Callback __cb)
    {
        return begin_setWaypointPlace(waypointPlace, null, false, __cb);
    }

    public Ice.AsyncResult begin_setWaypointPlace(PlaceTyp waypointPlace, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setWaypointPlace(waypointPlace, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setWaypointPlace(PlaceTyp waypointPlace, Callback_WaypointTyp_setWaypointPlace __cb)
    {
        return begin_setWaypointPlace(waypointPlace, null, false, __cb);
    }

    public Ice.AsyncResult begin_setWaypointPlace(PlaceTyp waypointPlace, java.util.Map<String, String> __ctx, Callback_WaypointTyp_setWaypointPlace __cb)
    {
        return begin_setWaypointPlace(waypointPlace, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setWaypointPlace(PlaceTyp waypointPlace, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setWaypointPlace_name, __cb);
        try
        {
            __result.__prepare(__setWaypointPlace_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(waypointPlace);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setWaypointPlace(Ice.AsyncResult __result)
    {
        __end(__result, __setWaypointPlace_name);
    }

    private static final String __toString_name = "toString";

    public String _toString()
    {
        return _toString(null, false);
    }

    public String _toString(java.util.Map<String, String> __ctx)
    {
        return _toString(__ctx, true);
    }

    private String _toString(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "_toString", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("_toString");
                    __delBase = __getDelegate(false);
                    _WaypointTypDel __del = (_WaypointTypDel)__delBase;
                    return __del._toString(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_toString()
    {
        return begin_toString(null, false, null);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx)
    {
        return begin_toString(__ctx, true, null);
    }

    public Ice.AsyncResult begin_toString(Ice.Callback __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_toString(Callback_WaypointTyp_toString __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Callback_WaypointTyp_toString __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__toString_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __toString_name, __cb);
        try
        {
            __result.__prepare(__toString_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_toString(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __toString_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static WaypointTypPrx checkedCast(Ice.ObjectPrx __obj)
    {
        WaypointTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof WaypointTypPrx)
            {
                __d = (WaypointTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    WaypointTypPrxHelper __h = new WaypointTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static WaypointTypPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        WaypointTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof WaypointTypPrx)
            {
                __d = (WaypointTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    WaypointTypPrxHelper __h = new WaypointTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static WaypointTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        WaypointTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    WaypointTypPrxHelper __h = new WaypointTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static WaypointTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        WaypointTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    WaypointTypPrxHelper __h = new WaypointTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static WaypointTypPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        WaypointTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof WaypointTypPrx)
            {
                __d = (WaypointTypPrx)__obj;
            }
            else
            {
                WaypointTypPrxHelper __h = new WaypointTypPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static WaypointTypPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        WaypointTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            WaypointTypPrxHelper __h = new WaypointTypPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::WaypointTyp"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _WaypointTypDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _WaypointTypDelD();
    }

    public static void __write(IceInternal.BasicStream __os, WaypointTypPrx v)
    {
        __os.writeProxy(v);
    }

    public static WaypointTypPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            WaypointTypPrxHelper result = new WaypointTypPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
