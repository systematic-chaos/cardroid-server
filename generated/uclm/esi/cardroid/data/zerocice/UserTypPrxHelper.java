// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.data.zerocice;

public final class UserTypPrxHelper extends Ice.ObjectPrxHelperBase implements UserTypPrx
{
    private static final String __addCar_name = "addCar";

    public boolean addCar(CarTyp c)
    {
        return addCar(c, null, false);
    }

    public boolean addCar(CarTyp c, java.util.Map<String, String> __ctx)
    {
        return addCar(c, __ctx, true);
    }

    private boolean addCar(CarTyp c, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addCar", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addCar");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.addCar(c, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addCar(CarTyp c)
    {
        return begin_addCar(c, null, false, null);
    }

    public Ice.AsyncResult begin_addCar(CarTyp c, java.util.Map<String, String> __ctx)
    {
        return begin_addCar(c, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addCar(CarTyp c, Ice.Callback __cb)
    {
        return begin_addCar(c, null, false, __cb);
    }

    public Ice.AsyncResult begin_addCar(CarTyp c, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addCar(c, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addCar(CarTyp c, Callback_UserTyp_addCar __cb)
    {
        return begin_addCar(c, null, false, __cb);
    }

    public Ice.AsyncResult begin_addCar(CarTyp c, java.util.Map<String, String> __ctx, Callback_UserTyp_addCar __cb)
    {
        return begin_addCar(c, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addCar(CarTyp c, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addCar_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addCar_name, __cb);
        try
        {
            __result.__prepare(__addCar_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(c);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_addCar(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addCar_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __clearCars_name = "clearCars";

    public void clearCars()
    {
        clearCars(null, false);
    }

    public void clearCars(java.util.Map<String, String> __ctx)
    {
        clearCars(__ctx, true);
    }

    private void clearCars(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "clearCars", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.clearCars(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_clearCars()
    {
        return begin_clearCars(null, false, null);
    }

    public Ice.AsyncResult begin_clearCars(java.util.Map<String, String> __ctx)
    {
        return begin_clearCars(__ctx, true, null);
    }

    public Ice.AsyncResult begin_clearCars(Ice.Callback __cb)
    {
        return begin_clearCars(null, false, __cb);
    }

    public Ice.AsyncResult begin_clearCars(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_clearCars(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_clearCars(Callback_UserTyp_clearCars __cb)
    {
        return begin_clearCars(null, false, __cb);
    }

    public Ice.AsyncResult begin_clearCars(java.util.Map<String, String> __ctx, Callback_UserTyp_clearCars __cb)
    {
        return begin_clearCars(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_clearCars(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __clearCars_name, __cb);
        try
        {
            __result.__prepare(__clearCars_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_clearCars(Ice.AsyncResult __result)
    {
        __end(__result, __clearCars_name);
    }

    private static final String __decreaseReputation_name = "decreaseReputation";

    public void decreaseReputation(int decrease)
    {
        decreaseReputation(decrease, null, false);
    }

    public void decreaseReputation(int decrease, java.util.Map<String, String> __ctx)
    {
        decreaseReputation(decrease, __ctx, true);
    }

    private void decreaseReputation(int decrease, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "decreaseReputation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.decreaseReputation(decrease, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_decreaseReputation(int decrease)
    {
        return begin_decreaseReputation(decrease, null, false, null);
    }

    public Ice.AsyncResult begin_decreaseReputation(int decrease, java.util.Map<String, String> __ctx)
    {
        return begin_decreaseReputation(decrease, __ctx, true, null);
    }

    public Ice.AsyncResult begin_decreaseReputation(int decrease, Ice.Callback __cb)
    {
        return begin_decreaseReputation(decrease, null, false, __cb);
    }

    public Ice.AsyncResult begin_decreaseReputation(int decrease, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_decreaseReputation(decrease, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_decreaseReputation(int decrease, Callback_UserTyp_decreaseReputation __cb)
    {
        return begin_decreaseReputation(decrease, null, false, __cb);
    }

    public Ice.AsyncResult begin_decreaseReputation(int decrease, java.util.Map<String, String> __ctx, Callback_UserTyp_decreaseReputation __cb)
    {
        return begin_decreaseReputation(decrease, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_decreaseReputation(int decrease, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __decreaseReputation_name, __cb);
        try
        {
            __result.__prepare(__decreaseReputation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(decrease);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_decreaseReputation(Ice.AsyncResult __result)
    {
        __end(__result, __decreaseReputation_name);
    }

    private static final String __decreaseReputation1_name = "decreaseReputation1";

    public void decreaseReputation1()
    {
        decreaseReputation1(null, false);
    }

    public void decreaseReputation1(java.util.Map<String, String> __ctx)
    {
        decreaseReputation1(__ctx, true);
    }

    private void decreaseReputation1(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "decreaseReputation1", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.decreaseReputation1(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_decreaseReputation1()
    {
        return begin_decreaseReputation1(null, false, null);
    }

    public Ice.AsyncResult begin_decreaseReputation1(java.util.Map<String, String> __ctx)
    {
        return begin_decreaseReputation1(__ctx, true, null);
    }

    public Ice.AsyncResult begin_decreaseReputation1(Ice.Callback __cb)
    {
        return begin_decreaseReputation1(null, false, __cb);
    }

    public Ice.AsyncResult begin_decreaseReputation1(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_decreaseReputation1(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_decreaseReputation1(Callback_UserTyp_decreaseReputation1 __cb)
    {
        return begin_decreaseReputation1(null, false, __cb);
    }

    public Ice.AsyncResult begin_decreaseReputation1(java.util.Map<String, String> __ctx, Callback_UserTyp_decreaseReputation1 __cb)
    {
        return begin_decreaseReputation1(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_decreaseReputation1(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __decreaseReputation1_name, __cb);
        try
        {
            __result.__prepare(__decreaseReputation1_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_decreaseReputation1(Ice.AsyncResult __result)
    {
        __end(__result, __decreaseReputation1_name);
    }

    private static final String __getAvatarBytes_name = "getAvatarBytes";

    public byte[] getAvatarBytes()
    {
        return getAvatarBytes(null, false);
    }

    public byte[] getAvatarBytes(java.util.Map<String, String> __ctx)
    {
        return getAvatarBytes(__ctx, true);
    }

    private byte[] getAvatarBytes(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAvatarBytes", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAvatarBytes");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.getAvatarBytes(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAvatarBytes()
    {
        return begin_getAvatarBytes(null, false, null);
    }

    public Ice.AsyncResult begin_getAvatarBytes(java.util.Map<String, String> __ctx)
    {
        return begin_getAvatarBytes(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAvatarBytes(Ice.Callback __cb)
    {
        return begin_getAvatarBytes(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAvatarBytes(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAvatarBytes(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAvatarBytes(Callback_UserTyp_getAvatarBytes __cb)
    {
        return begin_getAvatarBytes(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAvatarBytes(java.util.Map<String, String> __ctx, Callback_UserTyp_getAvatarBytes __cb)
    {
        return begin_getAvatarBytes(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAvatarBytes(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAvatarBytes_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAvatarBytes_name, __cb);
        try
        {
            __result.__prepare(__getAvatarBytes_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public byte[] end_getAvatarBytes(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAvatarBytes_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            byte[] __ret;
            __ret = BlobHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getEmail_name = "getEmail";

    public String getEmail()
    {
        return getEmail(null, false);
    }

    public String getEmail(java.util.Map<String, String> __ctx)
    {
        return getEmail(__ctx, true);
    }

    private String getEmail(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getEmail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getEmail");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.getEmail(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getEmail()
    {
        return begin_getEmail(null, false, null);
    }

    public Ice.AsyncResult begin_getEmail(java.util.Map<String, String> __ctx)
    {
        return begin_getEmail(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getEmail(Ice.Callback __cb)
    {
        return begin_getEmail(null, false, __cb);
    }

    public Ice.AsyncResult begin_getEmail(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getEmail(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getEmail(Callback_UserTyp_getEmail __cb)
    {
        return begin_getEmail(null, false, __cb);
    }

    public Ice.AsyncResult begin_getEmail(java.util.Map<String, String> __ctx, Callback_UserTyp_getEmail __cb)
    {
        return begin_getEmail(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getEmail(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getEmail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getEmail_name, __cb);
        try
        {
            __result.__prepare(__getEmail_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getEmail(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getEmail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getNCars_name = "getNCars";

    public int getNCars()
    {
        return getNCars(null, false);
    }

    public int getNCars(java.util.Map<String, String> __ctx)
    {
        return getNCars(__ctx, true);
    }

    private int getNCars(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getNCars", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getNCars");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.getNCars(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getNCars()
    {
        return begin_getNCars(null, false, null);
    }

    public Ice.AsyncResult begin_getNCars(java.util.Map<String, String> __ctx)
    {
        return begin_getNCars(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getNCars(Ice.Callback __cb)
    {
        return begin_getNCars(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNCars(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getNCars(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getNCars(Callback_UserTyp_getNCars __cb)
    {
        return begin_getNCars(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNCars(java.util.Map<String, String> __ctx, Callback_UserTyp_getNCars __cb)
    {
        return begin_getNCars(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getNCars(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getNCars_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getNCars_name, __cb);
        try
        {
            __result.__prepare(__getNCars_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getNCars(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getNCars_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getName_name = "getName";

    public String getName()
    {
        return getName(null, false);
    }

    public String getName(java.util.Map<String, String> __ctx)
    {
        return getName(__ctx, true);
    }

    private String getName(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getName", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getName");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.getName(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getName()
    {
        return begin_getName(null, false, null);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx)
    {
        return begin_getName(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getName(Ice.Callback __cb)
    {
        return begin_getName(null, false, __cb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getName(Callback_UserTyp_getName __cb)
    {
        return begin_getName(null, false, __cb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Callback_UserTyp_getName __cb)
    {
        return begin_getName(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getName_name, __cb);
        try
        {
            __result.__prepare(__getName_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getName_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getReputation_name = "getReputation";

    public int getReputation()
    {
        return getReputation(null, false);
    }

    public int getReputation(java.util.Map<String, String> __ctx)
    {
        return getReputation(__ctx, true);
    }

    private int getReputation(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getReputation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getReputation");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.getReputation(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getReputation()
    {
        return begin_getReputation(null, false, null);
    }

    public Ice.AsyncResult begin_getReputation(java.util.Map<String, String> __ctx)
    {
        return begin_getReputation(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getReputation(Ice.Callback __cb)
    {
        return begin_getReputation(null, false, __cb);
    }

    public Ice.AsyncResult begin_getReputation(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getReputation(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getReputation(Callback_UserTyp_getReputation __cb)
    {
        return begin_getReputation(null, false, __cb);
    }

    public Ice.AsyncResult begin_getReputation(java.util.Map<String, String> __ctx, Callback_UserTyp_getReputation __cb)
    {
        return begin_getReputation(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getReputation(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getReputation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getReputation_name, __cb);
        try
        {
            __result.__prepare(__getReputation_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getReputation(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getReputation_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getSurname_name = "getSurname";

    public String getSurname()
    {
        return getSurname(null, false);
    }

    public String getSurname(java.util.Map<String, String> __ctx)
    {
        return getSurname(__ctx, true);
    }

    private String getSurname(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSurname", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSurname");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.getSurname(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSurname()
    {
        return begin_getSurname(null, false, null);
    }

    public Ice.AsyncResult begin_getSurname(java.util.Map<String, String> __ctx)
    {
        return begin_getSurname(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSurname(Ice.Callback __cb)
    {
        return begin_getSurname(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSurname(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSurname(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSurname(Callback_UserTyp_getSurname __cb)
    {
        return begin_getSurname(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSurname(java.util.Map<String, String> __ctx, Callback_UserTyp_getSurname __cb)
    {
        return begin_getSurname(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSurname(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSurname_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSurname_name, __cb);
        try
        {
            __result.__prepare(__getSurname_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getSurname(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSurname_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTelephone_name = "getTelephone";

    public int getTelephone()
    {
        return getTelephone(null, false);
    }

    public int getTelephone(java.util.Map<String, String> __ctx)
    {
        return getTelephone(__ctx, true);
    }

    private int getTelephone(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTelephone", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTelephone");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.getTelephone(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTelephone()
    {
        return begin_getTelephone(null, false, null);
    }

    public Ice.AsyncResult begin_getTelephone(java.util.Map<String, String> __ctx)
    {
        return begin_getTelephone(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTelephone(Ice.Callback __cb)
    {
        return begin_getTelephone(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTelephone(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTelephone(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTelephone(Callback_UserTyp_getTelephone __cb)
    {
        return begin_getTelephone(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTelephone(java.util.Map<String, String> __ctx, Callback_UserTyp_getTelephone __cb)
    {
        return begin_getTelephone(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTelephone(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTelephone_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTelephone_name, __cb);
        try
        {
            __result.__prepare(__getTelephone_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getTelephone(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTelephone_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getUserCars_name = "getUserCars";

    public java.util.List<CarTypPrx> getUserCars()
    {
        return getUserCars(null, false);
    }

    public java.util.List<CarTypPrx> getUserCars(java.util.Map<String, String> __ctx)
    {
        return getUserCars(__ctx, true);
    }

    private java.util.List<CarTypPrx> getUserCars(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getUserCars", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getUserCars");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.getUserCars(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getUserCars()
    {
        return begin_getUserCars(null, false, null);
    }

    public Ice.AsyncResult begin_getUserCars(java.util.Map<String, String> __ctx)
    {
        return begin_getUserCars(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getUserCars(Ice.Callback __cb)
    {
        return begin_getUserCars(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserCars(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUserCars(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUserCars(Callback_UserTyp_getUserCars __cb)
    {
        return begin_getUserCars(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserCars(java.util.Map<String, String> __ctx, Callback_UserTyp_getUserCars __cb)
    {
        return begin_getUserCars(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUserCars(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUserCars_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUserCars_name, __cb);
        try
        {
            __result.__prepare(__getUserCars_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<CarTypPrx> end_getUserCars(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUserCars_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.List<CarTypPrx> __ret;
            __ret = CarCollectionHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getUserHome_name = "getUserHome";

    public PlaceTyp getUserHome()
    {
        return getUserHome(null, false);
    }

    public PlaceTyp getUserHome(java.util.Map<String, String> __ctx)
    {
        return getUserHome(__ctx, true);
    }

    private PlaceTyp getUserHome(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getUserHome", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getUserHome");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.getUserHome(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getUserHome()
    {
        return begin_getUserHome(null, false, null);
    }

    public Ice.AsyncResult begin_getUserHome(java.util.Map<String, String> __ctx)
    {
        return begin_getUserHome(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getUserHome(Ice.Callback __cb)
    {
        return begin_getUserHome(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserHome(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUserHome(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUserHome(Callback_UserTyp_getUserHome __cb)
    {
        return begin_getUserHome(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserHome(java.util.Map<String, String> __ctx, Callback_UserTyp_getUserHome __cb)
    {
        return begin_getUserHome(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUserHome(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUserHome_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUserHome_name, __cb);
        try
        {
            __result.__prepare(__getUserHome_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PlaceTyp end_getUserHome(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUserHome_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PlaceTypHolder __ret = new PlaceTypHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __hasAvatar_name = "hasAvatar";

    public boolean hasAvatar()
    {
        return hasAvatar(null, false);
    }

    public boolean hasAvatar(java.util.Map<String, String> __ctx)
    {
        return hasAvatar(__ctx, true);
    }

    private boolean hasAvatar(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "hasAvatar", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("hasAvatar");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.hasAvatar(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_hasAvatar()
    {
        return begin_hasAvatar(null, false, null);
    }

    public Ice.AsyncResult begin_hasAvatar(java.util.Map<String, String> __ctx)
    {
        return begin_hasAvatar(__ctx, true, null);
    }

    public Ice.AsyncResult begin_hasAvatar(Ice.Callback __cb)
    {
        return begin_hasAvatar(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasAvatar(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hasAvatar(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_hasAvatar(Callback_UserTyp_hasAvatar __cb)
    {
        return begin_hasAvatar(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasAvatar(java.util.Map<String, String> __ctx, Callback_UserTyp_hasAvatar __cb)
    {
        return begin_hasAvatar(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_hasAvatar(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hasAvatar_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __hasAvatar_name, __cb);
        try
        {
            __result.__prepare(__hasAvatar_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_hasAvatar(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __hasAvatar_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __hasReputation_name = "hasReputation";

    public boolean hasReputation()
    {
        return hasReputation(null, false);
    }

    public boolean hasReputation(java.util.Map<String, String> __ctx)
    {
        return hasReputation(__ctx, true);
    }

    private boolean hasReputation(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "hasReputation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("hasReputation");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.hasReputation(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_hasReputation()
    {
        return begin_hasReputation(null, false, null);
    }

    public Ice.AsyncResult begin_hasReputation(java.util.Map<String, String> __ctx)
    {
        return begin_hasReputation(__ctx, true, null);
    }

    public Ice.AsyncResult begin_hasReputation(Ice.Callback __cb)
    {
        return begin_hasReputation(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasReputation(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hasReputation(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_hasReputation(Callback_UserTyp_hasReputation __cb)
    {
        return begin_hasReputation(null, false, __cb);
    }

    public Ice.AsyncResult begin_hasReputation(java.util.Map<String, String> __ctx, Callback_UserTyp_hasReputation __cb)
    {
        return begin_hasReputation(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_hasReputation(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hasReputation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __hasReputation_name, __cb);
        try
        {
            __result.__prepare(__hasReputation_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_hasReputation(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __hasReputation_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __increaseReputation_name = "increaseReputation";

    public void increaseReputation(int increase)
    {
        increaseReputation(increase, null, false);
    }

    public void increaseReputation(int increase, java.util.Map<String, String> __ctx)
    {
        increaseReputation(increase, __ctx, true);
    }

    private void increaseReputation(int increase, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "increaseReputation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.increaseReputation(increase, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_increaseReputation(int increase)
    {
        return begin_increaseReputation(increase, null, false, null);
    }

    public Ice.AsyncResult begin_increaseReputation(int increase, java.util.Map<String, String> __ctx)
    {
        return begin_increaseReputation(increase, __ctx, true, null);
    }

    public Ice.AsyncResult begin_increaseReputation(int increase, Ice.Callback __cb)
    {
        return begin_increaseReputation(increase, null, false, __cb);
    }

    public Ice.AsyncResult begin_increaseReputation(int increase, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_increaseReputation(increase, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_increaseReputation(int increase, Callback_UserTyp_increaseReputation __cb)
    {
        return begin_increaseReputation(increase, null, false, __cb);
    }

    public Ice.AsyncResult begin_increaseReputation(int increase, java.util.Map<String, String> __ctx, Callback_UserTyp_increaseReputation __cb)
    {
        return begin_increaseReputation(increase, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_increaseReputation(int increase, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __increaseReputation_name, __cb);
        try
        {
            __result.__prepare(__increaseReputation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(increase);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_increaseReputation(Ice.AsyncResult __result)
    {
        __end(__result, __increaseReputation_name);
    }

    private static final String __increaseReputation1_name = "increaseReputation1";

    public void increaseReputation1()
    {
        increaseReputation1(null, false);
    }

    public void increaseReputation1(java.util.Map<String, String> __ctx)
    {
        increaseReputation1(__ctx, true);
    }

    private void increaseReputation1(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "increaseReputation1", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.increaseReputation1(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_increaseReputation1()
    {
        return begin_increaseReputation1(null, false, null);
    }

    public Ice.AsyncResult begin_increaseReputation1(java.util.Map<String, String> __ctx)
    {
        return begin_increaseReputation1(__ctx, true, null);
    }

    public Ice.AsyncResult begin_increaseReputation1(Ice.Callback __cb)
    {
        return begin_increaseReputation1(null, false, __cb);
    }

    public Ice.AsyncResult begin_increaseReputation1(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_increaseReputation1(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_increaseReputation1(Callback_UserTyp_increaseReputation1 __cb)
    {
        return begin_increaseReputation1(null, false, __cb);
    }

    public Ice.AsyncResult begin_increaseReputation1(java.util.Map<String, String> __ctx, Callback_UserTyp_increaseReputation1 __cb)
    {
        return begin_increaseReputation1(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_increaseReputation1(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __increaseReputation1_name, __cb);
        try
        {
            __result.__prepare(__increaseReputation1_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_increaseReputation1(Ice.AsyncResult __result)
    {
        __end(__result, __increaseReputation1_name);
    }

    private static final String __removeCar_name = "removeCar";

    public boolean removeCar(CarTyp c)
    {
        return removeCar(c, null, false);
    }

    public boolean removeCar(CarTyp c, java.util.Map<String, String> __ctx)
    {
        return removeCar(c, __ctx, true);
    }

    private boolean removeCar(CarTyp c, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeCar", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("removeCar");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del.removeCar(c, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeCar(CarTyp c)
    {
        return begin_removeCar(c, null, false, null);
    }

    public Ice.AsyncResult begin_removeCar(CarTyp c, java.util.Map<String, String> __ctx)
    {
        return begin_removeCar(c, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeCar(CarTyp c, Ice.Callback __cb)
    {
        return begin_removeCar(c, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeCar(CarTyp c, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeCar(c, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeCar(CarTyp c, Callback_UserTyp_removeCar __cb)
    {
        return begin_removeCar(c, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeCar(CarTyp c, java.util.Map<String, String> __ctx, Callback_UserTyp_removeCar __cb)
    {
        return begin_removeCar(c, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeCar(CarTyp c, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeCar_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeCar_name, __cb);
        try
        {
            __result.__prepare(__removeCar_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(c);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_removeCar(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeCar_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setAvatarBytes_name = "setAvatarBytes";

    public void setAvatarBytes(byte[] avatarBytes)
    {
        setAvatarBytes(avatarBytes, null, false);
    }

    public void setAvatarBytes(byte[] avatarBytes, java.util.Map<String, String> __ctx)
    {
        setAvatarBytes(avatarBytes, __ctx, true);
    }

    private void setAvatarBytes(byte[] avatarBytes, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setAvatarBytes", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.setAvatarBytes(avatarBytes, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setAvatarBytes(byte[] avatarBytes)
    {
        return begin_setAvatarBytes(avatarBytes, null, false, null);
    }

    public Ice.AsyncResult begin_setAvatarBytes(byte[] avatarBytes, java.util.Map<String, String> __ctx)
    {
        return begin_setAvatarBytes(avatarBytes, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setAvatarBytes(byte[] avatarBytes, Ice.Callback __cb)
    {
        return begin_setAvatarBytes(avatarBytes, null, false, __cb);
    }

    public Ice.AsyncResult begin_setAvatarBytes(byte[] avatarBytes, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setAvatarBytes(avatarBytes, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setAvatarBytes(byte[] avatarBytes, Callback_UserTyp_setAvatarBytes __cb)
    {
        return begin_setAvatarBytes(avatarBytes, null, false, __cb);
    }

    public Ice.AsyncResult begin_setAvatarBytes(byte[] avatarBytes, java.util.Map<String, String> __ctx, Callback_UserTyp_setAvatarBytes __cb)
    {
        return begin_setAvatarBytes(avatarBytes, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setAvatarBytes(byte[] avatarBytes, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setAvatarBytes_name, __cb);
        try
        {
            __result.__prepare(__setAvatarBytes_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            BlobHelper.write(__os, avatarBytes);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setAvatarBytes(Ice.AsyncResult __result)
    {
        __end(__result, __setAvatarBytes_name);
    }

    private static final String __setEmail_name = "setEmail";

    public void setEmail(String email)
    {
        setEmail(email, null, false);
    }

    public void setEmail(String email, java.util.Map<String, String> __ctx)
    {
        setEmail(email, __ctx, true);
    }

    private void setEmail(String email, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setEmail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.setEmail(email, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setEmail(String email)
    {
        return begin_setEmail(email, null, false, null);
    }

    public Ice.AsyncResult begin_setEmail(String email, java.util.Map<String, String> __ctx)
    {
        return begin_setEmail(email, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setEmail(String email, Ice.Callback __cb)
    {
        return begin_setEmail(email, null, false, __cb);
    }

    public Ice.AsyncResult begin_setEmail(String email, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setEmail(email, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setEmail(String email, Callback_UserTyp_setEmail __cb)
    {
        return begin_setEmail(email, null, false, __cb);
    }

    public Ice.AsyncResult begin_setEmail(String email, java.util.Map<String, String> __ctx, Callback_UserTyp_setEmail __cb)
    {
        return begin_setEmail(email, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setEmail(String email, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setEmail_name, __cb);
        try
        {
            __result.__prepare(__setEmail_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(email);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setEmail(Ice.AsyncResult __result)
    {
        __end(__result, __setEmail_name);
    }

    private static final String __setName_name = "setName";

    public void setName(String name)
    {
        setName(name, null, false);
    }

    public void setName(String name, java.util.Map<String, String> __ctx)
    {
        setName(name, __ctx, true);
    }

    private void setName(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setName", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.setName(name, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setName(String name)
    {
        return begin_setName(name, null, false, null);
    }

    public Ice.AsyncResult begin_setName(String name, java.util.Map<String, String> __ctx)
    {
        return begin_setName(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setName(String name, Ice.Callback __cb)
    {
        return begin_setName(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_setName(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setName(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setName(String name, Callback_UserTyp_setName __cb)
    {
        return begin_setName(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_setName(String name, java.util.Map<String, String> __ctx, Callback_UserTyp_setName __cb)
    {
        return begin_setName(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setName(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setName_name, __cb);
        try
        {
            __result.__prepare(__setName_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setName(Ice.AsyncResult __result)
    {
        __end(__result, __setName_name);
    }

    private static final String __setReputation_name = "setReputation";

    public void setReputation(int reputation)
    {
        setReputation(reputation, null, false);
    }

    public void setReputation(int reputation, java.util.Map<String, String> __ctx)
    {
        setReputation(reputation, __ctx, true);
    }

    private void setReputation(int reputation, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setReputation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.setReputation(reputation, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setReputation(int reputation)
    {
        return begin_setReputation(reputation, null, false, null);
    }

    public Ice.AsyncResult begin_setReputation(int reputation, java.util.Map<String, String> __ctx)
    {
        return begin_setReputation(reputation, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setReputation(int reputation, Ice.Callback __cb)
    {
        return begin_setReputation(reputation, null, false, __cb);
    }

    public Ice.AsyncResult begin_setReputation(int reputation, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setReputation(reputation, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setReputation(int reputation, Callback_UserTyp_setReputation __cb)
    {
        return begin_setReputation(reputation, null, false, __cb);
    }

    public Ice.AsyncResult begin_setReputation(int reputation, java.util.Map<String, String> __ctx, Callback_UserTyp_setReputation __cb)
    {
        return begin_setReputation(reputation, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setReputation(int reputation, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setReputation_name, __cb);
        try
        {
            __result.__prepare(__setReputation_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(reputation);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setReputation(Ice.AsyncResult __result)
    {
        __end(__result, __setReputation_name);
    }

    private static final String __setSurname_name = "setSurname";

    public void setSurname(String surname)
    {
        setSurname(surname, null, false);
    }

    public void setSurname(String surname, java.util.Map<String, String> __ctx)
    {
        setSurname(surname, __ctx, true);
    }

    private void setSurname(String surname, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setSurname", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.setSurname(surname, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setSurname(String surname)
    {
        return begin_setSurname(surname, null, false, null);
    }

    public Ice.AsyncResult begin_setSurname(String surname, java.util.Map<String, String> __ctx)
    {
        return begin_setSurname(surname, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setSurname(String surname, Ice.Callback __cb)
    {
        return begin_setSurname(surname, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSurname(String surname, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSurname(surname, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setSurname(String surname, Callback_UserTyp_setSurname __cb)
    {
        return begin_setSurname(surname, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSurname(String surname, java.util.Map<String, String> __ctx, Callback_UserTyp_setSurname __cb)
    {
        return begin_setSurname(surname, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSurname(String surname, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSurname_name, __cb);
        try
        {
            __result.__prepare(__setSurname_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(surname);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setSurname(Ice.AsyncResult __result)
    {
        __end(__result, __setSurname_name);
    }

    private static final String __setTelephone_name = "setTelephone";

    public void setTelephone(int telephone)
    {
        setTelephone(telephone, null, false);
    }

    public void setTelephone(int telephone, java.util.Map<String, String> __ctx)
    {
        setTelephone(telephone, __ctx, true);
    }

    private void setTelephone(int telephone, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTelephone", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.setTelephone(telephone, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTelephone(int telephone)
    {
        return begin_setTelephone(telephone, null, false, null);
    }

    public Ice.AsyncResult begin_setTelephone(int telephone, java.util.Map<String, String> __ctx)
    {
        return begin_setTelephone(telephone, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTelephone(int telephone, Ice.Callback __cb)
    {
        return begin_setTelephone(telephone, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTelephone(int telephone, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTelephone(telephone, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTelephone(int telephone, Callback_UserTyp_setTelephone __cb)
    {
        return begin_setTelephone(telephone, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTelephone(int telephone, java.util.Map<String, String> __ctx, Callback_UserTyp_setTelephone __cb)
    {
        return begin_setTelephone(telephone, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTelephone(int telephone, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTelephone_name, __cb);
        try
        {
            __result.__prepare(__setTelephone_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(telephone);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTelephone(Ice.AsyncResult __result)
    {
        __end(__result, __setTelephone_name);
    }

    private static final String __setUserCars_name = "setUserCars";

    public void setUserCars(java.util.List<CarTypPrx> cars)
    {
        setUserCars(cars, null, false);
    }

    public void setUserCars(java.util.List<CarTypPrx> cars, java.util.Map<String, String> __ctx)
    {
        setUserCars(cars, __ctx, true);
    }

    private void setUserCars(java.util.List<CarTypPrx> cars, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setUserCars", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.setUserCars(cars, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setUserCars(java.util.List<CarTypPrx> cars)
    {
        return begin_setUserCars(cars, null, false, null);
    }

    public Ice.AsyncResult begin_setUserCars(java.util.List<CarTypPrx> cars, java.util.Map<String, String> __ctx)
    {
        return begin_setUserCars(cars, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setUserCars(java.util.List<CarTypPrx> cars, Ice.Callback __cb)
    {
        return begin_setUserCars(cars, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUserCars(java.util.List<CarTypPrx> cars, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setUserCars(cars, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setUserCars(java.util.List<CarTypPrx> cars, Callback_UserTyp_setUserCars __cb)
    {
        return begin_setUserCars(cars, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUserCars(java.util.List<CarTypPrx> cars, java.util.Map<String, String> __ctx, Callback_UserTyp_setUserCars __cb)
    {
        return begin_setUserCars(cars, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setUserCars(java.util.List<CarTypPrx> cars, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setUserCars_name, __cb);
        try
        {
            __result.__prepare(__setUserCars_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            CarCollectionHelper.write(__os, cars);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setUserCars(Ice.AsyncResult __result)
    {
        __end(__result, __setUserCars_name);
    }

    private static final String __setUserHome_name = "setUserHome";

    public void setUserHome(PlaceTyp home)
    {
        setUserHome(home, null, false);
    }

    public void setUserHome(PlaceTyp home, java.util.Map<String, String> __ctx)
    {
        setUserHome(home, __ctx, true);
    }

    private void setUserHome(PlaceTyp home, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setUserHome", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    __del.setUserHome(home, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setUserHome(PlaceTyp home)
    {
        return begin_setUserHome(home, null, false, null);
    }

    public Ice.AsyncResult begin_setUserHome(PlaceTyp home, java.util.Map<String, String> __ctx)
    {
        return begin_setUserHome(home, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setUserHome(PlaceTyp home, Ice.Callback __cb)
    {
        return begin_setUserHome(home, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUserHome(PlaceTyp home, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setUserHome(home, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setUserHome(PlaceTyp home, Callback_UserTyp_setUserHome __cb)
    {
        return begin_setUserHome(home, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUserHome(PlaceTyp home, java.util.Map<String, String> __ctx, Callback_UserTyp_setUserHome __cb)
    {
        return begin_setUserHome(home, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setUserHome(PlaceTyp home, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setUserHome_name, __cb);
        try
        {
            __result.__prepare(__setUserHome_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(home);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setUserHome(Ice.AsyncResult __result)
    {
        __end(__result, __setUserHome_name);
    }

    private static final String __toString_name = "toString";

    public String _toString()
    {
        return _toString(null, false);
    }

    public String _toString(java.util.Map<String, String> __ctx)
    {
        return _toString(__ctx, true);
    }

    private String _toString(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "_toString", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("_toString");
                    __delBase = __getDelegate(false);
                    _UserTypDel __del = (_UserTypDel)__delBase;
                    return __del._toString(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_toString()
    {
        return begin_toString(null, false, null);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx)
    {
        return begin_toString(__ctx, true, null);
    }

    public Ice.AsyncResult begin_toString(Ice.Callback __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_toString(Callback_UserTyp_toString __cb)
    {
        return begin_toString(null, false, __cb);
    }

    public Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, Callback_UserTyp_toString __cb)
    {
        return begin_toString(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_toString(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__toString_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __toString_name, __cb);
        try
        {
            __result.__prepare(__toString_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_toString(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __toString_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static UserTypPrx checkedCast(Ice.ObjectPrx __obj)
    {
        UserTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof UserTypPrx)
            {
                __d = (UserTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    UserTypPrxHelper __h = new UserTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static UserTypPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        UserTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof UserTypPrx)
            {
                __d = (UserTypPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    UserTypPrxHelper __h = new UserTypPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static UserTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        UserTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    UserTypPrxHelper __h = new UserTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static UserTypPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        UserTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    UserTypPrxHelper __h = new UserTypPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static UserTypPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        UserTypPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof UserTypPrx)
            {
                __d = (UserTypPrx)__obj;
            }
            else
            {
                UserTypPrxHelper __h = new UserTypPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static UserTypPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        UserTypPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            UserTypPrxHelper __h = new UserTypPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::data::zerocice::UserTyp"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _UserTypDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _UserTypDelD();
    }

    public static void __write(IceInternal.BasicStream __os, UserTypPrx v)
    {
        __os.writeProxy(v);
    }

    public static UserTypPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            UserTypPrxHelper result = new UserTypPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
