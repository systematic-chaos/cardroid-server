// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Cardroid.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.zerocice;

public final class CardroidManagerPrxHelper extends Ice.ObjectPrxHelperBase implements CardroidManagerPrx
{
    private static final String __addCar_name = "addCar";

    public uclm.esi.cardroid.data.zerocice.CarTypPrx addCar(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr)
    {
        return addCar(car, usr, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx addCar(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx)
    {
        return addCar(car, usr, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.CarTypPrx addCar(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addCar", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addCar");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.addCar(car, usr, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addCar(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr)
    {
        return begin_addCar(car, usr, null, false, null);
    }

    public Ice.AsyncResult begin_addCar(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx)
    {
        return begin_addCar(car, usr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addCar(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, Ice.Callback __cb)
    {
        return begin_addCar(car, usr, null, false, __cb);
    }

    public Ice.AsyncResult begin_addCar(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addCar(car, usr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addCar(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, Callback_CardroidManager_addCar __cb)
    {
        return begin_addCar(car, usr, null, false, __cb);
    }

    public Ice.AsyncResult begin_addCar(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx, Callback_CardroidManager_addCar __cb)
    {
        return begin_addCar(car, usr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addCar(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addCar_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addCar_name, __cb);
        try
        {
            __result.__prepare(__addCar_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(car);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx end_addCar(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addCar_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.CarTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.CarTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __addCarEmail_name = "addCarEmail";

    public uclm.esi.cardroid.data.zerocice.CarTypPrx addCarEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail)
    {
        return addCarEmail(car, usrEmail, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx addCarEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx)
    {
        return addCarEmail(car, usrEmail, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.CarTypPrx addCarEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addCarEmail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addCarEmail");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.addCarEmail(car, usrEmail, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addCarEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail)
    {
        return begin_addCarEmail(car, usrEmail, null, false, null);
    }

    public Ice.AsyncResult begin_addCarEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx)
    {
        return begin_addCarEmail(car, usrEmail, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addCarEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, Ice.Callback __cb)
    {
        return begin_addCarEmail(car, usrEmail, null, false, __cb);
    }

    public Ice.AsyncResult begin_addCarEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addCarEmail(car, usrEmail, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addCarEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, Callback_CardroidManager_addCarEmail __cb)
    {
        return begin_addCarEmail(car, usrEmail, null, false, __cb);
    }

    public Ice.AsyncResult begin_addCarEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx, Callback_CardroidManager_addCarEmail __cb)
    {
        return begin_addCarEmail(car, usrEmail, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addCarEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addCarEmail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addCarEmail_name, __cb);
        try
        {
            __result.__prepare(__addCarEmail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(car);
            __os.writeString(usrEmail);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx end_addCarEmail(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addCarEmail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.CarTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.CarTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __calculatePriceEstimation_name = "calculatePriceEstimation";

    public double calculatePriceEstimation(uclm.esi.cardroid.data.zerocice.Fuel f, int distance)
    {
        return calculatePriceEstimation(f, distance, null, false);
    }

    public double calculatePriceEstimation(uclm.esi.cardroid.data.zerocice.Fuel f, int distance, java.util.Map<String, String> __ctx)
    {
        return calculatePriceEstimation(f, distance, __ctx, true);
    }

    private double calculatePriceEstimation(uclm.esi.cardroid.data.zerocice.Fuel f, int distance, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "calculatePriceEstimation", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("calculatePriceEstimation");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.calculatePriceEstimation(f, distance, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_calculatePriceEstimation(uclm.esi.cardroid.data.zerocice.Fuel f, int distance)
    {
        return begin_calculatePriceEstimation(f, distance, null, false, null);
    }

    public Ice.AsyncResult begin_calculatePriceEstimation(uclm.esi.cardroid.data.zerocice.Fuel f, int distance, java.util.Map<String, String> __ctx)
    {
        return begin_calculatePriceEstimation(f, distance, __ctx, true, null);
    }

    public Ice.AsyncResult begin_calculatePriceEstimation(uclm.esi.cardroid.data.zerocice.Fuel f, int distance, Ice.Callback __cb)
    {
        return begin_calculatePriceEstimation(f, distance, null, false, __cb);
    }

    public Ice.AsyncResult begin_calculatePriceEstimation(uclm.esi.cardroid.data.zerocice.Fuel f, int distance, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_calculatePriceEstimation(f, distance, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_calculatePriceEstimation(uclm.esi.cardroid.data.zerocice.Fuel f, int distance, Callback_CardroidManager_calculatePriceEstimation __cb)
    {
        return begin_calculatePriceEstimation(f, distance, null, false, __cb);
    }

    public Ice.AsyncResult begin_calculatePriceEstimation(uclm.esi.cardroid.data.zerocice.Fuel f, int distance, java.util.Map<String, String> __ctx, Callback_CardroidManager_calculatePriceEstimation __cb)
    {
        return begin_calculatePriceEstimation(f, distance, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_calculatePriceEstimation(uclm.esi.cardroid.data.zerocice.Fuel f, int distance, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__calculatePriceEstimation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __calculatePriceEstimation_name, __cb);
        try
        {
            __result.__prepare(__calculatePriceEstimation_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            f.__write(__os);
            __os.writeInt(distance);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_calculatePriceEstimation(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __calculatePriceEstimation_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getCarFromPlate_name = "getCarFromPlate";

    public uclm.esi.cardroid.data.zerocice.CarTypPrx getCarFromPlate(String plate, uclm.esi.cardroid.data.zerocice.UserTypPrx owner)
    {
        return getCarFromPlate(plate, owner, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx getCarFromPlate(String plate, uclm.esi.cardroid.data.zerocice.UserTypPrx owner, java.util.Map<String, String> __ctx)
    {
        return getCarFromPlate(plate, owner, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.CarTypPrx getCarFromPlate(String plate, uclm.esi.cardroid.data.zerocice.UserTypPrx owner, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCarFromPlate", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCarFromPlate");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.getCarFromPlate(plate, owner, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCarFromPlate(String plate, uclm.esi.cardroid.data.zerocice.UserTypPrx owner)
    {
        return begin_getCarFromPlate(plate, owner, null, false, null);
    }

    public Ice.AsyncResult begin_getCarFromPlate(String plate, uclm.esi.cardroid.data.zerocice.UserTypPrx owner, java.util.Map<String, String> __ctx)
    {
        return begin_getCarFromPlate(plate, owner, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getCarFromPlate(String plate, uclm.esi.cardroid.data.zerocice.UserTypPrx owner, Ice.Callback __cb)
    {
        return begin_getCarFromPlate(plate, owner, null, false, __cb);
    }

    public Ice.AsyncResult begin_getCarFromPlate(String plate, uclm.esi.cardroid.data.zerocice.UserTypPrx owner, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCarFromPlate(plate, owner, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCarFromPlate(String plate, uclm.esi.cardroid.data.zerocice.UserTypPrx owner, Callback_CardroidManager_getCarFromPlate __cb)
    {
        return begin_getCarFromPlate(plate, owner, null, false, __cb);
    }

    public Ice.AsyncResult begin_getCarFromPlate(String plate, uclm.esi.cardroid.data.zerocice.UserTypPrx owner, java.util.Map<String, String> __ctx, Callback_CardroidManager_getCarFromPlate __cb)
    {
        return begin_getCarFromPlate(plate, owner, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCarFromPlate(String plate, uclm.esi.cardroid.data.zerocice.UserTypPrx owner, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCarFromPlate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCarFromPlate_name, __cb);
        try
        {
            __result.__prepare(__getCarFromPlate_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(plate);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, owner);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx end_getCarFromPlate(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCarFromPlate_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.CarTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.CarTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getCarFromPlateEmail_name = "getCarFromPlateEmail";

    public uclm.esi.cardroid.data.zerocice.CarTypPrx getCarFromPlateEmail(String plate, String ownerEmail)
    {
        return getCarFromPlateEmail(plate, ownerEmail, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx getCarFromPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx)
    {
        return getCarFromPlateEmail(plate, ownerEmail, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.CarTypPrx getCarFromPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCarFromPlateEmail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCarFromPlateEmail");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.getCarFromPlateEmail(plate, ownerEmail, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCarFromPlateEmail(String plate, String ownerEmail)
    {
        return begin_getCarFromPlateEmail(plate, ownerEmail, null, false, null);
    }

    public Ice.AsyncResult begin_getCarFromPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx)
    {
        return begin_getCarFromPlateEmail(plate, ownerEmail, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getCarFromPlateEmail(String plate, String ownerEmail, Ice.Callback __cb)
    {
        return begin_getCarFromPlateEmail(plate, ownerEmail, null, false, __cb);
    }

    public Ice.AsyncResult begin_getCarFromPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCarFromPlateEmail(plate, ownerEmail, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCarFromPlateEmail(String plate, String ownerEmail, Callback_CardroidManager_getCarFromPlateEmail __cb)
    {
        return begin_getCarFromPlateEmail(plate, ownerEmail, null, false, __cb);
    }

    public Ice.AsyncResult begin_getCarFromPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx, Callback_CardroidManager_getCarFromPlateEmail __cb)
    {
        return begin_getCarFromPlateEmail(plate, ownerEmail, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCarFromPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCarFromPlateEmail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCarFromPlateEmail_name, __cb);
        try
        {
            __result.__prepare(__getCarFromPlateEmail_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(plate);
            __os.writeString(ownerEmail);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx end_getCarFromPlateEmail(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCarFromPlateEmail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.CarTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.CarTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getMessageTalks_name = "getMessageTalks";

    public void getMessageTalks(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result)
    {
        getMessageTalks(usr1, usr2, n, first, nrows, result, null, false);
    }

    public void getMessageTalks(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx)
    {
        getMessageTalks(usr1, usr2, n, first, nrows, result, __ctx, true);
    }

    private void getMessageTalks(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMessageTalks", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMessageTalks");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    __del.getMessageTalks(usr1, usr2, n, first, nrows, result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMessageTalks(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, int n)
    {
        return begin_getMessageTalks(usr1, usr2, n, null, false, null);
    }

    public Ice.AsyncResult begin_getMessageTalks(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, int n, java.util.Map<String, String> __ctx)
    {
        return begin_getMessageTalks(usr1, usr2, n, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMessageTalks(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, int n, Ice.Callback __cb)
    {
        return begin_getMessageTalks(usr1, usr2, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessageTalks(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMessageTalks(usr1, usr2, n, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMessageTalks(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, int n, Callback_CardroidManager_getMessageTalks __cb)
    {
        return begin_getMessageTalks(usr1, usr2, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessageTalks(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, int n, java.util.Map<String, String> __ctx, Callback_CardroidManager_getMessageTalks __cb)
    {
        return begin_getMessageTalks(usr1, usr2, n, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMessageTalks(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMessageTalks_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMessageTalks_name, __cb);
        try
        {
            __result.__prepare(__getMessageTalks_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr1);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr2);
            __os.writeInt(n);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_getMessageTalks(uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getMessageTalks_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            first.value = uclm.esi.cardroid.ResultSeqHelper.read(__is);
            nrows.value = __is.readInt();
            result.value = uclm.esi.cardroid.QueryResultPrxHelper.__read(__is);
            __result.__endReadParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getMessageTalksSpeakers_name = "getMessageTalksSpeakers";

    public void getMessageTalksSpeakers(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result)
    {
        getMessageTalksSpeakers(usr, n, first, nrows, result, null, false);
    }

    public void getMessageTalksSpeakers(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx)
    {
        getMessageTalksSpeakers(usr, n, first, nrows, result, __ctx, true);
    }

    private void getMessageTalksSpeakers(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMessageTalksSpeakers", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMessageTalksSpeakers");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    __del.getMessageTalksSpeakers(usr, n, first, nrows, result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMessageTalksSpeakers(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n)
    {
        return begin_getMessageTalksSpeakers(usr, n, null, false, null);
    }

    public Ice.AsyncResult begin_getMessageTalksSpeakers(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx)
    {
        return begin_getMessageTalksSpeakers(usr, n, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMessageTalksSpeakers(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, Ice.Callback __cb)
    {
        return begin_getMessageTalksSpeakers(usr, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessageTalksSpeakers(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMessageTalksSpeakers(usr, n, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMessageTalksSpeakers(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, Callback_CardroidManager_getMessageTalksSpeakers __cb)
    {
        return begin_getMessageTalksSpeakers(usr, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessageTalksSpeakers(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, Callback_CardroidManager_getMessageTalksSpeakers __cb)
    {
        return begin_getMessageTalksSpeakers(usr, n, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMessageTalksSpeakers(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMessageTalksSpeakers_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMessageTalksSpeakers_name, __cb);
        try
        {
            __result.__prepare(__getMessageTalksSpeakers_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr);
            __os.writeInt(n);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_getMessageTalksSpeakers(uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getMessageTalksSpeakers_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            first.value = uclm.esi.cardroid.ResultSeqHelper.read(__is);
            nrows.value = __is.readInt();
            result.value = uclm.esi.cardroid.QueryResultPrxHelper.__read(__is);
            __result.__endReadParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPassengerTrips_name = "getPassengerTrips";

    public void getPassengerTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result)
    {
        getPassengerTrips(passenger, n, first, nrows, result, null, false);
    }

    public void getPassengerTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx)
    {
        getPassengerTrips(passenger, n, first, nrows, result, __ctx, true);
    }

    private void getPassengerTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPassengerTrips", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPassengerTrips");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    __del.getPassengerTrips(passenger, n, first, nrows, result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPassengerTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int n)
    {
        return begin_getPassengerTrips(passenger, n, null, false, null);
    }

    public Ice.AsyncResult begin_getPassengerTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int n, java.util.Map<String, String> __ctx)
    {
        return begin_getPassengerTrips(passenger, n, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getPassengerTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int n, Ice.Callback __cb)
    {
        return begin_getPassengerTrips(passenger, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getPassengerTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPassengerTrips(passenger, n, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPassengerTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int n, Callback_CardroidManager_getPassengerTrips __cb)
    {
        return begin_getPassengerTrips(passenger, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getPassengerTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int n, java.util.Map<String, String> __ctx, Callback_CardroidManager_getPassengerTrips __cb)
    {
        return begin_getPassengerTrips(passenger, n, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPassengerTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPassengerTrips_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPassengerTrips_name, __cb);
        try
        {
            __result.__prepare(__getPassengerTrips_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, passenger);
            __os.writeInt(n);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_getPassengerTrips(uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPassengerTrips_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            first.value = uclm.esi.cardroid.ResultSeqHelper.read(__is);
            nrows.value = __is.readInt();
            result.value = uclm.esi.cardroid.QueryResultPrxHelper.__read(__is);
            __result.__endReadParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripFromId_name = "getTripFromId";

    public uclm.esi.cardroid.data.zerocice.TripTypPrx getTripFromId(int tripId)
    {
        return getTripFromId(tripId, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.TripTypPrx getTripFromId(int tripId, java.util.Map<String, String> __ctx)
    {
        return getTripFromId(tripId, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.TripTypPrx getTripFromId(int tripId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripFromId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripFromId");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.getTripFromId(tripId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripFromId(int tripId)
    {
        return begin_getTripFromId(tripId, null, false, null);
    }

    public Ice.AsyncResult begin_getTripFromId(int tripId, java.util.Map<String, String> __ctx)
    {
        return begin_getTripFromId(tripId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripFromId(int tripId, Ice.Callback __cb)
    {
        return begin_getTripFromId(tripId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripFromId(int tripId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripFromId(tripId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripFromId(int tripId, Callback_CardroidManager_getTripFromId __cb)
    {
        return begin_getTripFromId(tripId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripFromId(int tripId, java.util.Map<String, String> __ctx, Callback_CardroidManager_getTripFromId __cb)
    {
        return begin_getTripFromId(tripId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripFromId(int tripId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripFromId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripFromId_name, __cb);
        try
        {
            __result.__prepare(__getTripFromId_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(tripId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.TripTypPrx end_getTripFromId(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripFromId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.TripTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.TripTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripOfferFromId_name = "getTripOfferFromId";

    public uclm.esi.cardroid.data.zerocice.TripOfferTypPrx getTripOfferFromId(int tripId)
    {
        return getTripOfferFromId(tripId, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.TripOfferTypPrx getTripOfferFromId(int tripId, java.util.Map<String, String> __ctx)
    {
        return getTripOfferFromId(tripId, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.TripOfferTypPrx getTripOfferFromId(int tripId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripOfferFromId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripOfferFromId");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.getTripOfferFromId(tripId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripOfferFromId(int tripId)
    {
        return begin_getTripOfferFromId(tripId, null, false, null);
    }

    public Ice.AsyncResult begin_getTripOfferFromId(int tripId, java.util.Map<String, String> __ctx)
    {
        return begin_getTripOfferFromId(tripId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripOfferFromId(int tripId, Ice.Callback __cb)
    {
        return begin_getTripOfferFromId(tripId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripOfferFromId(int tripId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripOfferFromId(tripId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripOfferFromId(int tripId, Callback_CardroidManager_getTripOfferFromId __cb)
    {
        return begin_getTripOfferFromId(tripId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripOfferFromId(int tripId, java.util.Map<String, String> __ctx, Callback_CardroidManager_getTripOfferFromId __cb)
    {
        return begin_getTripOfferFromId(tripId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripOfferFromId(int tripId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripOfferFromId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripOfferFromId_name, __cb);
        try
        {
            __result.__prepare(__getTripOfferFromId_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(tripId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.TripOfferTypPrx end_getTripOfferFromId(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripOfferFromId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.TripOfferTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.TripOfferTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTripRequestFromId_name = "getTripRequestFromId";

    public uclm.esi.cardroid.data.zerocice.TripRequestTypPrx getTripRequestFromId(int tripId)
    {
        return getTripRequestFromId(tripId, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.TripRequestTypPrx getTripRequestFromId(int tripId, java.util.Map<String, String> __ctx)
    {
        return getTripRequestFromId(tripId, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.TripRequestTypPrx getTripRequestFromId(int tripId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTripRequestFromId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTripRequestFromId");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.getTripRequestFromId(tripId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTripRequestFromId(int tripId)
    {
        return begin_getTripRequestFromId(tripId, null, false, null);
    }

    public Ice.AsyncResult begin_getTripRequestFromId(int tripId, java.util.Map<String, String> __ctx)
    {
        return begin_getTripRequestFromId(tripId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTripRequestFromId(int tripId, Ice.Callback __cb)
    {
        return begin_getTripRequestFromId(tripId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripRequestFromId(int tripId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTripRequestFromId(tripId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTripRequestFromId(int tripId, Callback_CardroidManager_getTripRequestFromId __cb)
    {
        return begin_getTripRequestFromId(tripId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTripRequestFromId(int tripId, java.util.Map<String, String> __ctx, Callback_CardroidManager_getTripRequestFromId __cb)
    {
        return begin_getTripRequestFromId(tripId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTripRequestFromId(int tripId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTripRequestFromId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTripRequestFromId_name, __cb);
        try
        {
            __result.__prepare(__getTripRequestFromId_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(tripId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.TripRequestTypPrx end_getTripRequestFromId(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTripRequestFromId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.TripRequestTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.TripRequestTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getUserActivity_name = "getUserActivity";

    public void getUserActivity(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result)
    {
        getUserActivity(usr, n, first, nrows, result, null, false);
    }

    public void getUserActivity(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx)
    {
        getUserActivity(usr, n, first, nrows, result, __ctx, true);
    }

    private void getUserActivity(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getUserActivity", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getUserActivity");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    __del.getUserActivity(usr, n, first, nrows, result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getUserActivity(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n)
    {
        return begin_getUserActivity(usr, n, null, false, null);
    }

    public Ice.AsyncResult begin_getUserActivity(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx)
    {
        return begin_getUserActivity(usr, n, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getUserActivity(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, Ice.Callback __cb)
    {
        return begin_getUserActivity(usr, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserActivity(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUserActivity(usr, n, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUserActivity(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, Callback_CardroidManager_getUserActivity __cb)
    {
        return begin_getUserActivity(usr, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserActivity(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, Callback_CardroidManager_getUserActivity __cb)
    {
        return begin_getUserActivity(usr, n, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUserActivity(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUserActivity_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUserActivity_name, __cb);
        try
        {
            __result.__prepare(__getUserActivity_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr);
            __os.writeInt(n);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_getUserActivity(uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUserActivity_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            first.value = uclm.esi.cardroid.ResultSeqHelper.read(__is);
            nrows.value = __is.readInt();
            result.value = uclm.esi.cardroid.QueryResultPrxHelper.__read(__is);
            __result.__endReadParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getUserFromEmail_name = "getUserFromEmail";

    public uclm.esi.cardroid.data.zerocice.UserTypPrx getUserFromEmail(String email)
    {
        return getUserFromEmail(email, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.UserTypPrx getUserFromEmail(String email, java.util.Map<String, String> __ctx)
    {
        return getUserFromEmail(email, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.UserTypPrx getUserFromEmail(String email, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getUserFromEmail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getUserFromEmail");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.getUserFromEmail(email, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getUserFromEmail(String email)
    {
        return begin_getUserFromEmail(email, null, false, null);
    }

    public Ice.AsyncResult begin_getUserFromEmail(String email, java.util.Map<String, String> __ctx)
    {
        return begin_getUserFromEmail(email, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getUserFromEmail(String email, Ice.Callback __cb)
    {
        return begin_getUserFromEmail(email, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserFromEmail(String email, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUserFromEmail(email, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUserFromEmail(String email, Callback_CardroidManager_getUserFromEmail __cb)
    {
        return begin_getUserFromEmail(email, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserFromEmail(String email, java.util.Map<String, String> __ctx, Callback_CardroidManager_getUserFromEmail __cb)
    {
        return begin_getUserFromEmail(email, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUserFromEmail(String email, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUserFromEmail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUserFromEmail_name, __cb);
        try
        {
            __result.__prepare(__getUserFromEmail_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(email);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.UserTypPrx end_getUserFromEmail(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUserFromEmail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.UserTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getUserPlaces_name = "getUserPlaces";

    public void getUserPlaces(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result)
    {
        getUserPlaces(usr, n, first, nrows, result, null, false);
    }

    public void getUserPlaces(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx)
    {
        getUserPlaces(usr, n, first, nrows, result, __ctx, true);
    }

    private void getUserPlaces(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getUserPlaces", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getUserPlaces");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    __del.getUserPlaces(usr, n, first, nrows, result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getUserPlaces(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n)
    {
        return begin_getUserPlaces(usr, n, null, false, null);
    }

    public Ice.AsyncResult begin_getUserPlaces(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx)
    {
        return begin_getUserPlaces(usr, n, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getUserPlaces(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, Ice.Callback __cb)
    {
        return begin_getUserPlaces(usr, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserPlaces(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUserPlaces(usr, n, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUserPlaces(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, Callback_CardroidManager_getUserPlaces __cb)
    {
        return begin_getUserPlaces(usr, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserPlaces(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, Callback_CardroidManager_getUserPlaces __cb)
    {
        return begin_getUserPlaces(usr, n, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUserPlaces(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUserPlaces_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUserPlaces_name, __cb);
        try
        {
            __result.__prepare(__getUserPlaces_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr);
            __os.writeInt(n);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_getUserPlaces(uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUserPlaces_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            first.value = uclm.esi.cardroid.ResultSeqHelper.read(__is);
            nrows.value = __is.readInt();
            result.value = uclm.esi.cardroid.QueryResultPrxHelper.__read(__is);
            __result.__endReadParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getUserTrips_name = "getUserTrips";

    public void getUserTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result)
    {
        getUserTrips(usr, n, first, nrows, result, null, false);
    }

    public void getUserTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx)
    {
        getUserTrips(usr, n, first, nrows, result, __ctx, true);
    }

    private void getUserTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getUserTrips", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getUserTrips");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    __del.getUserTrips(usr, n, first, nrows, result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getUserTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n)
    {
        return begin_getUserTrips(usr, n, null, false, null);
    }

    public Ice.AsyncResult begin_getUserTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx)
    {
        return begin_getUserTrips(usr, n, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getUserTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, Ice.Callback __cb)
    {
        return begin_getUserTrips(usr, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUserTrips(usr, n, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUserTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, Callback_CardroidManager_getUserTrips __cb)
    {
        return begin_getUserTrips(usr, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, Callback_CardroidManager_getUserTrips __cb)
    {
        return begin_getUserTrips(usr, n, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUserTrips(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUserTrips_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUserTrips_name, __cb);
        try
        {
            __result.__prepare(__getUserTrips_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr);
            __os.writeInt(n);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_getUserTrips(uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUserTrips_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            first.value = uclm.esi.cardroid.ResultSeqHelper.read(__is);
            nrows.value = __is.readInt();
            result.value = uclm.esi.cardroid.QueryResultPrxHelper.__read(__is);
            __result.__endReadParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __joinTrip_name = "joinTrip";

    public void joinTrip(uclm.esi.cardroid.data.zerocice.TripOfferTypPrx trip, uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int nSeats)
    {
        joinTrip(trip, passenger, nSeats, null, false);
    }

    public void joinTrip(uclm.esi.cardroid.data.zerocice.TripOfferTypPrx trip, uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int nSeats, java.util.Map<String, String> __ctx)
    {
        joinTrip(trip, passenger, nSeats, __ctx, true);
    }

    private void joinTrip(uclm.esi.cardroid.data.zerocice.TripOfferTypPrx trip, uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int nSeats, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "joinTrip", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    __del.joinTrip(trip, passenger, nSeats, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_joinTrip(uclm.esi.cardroid.data.zerocice.TripOfferTypPrx trip, uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int nSeats)
    {
        return begin_joinTrip(trip, passenger, nSeats, null, false, null);
    }

    public Ice.AsyncResult begin_joinTrip(uclm.esi.cardroid.data.zerocice.TripOfferTypPrx trip, uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int nSeats, java.util.Map<String, String> __ctx)
    {
        return begin_joinTrip(trip, passenger, nSeats, __ctx, true, null);
    }

    public Ice.AsyncResult begin_joinTrip(uclm.esi.cardroid.data.zerocice.TripOfferTypPrx trip, uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int nSeats, Ice.Callback __cb)
    {
        return begin_joinTrip(trip, passenger, nSeats, null, false, __cb);
    }

    public Ice.AsyncResult begin_joinTrip(uclm.esi.cardroid.data.zerocice.TripOfferTypPrx trip, uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int nSeats, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_joinTrip(trip, passenger, nSeats, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_joinTrip(uclm.esi.cardroid.data.zerocice.TripOfferTypPrx trip, uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int nSeats, Callback_CardroidManager_joinTrip __cb)
    {
        return begin_joinTrip(trip, passenger, nSeats, null, false, __cb);
    }

    public Ice.AsyncResult begin_joinTrip(uclm.esi.cardroid.data.zerocice.TripOfferTypPrx trip, uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int nSeats, java.util.Map<String, String> __ctx, Callback_CardroidManager_joinTrip __cb)
    {
        return begin_joinTrip(trip, passenger, nSeats, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_joinTrip(uclm.esi.cardroid.data.zerocice.TripOfferTypPrx trip, uclm.esi.cardroid.data.zerocice.UserTypPrx passenger, int nSeats, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __joinTrip_name, __cb);
        try
        {
            __result.__prepare(__joinTrip_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.TripOfferTypPrxHelper.__write(__os, trip);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, passenger);
            __os.writeInt(nSeats);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_joinTrip(Ice.AsyncResult __result)
    {
        __end(__result, __joinTrip_name);
    }

    private static final String __newMessage_name = "newMessage";

    public uclm.esi.cardroid.data.zerocice.MessageTypPrx newMessage(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, String message)
    {
        return newMessage(usr1, usr2, message, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.MessageTypPrx newMessage(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, String message, java.util.Map<String, String> __ctx)
    {
        return newMessage(usr1, usr2, message, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.MessageTypPrx newMessage(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, String message, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "newMessage", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("newMessage");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.newMessage(usr1, usr2, message, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_newMessage(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, String message)
    {
        return begin_newMessage(usr1, usr2, message, null, false, null);
    }

    public Ice.AsyncResult begin_newMessage(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, String message, java.util.Map<String, String> __ctx)
    {
        return begin_newMessage(usr1, usr2, message, __ctx, true, null);
    }

    public Ice.AsyncResult begin_newMessage(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, String message, Ice.Callback __cb)
    {
        return begin_newMessage(usr1, usr2, message, null, false, __cb);
    }

    public Ice.AsyncResult begin_newMessage(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, String message, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_newMessage(usr1, usr2, message, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_newMessage(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, String message, Callback_CardroidManager_newMessage __cb)
    {
        return begin_newMessage(usr1, usr2, message, null, false, __cb);
    }

    public Ice.AsyncResult begin_newMessage(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, String message, java.util.Map<String, String> __ctx, Callback_CardroidManager_newMessage __cb)
    {
        return begin_newMessage(usr1, usr2, message, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_newMessage(uclm.esi.cardroid.data.zerocice.UserTypPrx usr1, uclm.esi.cardroid.data.zerocice.UserTypPrx usr2, String message, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__newMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __newMessage_name, __cb);
        try
        {
            __result.__prepare(__newMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr1);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr2);
            __os.writeString(message);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.MessageTypPrx end_newMessage(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __newMessage_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.MessageTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.MessageTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __newTripOffer_name = "newTripOffer";

    public uclm.esi.cardroid.data.zerocice.TripOfferTypPrx newTripOffer(uclm.esi.cardroid.data.zerocice.TripOfferTyp tOffer)
    {
        return newTripOffer(tOffer, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.TripOfferTypPrx newTripOffer(uclm.esi.cardroid.data.zerocice.TripOfferTyp tOffer, java.util.Map<String, String> __ctx)
    {
        return newTripOffer(tOffer, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.TripOfferTypPrx newTripOffer(uclm.esi.cardroid.data.zerocice.TripOfferTyp tOffer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "newTripOffer", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("newTripOffer");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.newTripOffer(tOffer, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_newTripOffer(uclm.esi.cardroid.data.zerocice.TripOfferTyp tOffer)
    {
        return begin_newTripOffer(tOffer, null, false, null);
    }

    public Ice.AsyncResult begin_newTripOffer(uclm.esi.cardroid.data.zerocice.TripOfferTyp tOffer, java.util.Map<String, String> __ctx)
    {
        return begin_newTripOffer(tOffer, __ctx, true, null);
    }

    public Ice.AsyncResult begin_newTripOffer(uclm.esi.cardroid.data.zerocice.TripOfferTyp tOffer, Ice.Callback __cb)
    {
        return begin_newTripOffer(tOffer, null, false, __cb);
    }

    public Ice.AsyncResult begin_newTripOffer(uclm.esi.cardroid.data.zerocice.TripOfferTyp tOffer, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_newTripOffer(tOffer, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_newTripOffer(uclm.esi.cardroid.data.zerocice.TripOfferTyp tOffer, Callback_CardroidManager_newTripOffer __cb)
    {
        return begin_newTripOffer(tOffer, null, false, __cb);
    }

    public Ice.AsyncResult begin_newTripOffer(uclm.esi.cardroid.data.zerocice.TripOfferTyp tOffer, java.util.Map<String, String> __ctx, Callback_CardroidManager_newTripOffer __cb)
    {
        return begin_newTripOffer(tOffer, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_newTripOffer(uclm.esi.cardroid.data.zerocice.TripOfferTyp tOffer, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__newTripOffer_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __newTripOffer_name, __cb);
        try
        {
            __result.__prepare(__newTripOffer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(tOffer);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.TripOfferTypPrx end_newTripOffer(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __newTripOffer_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.TripOfferTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.TripOfferTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __newTripRequest_name = "newTripRequest";

    public uclm.esi.cardroid.data.zerocice.TripRequestTypPrx newTripRequest(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest)
    {
        return newTripRequest(tRequest, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.TripRequestTypPrx newTripRequest(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, java.util.Map<String, String> __ctx)
    {
        return newTripRequest(tRequest, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.TripRequestTypPrx newTripRequest(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "newTripRequest", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("newTripRequest");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.newTripRequest(tRequest, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_newTripRequest(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest)
    {
        return begin_newTripRequest(tRequest, null, false, null);
    }

    public Ice.AsyncResult begin_newTripRequest(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, java.util.Map<String, String> __ctx)
    {
        return begin_newTripRequest(tRequest, __ctx, true, null);
    }

    public Ice.AsyncResult begin_newTripRequest(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, Ice.Callback __cb)
    {
        return begin_newTripRequest(tRequest, null, false, __cb);
    }

    public Ice.AsyncResult begin_newTripRequest(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_newTripRequest(tRequest, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_newTripRequest(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, Callback_CardroidManager_newTripRequest __cb)
    {
        return begin_newTripRequest(tRequest, null, false, __cb);
    }

    public Ice.AsyncResult begin_newTripRequest(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, java.util.Map<String, String> __ctx, Callback_CardroidManager_newTripRequest __cb)
    {
        return begin_newTripRequest(tRequest, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_newTripRequest(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__newTripRequest_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __newTripRequest_name, __cb);
        try
        {
            __result.__prepare(__newTripRequest_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(tRequest);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.TripRequestTypPrx end_newTripRequest(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __newTripRequest_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.TripRequestTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.TripRequestTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __organizeTrip_name = "organizeTrip";

    public uclm.esi.cardroid.data.zerocice.TripOfferTypPrx organizeTrip(uclm.esi.cardroid.data.zerocice.TripRequestTypPrx tripRequest, uclm.esi.cardroid.data.zerocice.TripOfferTyp tripOffer)
    {
        return organizeTrip(tripRequest, tripOffer, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.TripOfferTypPrx organizeTrip(uclm.esi.cardroid.data.zerocice.TripRequestTypPrx tripRequest, uclm.esi.cardroid.data.zerocice.TripOfferTyp tripOffer, java.util.Map<String, String> __ctx)
    {
        return organizeTrip(tripRequest, tripOffer, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.TripOfferTypPrx organizeTrip(uclm.esi.cardroid.data.zerocice.TripRequestTypPrx tripRequest, uclm.esi.cardroid.data.zerocice.TripOfferTyp tripOffer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "organizeTrip", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("organizeTrip");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.organizeTrip(tripRequest, tripOffer, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_organizeTrip(uclm.esi.cardroid.data.zerocice.TripRequestTypPrx tripRequest, uclm.esi.cardroid.data.zerocice.TripOfferTyp tripOffer)
    {
        return begin_organizeTrip(tripRequest, tripOffer, null, false, null);
    }

    public Ice.AsyncResult begin_organizeTrip(uclm.esi.cardroid.data.zerocice.TripRequestTypPrx tripRequest, uclm.esi.cardroid.data.zerocice.TripOfferTyp tripOffer, java.util.Map<String, String> __ctx)
    {
        return begin_organizeTrip(tripRequest, tripOffer, __ctx, true, null);
    }

    public Ice.AsyncResult begin_organizeTrip(uclm.esi.cardroid.data.zerocice.TripRequestTypPrx tripRequest, uclm.esi.cardroid.data.zerocice.TripOfferTyp tripOffer, Ice.Callback __cb)
    {
        return begin_organizeTrip(tripRequest, tripOffer, null, false, __cb);
    }

    public Ice.AsyncResult begin_organizeTrip(uclm.esi.cardroid.data.zerocice.TripRequestTypPrx tripRequest, uclm.esi.cardroid.data.zerocice.TripOfferTyp tripOffer, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_organizeTrip(tripRequest, tripOffer, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_organizeTrip(uclm.esi.cardroid.data.zerocice.TripRequestTypPrx tripRequest, uclm.esi.cardroid.data.zerocice.TripOfferTyp tripOffer, Callback_CardroidManager_organizeTrip __cb)
    {
        return begin_organizeTrip(tripRequest, tripOffer, null, false, __cb);
    }

    public Ice.AsyncResult begin_organizeTrip(uclm.esi.cardroid.data.zerocice.TripRequestTypPrx tripRequest, uclm.esi.cardroid.data.zerocice.TripOfferTyp tripOffer, java.util.Map<String, String> __ctx, Callback_CardroidManager_organizeTrip __cb)
    {
        return begin_organizeTrip(tripRequest, tripOffer, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_organizeTrip(uclm.esi.cardroid.data.zerocice.TripRequestTypPrx tripRequest, uclm.esi.cardroid.data.zerocice.TripOfferTyp tripOffer, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__organizeTrip_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __organizeTrip_name, __cb);
        try
        {
            __result.__prepare(__organizeTrip_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.TripRequestTypPrxHelper.__write(__os, tripRequest);
            __os.writeObject(tripOffer);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.TripOfferTypPrx end_organizeTrip(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __organizeTrip_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.TripOfferTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.TripOfferTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __removeCar_name = "removeCar";

    public void removeCar(uclm.esi.cardroid.data.zerocice.CarTypPrx car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr)
    {
        removeCar(car, usr, null, false);
    }

    public void removeCar(uclm.esi.cardroid.data.zerocice.CarTypPrx car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx)
    {
        removeCar(car, usr, __ctx, true);
    }

    private void removeCar(uclm.esi.cardroid.data.zerocice.CarTypPrx car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeCar", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    __del.removeCar(car, usr, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeCar(uclm.esi.cardroid.data.zerocice.CarTypPrx car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr)
    {
        return begin_removeCar(car, usr, null, false, null);
    }

    public Ice.AsyncResult begin_removeCar(uclm.esi.cardroid.data.zerocice.CarTypPrx car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx)
    {
        return begin_removeCar(car, usr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeCar(uclm.esi.cardroid.data.zerocice.CarTypPrx car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, Ice.Callback __cb)
    {
        return begin_removeCar(car, usr, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeCar(uclm.esi.cardroid.data.zerocice.CarTypPrx car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeCar(car, usr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeCar(uclm.esi.cardroid.data.zerocice.CarTypPrx car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, Callback_CardroidManager_removeCar __cb)
    {
        return begin_removeCar(car, usr, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeCar(uclm.esi.cardroid.data.zerocice.CarTypPrx car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx, Callback_CardroidManager_removeCar __cb)
    {
        return begin_removeCar(car, usr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeCar(uclm.esi.cardroid.data.zerocice.CarTypPrx car, uclm.esi.cardroid.data.zerocice.UserTypPrx usr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeCar_name, __cb);
        try
        {
            __result.__prepare(__removeCar_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.CarTypPrxHelper.__write(__os, car);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeCar(Ice.AsyncResult __result)
    {
        __end(__result, __removeCar_name);
    }

    private static final String __removeCarPlateEmail_name = "removeCarPlateEmail";

    public void removeCarPlateEmail(String plate, String ownerEmail)
    {
        removeCarPlateEmail(plate, ownerEmail, null, false);
    }

    public void removeCarPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx)
    {
        removeCarPlateEmail(plate, ownerEmail, __ctx, true);
    }

    private void removeCarPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeCarPlateEmail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    __del.removeCarPlateEmail(plate, ownerEmail, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeCarPlateEmail(String plate, String ownerEmail)
    {
        return begin_removeCarPlateEmail(plate, ownerEmail, null, false, null);
    }

    public Ice.AsyncResult begin_removeCarPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx)
    {
        return begin_removeCarPlateEmail(plate, ownerEmail, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeCarPlateEmail(String plate, String ownerEmail, Ice.Callback __cb)
    {
        return begin_removeCarPlateEmail(plate, ownerEmail, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeCarPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeCarPlateEmail(plate, ownerEmail, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeCarPlateEmail(String plate, String ownerEmail, Callback_CardroidManager_removeCarPlateEmail __cb)
    {
        return begin_removeCarPlateEmail(plate, ownerEmail, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeCarPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx, Callback_CardroidManager_removeCarPlateEmail __cb)
    {
        return begin_removeCarPlateEmail(plate, ownerEmail, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeCarPlateEmail(String plate, String ownerEmail, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeCarPlateEmail_name, __cb);
        try
        {
            __result.__prepare(__removeCarPlateEmail_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(plate);
            __os.writeString(ownerEmail);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeCarPlateEmail(Ice.AsyncResult __result)
    {
        __end(__result, __removeCarPlateEmail_name);
    }

    private static final String __searchTrips_name = "searchTrips";

    public void searchTrips(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result)
    {
        searchTrips(tRequest, n, first, nrows, result, null, false);
    }

    public void searchTrips(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx)
    {
        searchTrips(tRequest, n, first, nrows, result, __ctx, true);
    }

    private void searchTrips(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, int n, uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "searchTrips", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("searchTrips");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    __del.searchTrips(tRequest, n, first, nrows, result, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_searchTrips(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, int n)
    {
        return begin_searchTrips(tRequest, n, null, false, null);
    }

    public Ice.AsyncResult begin_searchTrips(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, int n, java.util.Map<String, String> __ctx)
    {
        return begin_searchTrips(tRequest, n, __ctx, true, null);
    }

    public Ice.AsyncResult begin_searchTrips(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, int n, Ice.Callback __cb)
    {
        return begin_searchTrips(tRequest, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_searchTrips(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_searchTrips(tRequest, n, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_searchTrips(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, int n, Callback_CardroidManager_searchTrips __cb)
    {
        return begin_searchTrips(tRequest, n, null, false, __cb);
    }

    public Ice.AsyncResult begin_searchTrips(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, int n, java.util.Map<String, String> __ctx, Callback_CardroidManager_searchTrips __cb)
    {
        return begin_searchTrips(tRequest, n, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_searchTrips(uclm.esi.cardroid.data.zerocice.TripRequestTyp tRequest, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__searchTrips_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __searchTrips_name, __cb);
        try
        {
            __result.__prepare(__searchTrips_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(tRequest);
            __os.writeInt(n);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_searchTrips(uclm.esi.cardroid.ResultSeqHolder first, Ice.IntHolder nrows, uclm.esi.cardroid.QueryResultPrxHolder result, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __searchTrips_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            first.value = uclm.esi.cardroid.ResultSeqHelper.read(__is);
            nrows.value = __is.readInt();
            result.value = uclm.esi.cardroid.QueryResultPrxHelper.__read(__is);
            __result.__endReadParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __updateCarData_name = "updateCarData";

    public uclm.esi.cardroid.data.zerocice.CarTypPrx updateCarData(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTyp usr)
    {
        return updateCarData(car, usr, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx updateCarData(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx)
    {
        return updateCarData(car, usr, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.CarTypPrx updateCarData(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "updateCarData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("updateCarData");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.updateCarData(car, usr, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_updateCarData(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTyp usr)
    {
        return begin_updateCarData(car, usr, null, false, null);
    }

    public Ice.AsyncResult begin_updateCarData(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx)
    {
        return begin_updateCarData(car, usr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_updateCarData(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTyp usr, Ice.Callback __cb)
    {
        return begin_updateCarData(car, usr, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateCarData(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateCarData(car, usr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_updateCarData(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTyp usr, Callback_CardroidManager_updateCarData __cb)
    {
        return begin_updateCarData(car, usr, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateCarData(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx, Callback_CardroidManager_updateCarData __cb)
    {
        return begin_updateCarData(car, usr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateCarData(uclm.esi.cardroid.data.zerocice.CarTyp car, uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateCarData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateCarData_name, __cb);
        try
        {
            __result.__prepare(__updateCarData_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(car);
            __os.writeObject(usr);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx end_updateCarData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __updateCarData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.CarTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.CarTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __updateCarDataEmail_name = "updateCarDataEmail";

    public uclm.esi.cardroid.data.zerocice.CarTypPrx updateCarDataEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail)
    {
        return updateCarDataEmail(car, usrEmail, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx updateCarDataEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx)
    {
        return updateCarDataEmail(car, usrEmail, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.CarTypPrx updateCarDataEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "updateCarDataEmail", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("updateCarDataEmail");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.updateCarDataEmail(car, usrEmail, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_updateCarDataEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail)
    {
        return begin_updateCarDataEmail(car, usrEmail, null, false, null);
    }

    public Ice.AsyncResult begin_updateCarDataEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx)
    {
        return begin_updateCarDataEmail(car, usrEmail, __ctx, true, null);
    }

    public Ice.AsyncResult begin_updateCarDataEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, Ice.Callback __cb)
    {
        return begin_updateCarDataEmail(car, usrEmail, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateCarDataEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateCarDataEmail(car, usrEmail, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_updateCarDataEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, Callback_CardroidManager_updateCarDataEmail __cb)
    {
        return begin_updateCarDataEmail(car, usrEmail, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateCarDataEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx, Callback_CardroidManager_updateCarDataEmail __cb)
    {
        return begin_updateCarDataEmail(car, usrEmail, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateCarDataEmail(uclm.esi.cardroid.data.zerocice.CarTyp car, String usrEmail, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateCarDataEmail_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateCarDataEmail_name, __cb);
        try
        {
            __result.__prepare(__updateCarDataEmail_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(car);
            __os.writeString(usrEmail);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.CarTypPrx end_updateCarDataEmail(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __updateCarDataEmail_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.CarTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.CarTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __updateUserData_name = "updateUserData";

    public uclm.esi.cardroid.data.zerocice.UserTypPrx updateUserData(uclm.esi.cardroid.data.zerocice.UserTyp usr)
    {
        return updateUserData(usr, null, false);
    }

    public uclm.esi.cardroid.data.zerocice.UserTypPrx updateUserData(uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx)
    {
        return updateUserData(usr, __ctx, true);
    }

    private uclm.esi.cardroid.data.zerocice.UserTypPrx updateUserData(uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "updateUserData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("updateUserData");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.updateUserData(usr, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_updateUserData(uclm.esi.cardroid.data.zerocice.UserTyp usr)
    {
        return begin_updateUserData(usr, null, false, null);
    }

    public Ice.AsyncResult begin_updateUserData(uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx)
    {
        return begin_updateUserData(usr, __ctx, true, null);
    }

    public Ice.AsyncResult begin_updateUserData(uclm.esi.cardroid.data.zerocice.UserTyp usr, Ice.Callback __cb)
    {
        return begin_updateUserData(usr, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateUserData(uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateUserData(usr, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_updateUserData(uclm.esi.cardroid.data.zerocice.UserTyp usr, Callback_CardroidManager_updateUserData __cb)
    {
        return begin_updateUserData(usr, null, false, __cb);
    }

    public Ice.AsyncResult begin_updateUserData(uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx, Callback_CardroidManager_updateUserData __cb)
    {
        return begin_updateUserData(usr, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_updateUserData(uclm.esi.cardroid.data.zerocice.UserTyp usr, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateUserData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __updateUserData_name, __cb);
        try
        {
            __result.__prepare(__updateUserData_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(usr);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public uclm.esi.cardroid.data.zerocice.UserTypPrx end_updateUserData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __updateUserData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.data.zerocice.UserTypPrx __ret;
            __ret = uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __userTripRegistered_name = "userTripRegistered";

    public boolean userTripRegistered(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, uclm.esi.cardroid.data.zerocice.TripTypPrx trip)
    {
        return userTripRegistered(usr, trip, null, false);
    }

    public boolean userTripRegistered(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, uclm.esi.cardroid.data.zerocice.TripTypPrx trip, java.util.Map<String, String> __ctx)
    {
        return userTripRegistered(usr, trip, __ctx, true);
    }

    private boolean userTripRegistered(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, uclm.esi.cardroid.data.zerocice.TripTypPrx trip, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "userTripRegistered", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("userTripRegistered");
                    __delBase = __getDelegate(false);
                    _CardroidManagerDel __del = (_CardroidManagerDel)__delBase;
                    return __del.userTripRegistered(usr, trip, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_userTripRegistered(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, uclm.esi.cardroid.data.zerocice.TripTypPrx trip)
    {
        return begin_userTripRegistered(usr, trip, null, false, null);
    }

    public Ice.AsyncResult begin_userTripRegistered(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, uclm.esi.cardroid.data.zerocice.TripTypPrx trip, java.util.Map<String, String> __ctx)
    {
        return begin_userTripRegistered(usr, trip, __ctx, true, null);
    }

    public Ice.AsyncResult begin_userTripRegistered(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, uclm.esi.cardroid.data.zerocice.TripTypPrx trip, Ice.Callback __cb)
    {
        return begin_userTripRegistered(usr, trip, null, false, __cb);
    }

    public Ice.AsyncResult begin_userTripRegistered(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, uclm.esi.cardroid.data.zerocice.TripTypPrx trip, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_userTripRegistered(usr, trip, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_userTripRegistered(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, uclm.esi.cardroid.data.zerocice.TripTypPrx trip, Callback_CardroidManager_userTripRegistered __cb)
    {
        return begin_userTripRegistered(usr, trip, null, false, __cb);
    }

    public Ice.AsyncResult begin_userTripRegistered(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, uclm.esi.cardroid.data.zerocice.TripTypPrx trip, java.util.Map<String, String> __ctx, Callback_CardroidManager_userTripRegistered __cb)
    {
        return begin_userTripRegistered(usr, trip, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_userTripRegistered(uclm.esi.cardroid.data.zerocice.UserTypPrx usr, uclm.esi.cardroid.data.zerocice.TripTypPrx trip, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__userTripRegistered_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __userTripRegistered_name, __cb);
        try
        {
            __result.__prepare(__userTripRegistered_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            uclm.esi.cardroid.data.zerocice.UserTypPrxHelper.__write(__os, usr);
            uclm.esi.cardroid.data.zerocice.TripTypPrxHelper.__write(__os, trip);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_userTripRegistered(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __userTripRegistered_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static CardroidManagerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        CardroidManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CardroidManagerPrx)
            {
                __d = (CardroidManagerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    CardroidManagerPrxHelper __h = new CardroidManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CardroidManagerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        CardroidManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CardroidManagerPrx)
            {
                __d = (CardroidManagerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    CardroidManagerPrxHelper __h = new CardroidManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CardroidManagerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CardroidManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    CardroidManagerPrxHelper __h = new CardroidManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CardroidManagerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        CardroidManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    CardroidManagerPrxHelper __h = new CardroidManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CardroidManagerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        CardroidManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof CardroidManagerPrx)
            {
                __d = (CardroidManagerPrx)__obj;
            }
            else
            {
                CardroidManagerPrxHelper __h = new CardroidManagerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static CardroidManagerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CardroidManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            CardroidManagerPrxHelper __h = new CardroidManagerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::cardroid::zerocice::CardroidManager"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _CardroidManagerDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _CardroidManagerDelD();
    }

    public static void __write(IceInternal.BasicStream __os, CardroidManagerPrx v)
    {
        __os.writeProxy(v);
    }

    public static CardroidManagerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CardroidManagerPrxHelper result = new CardroidManagerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
