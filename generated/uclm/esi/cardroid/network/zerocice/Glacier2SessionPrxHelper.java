// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package uclm.esi.cardroid.network.zerocice;

/**
 * The session object. This is used to retrieve a CarDroid session
 * on behalf of the client. If the session is not refreshed on a
 * periodic basis, it will be automatically destroyed.
 * 
 **/
public final class Glacier2SessionPrxHelper extends Ice.ObjectPrxHelperBase implements Glacier2SessionPrx
{
    private static final String __destroy_name = "destroy";

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     **/
    public void destroy()
    {
        destroy(null, false);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void destroy(java.util.Map<String, String> __ctx)
    {
        destroy(__ctx, true);
    }

    private void destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "destroy", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _Glacier2SessionDel __del = (_Glacier2SessionDel)__delBase;
                    __del.destroy(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy()
    {
        return begin_destroy(null, false, null);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx)
    {
        return begin_destroy(__ctx, true, null);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Ice.Callback __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the session. This is called automatically when the
     * {@link Router} is destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __destroy_name, __cb);
        try
        {
            __result.__prepare(__destroy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_destroy(Ice.AsyncResult __result)
    {
        __end(__result, __destroy_name);
    }

    private static final String __getCardroidManager_name = "getCardroidManager";

    /**
     * Get the CarDroid manager object.
     * 
     * @return A proxy for the new CarDroid manager.
     * 
     **/
    public uclm.esi.cardroid.zerocice.CardroidManagerPrx getCardroidManager()
    {
        return getCardroidManager(null, false);
    }

    /**
     * Get the CarDroid manager object.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for the new CarDroid manager.
     * 
     **/
    public uclm.esi.cardroid.zerocice.CardroidManagerPrx getCardroidManager(java.util.Map<String, String> __ctx)
    {
        return getCardroidManager(__ctx, true);
    }

    private uclm.esi.cardroid.zerocice.CardroidManagerPrx getCardroidManager(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCardroidManager", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCardroidManager");
                    __delBase = __getDelegate(false);
                    _Glacier2SessionDel __del = (_Glacier2SessionDel)__delBase;
                    return __del.getCardroidManager(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * Get the CarDroid manager object.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCardroidManager()
    {
        return begin_getCardroidManager(null, false, null);
    }

    /**
     * Get the CarDroid manager object.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCardroidManager(java.util.Map<String, String> __ctx)
    {
        return begin_getCardroidManager(__ctx, true, null);
    }

    /**
     * Get the CarDroid manager object.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCardroidManager(Ice.Callback __cb)
    {
        return begin_getCardroidManager(null, false, __cb);
    }

    /**
     * Get the CarDroid manager object.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCardroidManager(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCardroidManager(__ctx, true, __cb);
    }

    /**
     * Get the CarDroid manager object.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCardroidManager(Callback_Glacier2Session_getCardroidManager __cb)
    {
        return begin_getCardroidManager(null, false, __cb);
    }

    /**
     * Get the CarDroid manager object.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCardroidManager(java.util.Map<String, String> __ctx, Callback_Glacier2Session_getCardroidManager __cb)
    {
        return begin_getCardroidManager(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCardroidManager(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCardroidManager_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCardroidManager_name, __cb);
        try
        {
            __result.__prepare(__getCardroidManager_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) A proxy for the new CarDroid manager.
     * 
     **/
    public uclm.esi.cardroid.zerocice.CardroidManagerPrx end_getCardroidManager(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCardroidManager_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            uclm.esi.cardroid.zerocice.CardroidManagerPrx __ret;
            __ret = uclm.esi.cardroid.zerocice.CardroidManagerPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTopic_name = "getTopic";

    /**
     * Get the topic manager object used to subscribe to events via 
     * the IceStorm service.
     * 
     * @return A proxy to the topic manager used by the server 
     * to publish events.
     * 
     **/
    public IceStorm.TopicPrx getTopic()
    {
        return getTopic(null, false);
    }

    /**
     * Get the topic manager object used to subscribe to events via 
     * the IceStorm service.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy to the topic manager used by the server 
     * to publish events.
     * 
     **/
    public IceStorm.TopicPrx getTopic(java.util.Map<String, String> __ctx)
    {
        return getTopic(__ctx, true);
    }

    private IceStorm.TopicPrx getTopic(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTopic", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTopic");
                    __delBase = __getDelegate(false);
                    _Glacier2SessionDel __del = (_Glacier2SessionDel)__delBase;
                    return __del.getTopic(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * Get the topic manager object used to subscribe to events via 
     * the IceStorm service.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTopic()
    {
        return begin_getTopic(null, false, null);
    }

    /**
     * Get the topic manager object used to subscribe to events via 
     * the IceStorm service.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTopic(java.util.Map<String, String> __ctx)
    {
        return begin_getTopic(__ctx, true, null);
    }

    /**
     * Get the topic manager object used to subscribe to events via 
     * the IceStorm service.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTopic(Ice.Callback __cb)
    {
        return begin_getTopic(null, false, __cb);
    }

    /**
     * Get the topic manager object used to subscribe to events via 
     * the IceStorm service.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTopic(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTopic(__ctx, true, __cb);
    }

    /**
     * Get the topic manager object used to subscribe to events via 
     * the IceStorm service.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getTopic(Callback_Glacier2Session_getTopic __cb)
    {
        return begin_getTopic(null, false, __cb);
    }

    /**
     * Get the topic manager object used to subscribe to events via 
     * the IceStorm service.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getTopic(java.util.Map<String, String> __ctx, Callback_Glacier2Session_getTopic __cb)
    {
        return begin_getTopic(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTopic(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTopic_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTopic_name, __cb);
        try
        {
            __result.__prepare(__getTopic_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) A proxy to the topic manager used by the server 
     * to publish events.
     * 
     **/
    public IceStorm.TopicPrx end_getTopic(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTopic_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            IceStorm.TopicPrx __ret;
            __ret = IceStorm.TopicPrxHelper.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __refresh_name = "refresh";

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     **/
    public void refresh()
    {
        refresh(null, false);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void refresh(java.util.Map<String, String> __ctx)
    {
        refresh(__ctx, true);
    }

    private void refresh(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "refresh", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _Glacier2SessionDel __del = (_Glacier2SessionDel)__delBase;
                    __del.refresh(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refresh()
    {
        return begin_refresh(null, false, null);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx)
    {
        return begin_refresh(__ctx, true, null);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refresh(Ice.Callback __cb)
    {
        return begin_refresh(null, false, __cb);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_refresh(__ctx, true, __cb);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_refresh(Callback_Glacier2Session_refresh __cb)
    {
        return begin_refresh(null, false, __cb);
    }

    /**
     * Refresh a session. If a session is not refreshed on a regular
     * basis by the client, it will be automatically destroyed.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx, Callback_Glacier2Session_refresh __cb)
    {
        return begin_refresh(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_refresh(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __refresh_name, __cb);
        try
        {
            __result.__prepare(__refresh_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_refresh(Ice.AsyncResult __result)
    {
        __end(__result, __refresh_name);
    }

    public static Glacier2SessionPrx checkedCast(Ice.ObjectPrx __obj)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof Glacier2SessionPrx)
            {
                __d = (Glacier2SessionPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static Glacier2SessionPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof Glacier2SessionPrx)
            {
                __d = (Glacier2SessionPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static Glacier2SessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static Glacier2SessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static Glacier2SessionPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof Glacier2SessionPrx)
            {
                __d = (Glacier2SessionPrx)__obj;
            }
            else
            {
                Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static Glacier2SessionPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        Glacier2SessionPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            Glacier2SessionPrxHelper __h = new Glacier2SessionPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Glacier2::Session",
        "::Ice::Object",
        "::cardroid::network::zerocice::Glacier2Session"
    };

    public static String ice_staticId()
    {
        return __ids[2];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _Glacier2SessionDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _Glacier2SessionDelD();
    }

    public static void __write(IceInternal.BasicStream __os, Glacier2SessionPrx v)
    {
        __os.writeProxy(v);
    }

    public static Glacier2SessionPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            Glacier2SessionPrxHelper result = new Glacier2SessionPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
